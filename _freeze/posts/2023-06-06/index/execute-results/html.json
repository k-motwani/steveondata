{
  "hash": "2826949e0e924e1e3c769bb94b433e70",
  "result": {
    "markdown": "---\ntitle: \" Simplifying Data Transformation with pivot_longer() in R's tidyr Library\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-06-06\"\ncategories: [rtip, tidyr]\n---\n\n\n# Introduction\n\nIn the world of data analysis and manipulation, tidying and reshaping data is often an essential step. R's `tidyr` library provides powerful tools to efficiently transform and reshape data. One such function is `pivot_longer()`. In this blog post, we'll explore how `pivot_longer()` works and demonstrate its usage through several examples. By the end, you'll have a solid understanding of how to use this function to make your data more manageable and insightful.\n\nThe `tidyr` library holds the function, so we are going to have to load it first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n:::\n\n\n# Understanding pivot_longer()\n\nThe [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) function is designed to reshape data from a wider format to a longer format. It takes columns that represent different variables and consolidates them into key-value pairs, making it easier to analyze and visualize the data.\n\nSyntax:\nThe basic syntax of `pivot_longer()` is as follows:\n\n```R\npivot_longer(data, cols, names_to, values_to)\n```\n\n- `data`: The data frame or tibble to be reshaped.\n- `cols`: The columns to be transformed.\n- `names_to`: The name of the new column that will hold the variable names.\n- `values_to`: The name of the new column that will hold the corresponding values.\n\n# Example 1: Reshaping Wide Data to Long Data\n\nLet's start with a simple example to demonstrate the usage of `pivot_longer()`. Suppose we have a data frame called `students` with columns representing subjects and their respective scores:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents <- data.frame(\n  name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  math = c(90, 85, 92),\n  science = c(95, 88, 91),\n  history = c(87, 92, 78)\n)\n```\n:::\n\n\nTo reshape this data from a wider format to a longer format, we can use `pivot_longer()` as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_long <- pivot_longer(\n  students, \n  cols = -name, \n  names_to = \"subject\", \n  values_to = \"score\"\n  )\n\nstudents_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  name    subject score\n  <chr>   <chr>   <dbl>\n1 Alice   math       90\n2 Alice   science    95\n3 Alice   history    87\n4 Bob     math       85\n5 Bob     science    88\n6 Bob     history    92\n7 Charlie math       92\n8 Charlie science    91\n9 Charlie history    78\n```\n:::\n:::\n\n\nThe resulting `students_long` data frame will have three columns: `name`, `subject`, and `score`, where each row represents a student's score in a specific subject.\n\nExample 2: Handling Multiple Variables\nIn many cases, data frames contain multiple variables that need to be pivoted simultaneously. Consider a data frame called `sales` with columns representing sales figures for different products in different regions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales <- data.frame(\n  region = c(\"North\", \"South\", \"East\"),\n  product_A = c(100, 120, 150),\n  product_B = c(80, 90, 110),\n  product_C = c(60, 70, 80)\n)\n```\n:::\n\n\nTo reshape this data, we can specify multiple columns to pivot using `pivot_longer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_long <- pivot_longer(\n  sales, \n  cols = starts_with(\"product\"), \n  names_to = \"product\", \n  values_to = \"sales\"\n  )\n\nsales_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  region product   sales\n  <chr>  <chr>     <dbl>\n1 North  product_A   100\n2 North  product_B    80\n3 North  product_C    60\n4 South  product_A   120\n5 South  product_B    90\n6 South  product_C    70\n7 East   product_A   150\n8 East   product_B   110\n9 East   product_C    80\n```\n:::\n:::\n\n\nThe resulting `sales_long` data frame will have three columns: `region`, `product`, and `sales`, where each row represents the sales figure of a specific product in a particular region.\n\n# Example 3: Handling Irregular Data\n\nSometimes, data frames contain irregular structures, such as missing values or uneven numbers of columns. `pivot_longer()` can handle such scenarios gracefully. Consider a data frame called `measurements` with columns representing different measurement types and their respective values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasurements <- data.frame(\n  timestamp = c(\"2022-01-01\", \"2022-01-02\", \"2022-01-03\"),\n  temperature = c(25.3, 27.1, 24.8),\n  humidity = c(65.2, NA, 68.5),\n  pressure = c(1013, 1012, NA)\n)\n```\n:::\n\n\nTo reshape this data, we can use `pivot_longer()` and handle the missing values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeasurements_long <- pivot_longer(\n  measurements, \n  cols = -timestamp, \n  names_to = \"measurement\", \n  values_to = \"value\", \n  values_drop_na = TRUE\n  )\n\nmeasurements_long\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  timestamp  measurement  value\n  <chr>      <chr>        <dbl>\n1 2022-01-01 temperature   25.3\n2 2022-01-01 humidity      65.2\n3 2022-01-01 pressure    1013  \n4 2022-01-02 temperature   27.1\n5 2022-01-02 pressure    1012  \n6 2022-01-03 temperature   24.8\n7 2022-01-03 humidity      68.5\n```\n:::\n:::\n\n\nThe resulting `measurements_long` data frame will have three columns: `timestamp`, `measurement`, and `value`, where each row represents a specific measurement at a particular timestamp. The `values_drop_na` argument ensures that rows with missing values are dropped.\n\n# Conclusion\n\nIn this blog post, we explored the `pivot_longer()` function from the tidyr library, which allows us to reshape data from a wider format to a longer format. We covered the syntax and provided several examples to illustrate its usage. By mastering `pivot_longer()`, you'll be equipped to tidy your data and unleash its true potential for analysis and visualization.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}