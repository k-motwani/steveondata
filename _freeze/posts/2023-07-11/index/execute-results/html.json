{
  "hash": "ea83abd97ba2317dd850cbe3c2d8aa73",
  "result": {
    "markdown": "---\ntitle: \"A Closer Look at the R Function identical()\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-07-11\"\ncategories: [rtip]\n---\n\n\n# Introduction\n\nIn the realm of programming, R is a widely-used language for statistical computing and data analysis. Within R, there exists a powerful function called `identical()` that allows programmers to compare objects for exact equality. In this blog post, we will delve into the syntax and usage of the `identical()` function, providing clear explanations and practical examples along the way.\n\n# Syntax of identical()\n\nThe `identical()` function in R has the following simple syntax:\n\n```\nidentical(x, y)\n```\n\nHere, `x` and `y` are the objects that we want to compare. The function returns a logical value of either `TRUE` or `FALSE`, indicating whether `x` and `y` are exactly identical.\n\n# Examples\n\n1. Comparing Numeric Values:\nLet's start with a simple example comparing two numeric values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 5\nb <- 5\nidentical(a, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nIn this case, the `identical()` function will return `TRUE` since both `a` and `b` have the same numeric value of 5.\n\n2. Comparing Character Strings:\nNow, let's consider an example with character strings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname1 <- \"John\"\nname2 <- \"John\"\nidentical(name1, name2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nIn this case, the `identical()` function will return `TRUE` as both `name1` and `name2` contain the same string \"John\".\n\n3. Comparing Vectors:\nThe `identical()` function can also compare vectors. Let's see an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1 <- c(1, 2, 3)\nvec2 <- c(1, 2, 3)\nidentical(vec1, vec2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nHere, the `identical()` function will return `TRUE` since `vec1` and `vec2` have the same values in the same order.\n\n4. Comparing Data Frames:\nData frames are a fundamental data structure in R. Let's compare two data frames using `identical()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- data.frame(a = 1:3, b = c(\"A\", \"B\", \"C\"))\ndf2 <- data.frame(a = 1:3, b = c(\"A\", \"B\", \"C\"))\nidentical(df1, df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nIn this case, the `identical()` function will return `TRUE` as both `df1` and `df2` have the same column names, column types, and corresponding values.\n\n5. Handling Inexact Equality:\nThe `identical()` function is particularly useful when we want to ensure that two objects are precisely the same. However, it does not handle cases where inexact equality is expected. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sqrt(2) * sqrt(2)\ny <- 2\nidentical(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nSurprisingly, the `identical()` function will return `FALSE` in this case. This occurs because `sqrt(2)` introduces a slight rounding error, resulting in `x` and `y` being slightly different despite representing the same mathematical value.\n\n# Conclusion\n\nIn this blog post, we explored the syntax and various use cases of the `identical()` function in R. By leveraging this function, you can determine whether two objects are exactly identical, whether they are numbers, strings, vectors, or even complex data structures like data frames. Remember that `identical()` is designed for exact equality, so if you require inexact comparisons, you may need to explore alternative approaches. Happy coding with R!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}