{
  "hash": "d138ff9852cf4d4298041538a72ee36e",
  "result": {
    "markdown": "---\ntitle: \"Summarizing Data in R: tapply() vs. group_by() and summarize()\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-07-26\"\ncategories: [rtip]\n---\n\n\n# Introduction\n\nAre you tired of manually calculating summary statistics for your data in R? Look no further! In this blog post, we will explore two powerful ways to summarize data: using the `tapply()` function and the `group_by()` and `summarize()` functions from the `dplyr` package. Both methods are incredibly useful and can save you time and effort in your data analysis projects.\n\n# Using tapply() Function:\n\nThe `tapply()` function in R allows you to apply a function to subsets of a vector or array, split by one or more factors. It's a fundamental tool for aggregating data in R. The basic syntax for `tapply()` is as follows:\n\n```r\ntapply(data, INDEX, FUN, ...)\n```\n\n- `data`: The vector or array you want to summarize.\n- `INDEX`: A list of factors or grouping variables used to split the data.\n- `FUN`: The function you want to apply to each subset.\n- `...`: are additional arguments that you want to pass to FUN.\n\n## Example 1: Summarizing a Numeric Vector with tapply()\n\nSuppose you have a dataset with students' exam scores and their corresponding grades. You want to calculate the average score for each grade.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample data\nscores <- c(85, 90, 78, 92, 88, 76, 84, 92, 95, 89)\ngrades <- c(\"A\", \"A\", \"B\", \"A\", \"B\", \"C\", \"B\", \"A\", \"A\", \"B\")\n\n# Using tapply() to calculate the average score for each grade\navg_scores <- tapply(scores, grades, mean)\n\nprint(avg_scores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    A     B     C \n90.80 84.75 76.00 \n```\n:::\n:::\n\n\nOr using the built in `iris` dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_width_by_species <- tapply(iris$Sepal.Width, iris$Species, mean)\n\nprint(mean_width_by_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    setosa versicolor  virginica \n     3.428      2.770      2.974 \n```\n:::\n:::\n\n\nIn this example, `tapply()` splits the `scores` vector based on the different grades in the `grades` vector and calculates the average score for each grade. The same type of thing is done with the second example, splitting the data by Species.\n\n# Using group_by() and summarize() functions from dplyr:\n\nThe `dplyr` package is a powerful tool for data manipulation in R. It provides the `group_by()` function to group data based on specific variables and the `summarize()` function to calculate summary statistics for each group.\n\n## Example 2: Summarizing a Data Frame with group_by() and summarize()\n\nSuppose you have a dataset with information about employees, including their department, salary, and years of experience. You want to find the average salary and the maximum years of experience for each department.\n\nThe group_by() and summarize() functions from the dplyr package provide a more concise way to summarize data. The syntax for these functions is as follows:\n\n```R\ndata %>%\n  group_by(INDEX) %>%\n  summarize(FUN(...))\n```\n\nWhere:\n\n*    `data` is the data frame that you want to summarize.\n*    `INDEX` is the vector that you want to group by.\n*    `FUN` is the function that you want to apply to data.\n*    `...` are additional arguments that you want to pass to FUN.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming you have already installed and loaded the 'dplyr' package\nlibrary(dplyr)\n\n# Sample data frame\nemployees <- data.frame(\n  department = c(\"HR\", \"Engineering\", \"HR\", \"Engineering\", \"Marketing\", \"Marketing\"),\n  salary = c(50000, 65000, 48000, 70000, 55000, 60000),\n  experience = c(3, 5, 2, 7, 4, 6)\n)\n\n# Using group_by() and summarize() to calculate average salary \n# and max experience by department\nsummary_data <- employees %>%\n  group_by(department) %>%\n  summarize(\n    avg_salary = mean(salary), \n    max_experience = max(experience)\n  )\n\nprint(summary_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  department  avg_salary max_experience\n  <chr>            <dbl>          <dbl>\n1 Engineering      67500              7\n2 HR               49000              3\n3 Marketing        57500              6\n```\n:::\n:::\n\n\nThe `group_by()` function groups the data by the `department` variable, and then `summarize()` calculates the average salary and maximum years of experience for each group.\n\nNow let's also see how the functions can produce the same results and what it looks like side by side:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntapply(iris$Sepal.Width, iris$Species, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    setosa versicolor  virginica \n     3.428      2.770      2.974 \n```\n:::\n\n```{.r .cell-code}\niris %>%\n  group_by(Species) %>%\n  summarize(mean_width = mean(Sepal.Width))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Species    mean_width\n  <fct>           <dbl>\n1 setosa           3.43\n2 versicolor       2.77\n3 virginica        2.97\n```\n:::\n:::\n\n\n# Which method should you use?\n\nThe `tapply()` function is a more versatile function, as it can be used to apply any function to a vector, grouped by another vector. However, the group_by() and summarize() functions are more concise and easier to read.\n\nIn general, I would recommend using the `group_by()` and `summarize()` functions if you are only interested in calculating simple summary statistics. However, if you need to apply a more complex function to a vector, or if you need to group by multiple variables, then the `tapply()` function may be a better choice.\n\n# Encouragement\n\nSummarizing data is an essential skill in data analysis, and using the `tapply()` function and the `group_by()` and `summarize()` functions from `dplyr` can significantly simplify your workflow. I encourage you to experiment with your own datasets and try different summary functions (e.g., `median()`, `sd()`, etc.) to gain deeper insights into your data.\n\nFeel free to explore other functions and packages in R that offer powerful data manipulation and summarization capabilities. R provides a vast ecosystem of packages to make your data analysis journey even more enjoyable. Happy coding!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}