{
  "hash": "90722c52ccda64196d270c5283ec1a77",
  "result": {
    "markdown": "---\ntitle: \"The `substring()` function in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-08-14\"\ncategories: [rtip]\n---\n\n\n# Introduction\n\nThe `substring()` function in R is used to extract a substring from a character vector. The syntax of the function is:\n\n```R\nsubstring(x, start, stop)\n```\n\nwhere:\n\n-    `x` is the character vector from which to extract the substring\n-    `start` is the starting position of the substring\n-    `stop` is the ending position of the substring\n\nThe start and stop arguments can be either integers or character strings. If they are integers, they specify the positions of the characters in the string. If they are character strings, they specify the characters that should be used as the starting and ending positions of the substring.\n\n# Examples\n\n## Example 1\n\nFor example, the following code will extract the substring from the string \"Hello, world!\" that starts at the 5th character and ends at the 8th character:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubstring(\"Hello, world!\", 8, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"world\"\n```\n:::\n:::\n\nAs we see this will return the string \"world\".\n\n## Example 2\n\nThe `substring()` function can also be used to extract the first N characters of a string, the last N characters of a string, or to replace a substring in a string.\n\nTo extract the first N characters of a string, you can use the following syntax:\n\n```R\nsubstring(x, 1, N)\n```\n\nFor example, the following code will extract the first 5 characters of the string \"Hello, world!\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubstring(\"Hello, world!\", 1, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"\n```\n:::\n:::\n\n\nAs seen this will return the string \"Hello\".\n\n## Example 3\n\nTo extract the last N characters of a string, you can use the following syntax:\n\n```R\nsubstring(x, nchar(x) - N + 1, nchar(x))\n```\n\nwhere `nchar(x)` is the function that returns the length of the string x.\n\nFor example, the following code will extract the last 5 characters of the string \"Hello, world!\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- \"Hello, world!\"\n\nsubstring(s, nchar(s) - 6 + 1, nchar(s))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"world!\"\n```\n:::\n:::\n\n\nThis will return the string \"world!\".\n\n## Example 4\n\nTo replace a substring in a string, you can use the following syntax:\n\n```R\nsubstring(x, start, stop) <- value\n```\n\nwhere value is the string that you want to replace the substring with.\n\nFor example, the following code will replace the substring \"world\" in the string \"Hello, world!\" with the string \"universe\":\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- \"Hello, world!\"\nsubstring(s, first = 8) <- \"universe\"\ns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello, univer\"\n```\n:::\n:::\n\n\nThis will change the string to \"Hello, univer\". You notice that it __will not__ expand the original length of the string.\n\nIn addition to the `substring()` function, there are also a few other functions that can be used to extract substrings from strings in R. These functions are:\n\n-    str_sub() from the stringr package\n-    sql_left(), sql_right() and sql_mid() from the healthyR library\n\nThe `str_sub()` function from the stringr package is a more powerful and flexible function than the `substring()` function. It supports a wider range of arguments and it can be used to perform more complex string manipulations.\n\nThe `sql_left()`, `sql_right()` and `sql_mid()` functions from the `[{healthyR}](https://www.spsanderson.com/healthyR/) library are designed to be similar to the corresponding functions in SQL. They are easy to use and they can be a good choice for users who are familiar with SQL.\n\nI encourage readers to try things on their own with the `substring()` function and the other functions mentioned in this blog post. There are many different ways to use these functions to extract substrings from strings in R. Experimenting with different functions and different arguments is a great way to learn how to use them effectively.\n\nHere is a link to a blog post that shows some examples of how to use the `sql_left()`, `sql_right()` and `sql_mid()` functions: [https://www.spsanderson.com/steveondata/posts/rtip-2023-03-01/index.html](https://www.spsanderson.com/steveondata/posts/rtip-2023-03-01/index.html)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}