{
  "hash": "42ae12e3902535f909b6e0832ce66a5e",
  "result": {
    "markdown": "---\ntitle: \"How to Plot Multiple Histograms with Base R and ggplot2\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-08-25\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nHistograms are a powerful tool for visualizing the distribution of numerical data. They allow us to quickly understand the frequency distribution of values within a dataset. In this tutorial, we'll explore how to create multiple histograms using two popular R packages: base R and ggplot2. By the end of this guide, you'll be able to confidently display multiple histograms on a single graph using both methods.\n\n# Using Base R to Plot Multiple Histograms\n\nBase R provides a simple yet effective way to create histograms. Let's dive into the syntax and examples.\n\n# Syntax for Creating a Histogram in Base R\n\nTo create a histogram using base R, you can use the `hist()` function. The basic syntax is as follows:\n\n```R\nhist(x, main = \"Histogram Title\", xlab = \"X-axis Label\", ylab = \"Frequency\")\n```\n\n- `x`: The numeric vector of values for which you want to create a histogram.\n- `main`: The title for the histogram.\n- `xlab`: The label for the x-axis.\n- `ylab`: The label for the y-axis.\n\n# Examples\n\n## Example 1: Creating Side-by-Side Histograms\n\nTo plot multiple histograms side by side using base R, you can make use of the `par(mfrow)` function. This function allows you to specify the number of rows and columns for your layout. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create two example datasets\ndata1 <- rnorm(100, mean = 0, sd = 1)\ndata2 <- rnorm(100, mean = 2, sd = 1)\n\n# Set up a side-by-side layout\npar(mfrow = c(1, 2))\n\n# Create the first histogram\nhist(data1, main = \"Histogram 1\", xlab = \"Value\", ylab = \"Frequency\")\n\n# Create the second histogram\nhist(data2, main = \"Histogram 2\", xlab = \"Value\", ylab = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n```\n:::\n\n\nIn this example, we first generate two example datasets (`data1` and `data2`). Then, we use `par(mfrow = c(1, 2))` to set up a side-by-side layout. Finally, we create the histograms for each dataset using the `hist()` function.\n\nNow, let's plot them on the same graph.\n\n## Example 2: Creating Histograms on the same graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create two example datasets\ndata1 <- rnorm(100, mean = 0, sd = 1)\ndata2 <- rnorm(100, mean = 2, sd = 1)\n\nxmin <- min(data1, data2)\nxmax <- max(data1, data2)\n\n# Create the first histogram\nhist(data1, main = \"Histogram 1\", xlab = \"Value\", ylab = \"Frequency\",\n     col = \"powderblue\", xlim = c(xmin, xmax))\n\n# Create the second histogram\nhist(data2, main = \"Histogram 2\", xlab = \"Value\", ylab = \"Frequency\",\n     col = \"pink\", add = TRUE, xlim = c(xmin, xmax))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Example 3: Using ggplot2 to Plot Multiple Histograms\n\nggplot2 is a highly customizable and versatile package for creating complex visualizations. Let's see how to use ggplot2 to create multiple histograms.\n\n# Syntax for Creating a Histogram in ggplot2\n\nTo create a histogram using ggplot2, you use the `ggplot()` function and the `geom_histogram()` layer. The basic syntax is as follows:\n\n```R\nlibrary(ggplot2)\n\nggplot(data, aes(x = variable)) +\n  geom_histogram(binwidth = width, fill = \"color\") +\n  labs(title = \"Histogram Title\", x = \"X-axis Label\", y = \"Frequency\")\n```\n\n- `data`: The dataset containing the variable you want to plot.\n- `variable`: The variable for which you want to create a histogram.\n- `binwidth`: The width of the histogram bins.\n- `color`: The fill color of the bars.\n\n### Example 1:  Creating Multiple Histograms\n\nTo create multiple histograms using ggplot2, you can utilize facets. Facets allow you to split your data into subsets and create separate histograms for each subset. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\n# Create an example dataset\ndata <- data.frame(\n  group = rep(c(\"Group A\", \"Group B\"), each = 100),\n  value = c(rnorm(100, mean = 0, sd = 1), rnorm(100, mean = 2, sd = 1))\n)\n\n# Create multiple histograms using facets\nggplot(data, aes(x = value)) +\n  geom_histogram(binwidth = 0.5, fill = \"steelblue\") +\n  labs(title = \"Multiple Histograms\", x = \"Value\", y = \"Frequency\") +\n  facet_wrap(~ group, nrow = 1) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn this example, we first create an example dataset with two groups (`Group A` and `Group B`). Then, we use the `facet_wrap()` function to create separate histograms for each group.\n\n# Get Hands-On!\n\nNow that you have a grasp of how to create multiple histograms using both base R and ggplot2, it's time to put your skills to the test. Pick a dataset you're interested in, import it into R, and start creating engaging histograms. Experiment with different bin widths, colors, and layouts to find the visualizations that best convey your data's story.\n\nRemember, practice makes perfect! The more you experiment and create histograms, the more comfortable you'll become with the syntax and options offered by both base R and ggplot2. Happy plotting!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}