{
  "hash": "f855ad54b773dd554c8980045374c1de",
  "result": {
    "markdown": "---\ntitle: \"Kernel Density Plots in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-01\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nKernel Density Plots are a type of plot that displays the distribution of values in a dataset using one continuous curve. They are similar to histograms, but they are even better at displaying the shape of a distribution since they aren't affected by the number of bins used in the histogram. In this blog post, we will discuss what Kernel Density Plots are in simple terms, what they are useful for, and show several examples using both base R and ggplot2.\n\n# What are Kernel Density Plots?\n\nKernel Density Plots are a way to estimate the probability density function of a continuous random variable. They are sometimes referred to as a kernel density plot or kernel density estimation plot. The probability density function (PDF) is estimated using the observed data points in the theory underlying a density plot. Each data point is the center of a kernel function, usually a Gaussian (normal) kernel. The density estimateâ€™s shape and width are determined by the kernel function.\n\n# What are Kernel Density Plots useful for?\n\nKernel Density Plots are useful for visualizing the distribution of a dataset. They can be used to identify the shape of the distribution, including whether it is symmetric or skewed, and whether it has one or more peaks. They can also be used to compare the distributions of two or more datasets.\n\n# Examples \n\n## Examples using base R\n\nTo create a Kernel Density Plot in base R, we can use the `density()` function to estimate the density and the `plot()` function to plot it. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate data\nset.seed(1234)\nx <- rnorm(500)\n\n# Estimate density\ndens <- density(x)\n\n# Plot density\nplot(dens)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nThis will generate a Kernel Density Plot of the `x` dataset.\n\nWe can also overlay the density curve over a histogram using the `lines()` function. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate data\nset.seed(1234)\nx <- rnorm(500)\n\n# Plot histogram\nhist(x, freq = FALSE)\n\n# Estimate density\ndens <- density(x)\n\n# Overlay density curve\nlines(dens, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThis will generate a histogram with a Kernel Density Plot overlaid on top.\n\n## Examples using ggplot2\n\nTo create a Kernel Density Plot in ggplot2, we can use the `geom_density()` function. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load ggplot2 package\nlibrary(ggplot2)\n\n# Generate data\nset.seed(1234)\nx <- rnorm(500)\n\n# Create data frame\ndf <- data.frame(x = x)\n\n# Plot density\nggplot(df, aes(x = x)) +\n  geom_density() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nThis will generate a Kernel Density Plot of the `x` dataset using ggplot2.\n\nWe can also customize the plot by changing the color and fill of the density curve. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate data\nset.seed(1234)\nx <- rnorm(500)\n\n# Create data frame\ndf <- data.frame(x = x)\n\n# Plot density\nggplot(df, aes(x = x)) +\n  geom_density(color = \"red\", fill = \"blue\", alpha = 0.328) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis will generate a Kernel Density Plot of the `x` dataset using ggplot2 with a red line, blue fill, and 33% transparency.\n\n## Example using TidyDensity\n\nI have posted on it before but TidyDensity can also help in creating density plots for data that use the `tidy_` distribution functions with its own autoplot function. Let's take a look at an example using the same data as above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n\nset.seed(1234)\n\ntn <- tidy_normal(.n = 500)\n\ntn |> tidy_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNow let's see it with different means on the same chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ntidy_multi_single_dist(\n  .tidy_dist = \"tidy_normal\",\n  .param_list = list(\n    .n = 500,\n    .mean = c(-2, 0, 2),\n    .sd = 1,\n    .num_sims = 1\n  )\n) |>\n  tidy_multi_dist_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nAnd one final one with multiple simulations of each distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ntidy_multi_single_dist(\n  .tidy_dist = \"tidy_normal\",\n  .param_list = list(\n    .n = 500,\n    .mean = c(-2,0,2),\n    .sd = 1,\n    .num_sims = 5\n  )\n) |>\n  tidy_multi_dist_autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Conclusion\n\nKernel Density Plots are a useful tool for visualizing the distribution of a dataset. They are easy to create in both base R and ggplot2, and can be customized to fit your needs. We encourage readers to try creating their own Kernel Density Plots using the examples provided in this blog post.\n\n# References\n\n-   [1] https://r-coder.com/density-plot-r/\n-   [2] https://www.geeksforgeeks.org/how-to-make-density-plots-with-ggplot2-in-r/\n-   [3] https://youtube.com/watch?v=oN6D8_ztl04\n-   [4] http://www.sthda.com/english/wiki/ggplot2-density-plot-quick-start-guide-r-software-and-data-visualization\n-   [5] https://www.tutorialspoint.com/how-to-manually-set-the-colors-of-density-plot-for-categories-in-r\n-   [6] https://www.statology.org/kernel-density-plot-r/\n-   [7] https://www.spsanderson.com/TidyDensity/reference/tidy_multi_single_dist.html",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}