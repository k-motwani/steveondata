{
  "hash": "f24e3c50a953f12a4d17e6c382ba5080",
  "result": {
    "markdown": "---\ntitle: \"When to use Jitter\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-05\"\ncategories: [rtip, viz]\n---\n\n\nAs an R programmer, one of the most useful functions to know is the jitter function. The jitter function is used to add random noise to a numeric vector, which can be helpful when visualizing data in a scatterplot. By using the jitter function, we can get a better picture of the true underlying relationship between two variables in a dataset.\n\n# When to Use Jitter\n\nScatterplots are excellent for visualizing the relationship between two continuous variables. For example, let's say we have a dataset of 100 points on the x and y coordinate plane and we want to visualize the relationship between their x and y. We can create a scatterplot using the plot function in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = runif(100, 150, 250)\ny = (x/3) + rnorm(100)\ndata <- data.frame(x, y)\nplot(data$x, data$y, pch = 16, col = 'steelblue')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nHowever, if we have a lot of data points that are clustered together, it can be difficult to see the true density of the data. This is where the jitter function comes in. We can add some random noise to the data using the jitter function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sample(1:10, 200, TRUE)\ny <- 3*x + rnorm(200)\ndata <- data.frame(x, y)\nplot(jitter(data$x, 0.1), jitter(data$y, 0.1), pch = 16, col = 'steelblue')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nWe can optionally add a numeric argument to jitter to add even more noise to the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jitter(data$x, 0.2), jitter(data$y, 0.2), pch = 16, col = 'steelblue')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe should be careful not to add too much jitter, though, as this can distort the original data too much:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jitter(data$x, 1), jitter(data$y, 1), pch = 16, col = 'steelblue')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n# Jittering Provides a Better View of the Data\n\nAs mentioned before, jittering adds some random noise to data, which can be beneficial when we want to visualize data in a scatterplot. By using the jitter function, we can get a better picture of the true underlying relationship between two variables in a dataset.\n\nLet's look at some example data (where the predictor variable is discrete and the outcome is continuous), look at the problems with plotting these kinds of data using R's defaults, and then look at the jitter function to draw a better scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nx <- sample(1:10, 200, TRUE)\ny <- 3 * x + rnorm(200, 0, 5)\n```\n:::\n\n\nHere's what a standard scatterplot of these data looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y ~ x, pch = 15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nscatterplot without jitter\n\nAs you can see, the data points are stacked on top of each other, making it difficult to see the true density of the data. This is where the jitter function comes in. Let's add some jitter to the x variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y ~ jitter(x), pch = 15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nscatterplot with jitter on x variable\n\nThis is better, but we can still see some stacking of the data points. Let's try adding jitter to the y variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jitter(y) ~ jitter(x), pch = 15)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nscatterplot with jitter on both variables\n\nThis is much better! We can now see the true density of the data and the underlying relationship between the predictor and outcome variables.\n\n# Conclusion\n\nThe jitter function is a useful tool for visualizing data in a scatterplot. By adding some random noise to the data, we can get a better picture of the true underlying relationship between two variables in a dataset. However, we should be careful not to add too much jitter, as this can distort the original data too much. I encourage readers to try using the jitter function in their own scatterplots to see how it can improve their visualizations.\n\n# Resources:\n\n-   [1] https://www.statology.org/jitter-function-r/\n-   [2] https://www.geeksforgeeks.org/how-to-use-the-jitter-function-in-r-for-scatterplots/\n-   [3] https://thomasleeper.com/Rcourse/Tutorials/jitter.html\n-   [4] https://statisticsglobe.com/jitter-r-function-example/\n-   [5] https://biostats.w.uib.no/creating-a-jitter-plot/\n-   [6] https://blog.enterprisedna.co/creating-a-jitter-plot-using-ggplot2-in-rstudio/",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}