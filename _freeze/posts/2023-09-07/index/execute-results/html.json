{
  "hash": "a66fb56243b7b52c4c9b421a770b69ac",
  "result": {
    "markdown": "---\ntitle: \"Mastering Data Visualization in R: How to Plot a Subset of Data\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-07\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\nData visualization is a powerful tool for gaining insights from your data. In R, you have a plethora of libraries and functions at your disposal to create stunning and informative plots. One common task is to plot a subset of your data, which allows you to focus on specific aspects or trends within your dataset. In this blog post, we'll explore various techniques to plot subsets of data in R, and I'll explain each step in simple terms. Don't worry if you're new to R – by the end of this post, you'll be equipped to create customized plots with ease!\n\n**Before we start, make sure you have R and RStudio installed on your computer. If not, you can download them from [R's official website](https://cran.r-project.org/mirrors.html) and [RStudio's website](https://www.rstudio.com/products/rstudio/download/).**\n\n# Examples\n\n## Example 1: Plotting a Subset Based on a Condition\n\nSuppose you have a dataset of monthly sales, and you want to plot only the data points where sales exceeded $10,000. Here's how you can do it:\n\n```R\n# Load your data (replace 'your_data.csv' with your actual file)\ndata <- read.csv(\"your_data.csv\")\n\n# Create a subset based on the condition\nsubset_data <- data[data$Sales > 10000, ]\n\n# Create a scatter plot\nplot(subset_data$Month, subset_data$Sales, \n     main=\"Monthly Sales > $10,000\", \n     xlab=\"Month\", ylab=\"Sales\")\n```\n\nExplanation:\n- We load the data from a CSV file into the 'data' variable.\n- Next, we create a subset of the data using a condition (in this case, sales > $10,000) and store it in 'subset_data.'\n- Finally, we create a scatter plot using the 'plot' function, specifying the x-axis ('Month') and y-axis ('Sales'), and adding labels to the plot.\n\n## Example 2: Plotting a Random Subset\n\nSometimes you might want to plot a random subset of your data. Let's say you have a large dataset of customer reviews, and you want to visualize a random sample of 100 reviews:\n\n```R\n# Load your data (replace 'your_data.csv' with your actual file)\ndata <- read.csv(\"your_data.csv\")\n\n# Create a random subset\nset.seed(123)  # For reproducibility\nsample_data <- data[sample(nrow(data), 100), ]\n\n# Create a bar plot of review ratings\nbarplot(table(sample_data$Rating), \n        main=\"Random Sample of Customer Reviews\",\n        xlab=\"Rating\", ylab=\"Count\")\n```\n\nExplanation:\n- We load the data as before.\n- Using the `sample` function, we select 100 random rows from the dataset while setting the seed for reproducibility.\n- Then, we create a bar plot to visualize the distribution of review ratings.\n\n## Example 3: Plotting Data by Category\n\nSuppose you have a dataset containing information about various products and you want to plot the sales for each product category. Here's how you can do it:\n\n```R\n# Load your data (replace 'your_data.csv' with your actual file)\ndata <- read.csv(\"your_data.csv\")\n\n# Create a bar plot of sales by category\nbarplot(tapply(data$Sales, data$Category, sum),\n        main=\"Sales by Product Category\",\n        xlab=\"Category\", ylab=\"Total Sales\")\n```\n\nExplanation:\n- We load the data.\n- Using the `tapply` function, we group the data by 'Category' and calculate the sum of 'Sales' for each category.\n- Finally, we create a bar plot to visualize the total sales for each product category.\n\nNow for some worked out examples.\n\n## Example 4: Using subset() function\n\nIn this method, first, a subset of the data is created based on some condition, and then it is plotted using the plot function. Let us first create the subset of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_subset <- subset(USArrests, UrbanPop > 70)\nplot(data_subset$Murder, data_subset$Assault)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn the above code, we have created a subset of the USArrests dataset where UrbanPop is greater than 70. Then we have plotted the Murder and Assault columns of the subset using the plot function.\n\n## Example 5: Using [ ] operator\n\nUsing the ‘[ ]’ operator, elements of vectors and observations from data frames can be accessed and subsetted based on some condition.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(USArrests$Murder[USArrests$UrbanPop > 70], USArrests$Assault[USArrests$UrbanPop > 70])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIn the above code, we have used the [ ] operator to subset the USArrests dataset where UrbanPop is greater than 70. Then we have plotted the Murder and Assault columns of the subset using the plot function.\n\n## Example 6: Using attributes for rows and columns\n\nIn this method, we pass the row and column attributes to the plot function to plot a subset of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(USArrests[USArrests$UrbanPop > 70, c(\"Murder\", \"Assault\")])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIn the above code, we have used the row and column attributes to subset the USArrests dataset where UrbanPop is greater than 70. Then we have plotted the Murder and Assault columns of the subset using the plot function.\n\n## Example 7: Using dplyr package\n\nThe dplyr package provides a simple and efficient way to subset data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ndata_subset <- USArrests %>% filter(UrbanPop > 70)\nplot(data_subset$Murder, data_subset$Assault)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIn the above code, we have used the filter function from the dplyr package to subset the USArrests dataset where UrbanPop is greater than 70. Then we have plotted the Murder and Assault columns of the subset using the plot function.\n\nIn conclusion, there are several ways to plot a subset of data in R. We have explored four methods in this blog post. I encourage readers to try these methods on their own and explore other ways to subset and plot data in R.\n\n# Conclusion\nIn this blog post, we've explored different techniques for plotting subsets of data in R. Whether you want to filter data based on conditions, create random samples, or visualize data by categories, R provides you with the tools to do so. Don't be afraid to experiment and tailor these examples to your own datasets. The more you practice, the more proficient you'll become in data visualization with R. Happy coding!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}