{
  "hash": "d25709c995f7ff1b496903a5f3881720",
  "result": {
    "markdown": "---\ntitle: \"Creating Population Pyramid Plots in R with ggplot2\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-08\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nAre you interested in visualizing demographic data in a unique and insightful way? Population pyramids are a fantastic tool for this purpose! They allow you to compare the distribution of populations across age groups for different genders or time periods. In this blog post, we'll explore how to create population pyramid plots in R using the powerful ggplot2 library. Don't worry if you're new to R or ggplot2; we'll walk you through the process step by step.\n\n# Getting Started\n\nBefore we dive into creating population pyramids, make sure you have R and ggplot2 installed. You can install ggplot2 by running the following command if you haven't already:\n\n```R\ninstall.packages(\"ggplot2\")\n```\n\nNow that you're set up let's start by loading the necessary libraries and preparing our data.\n\n# Loading Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the required libraries\nlibrary(ggplot2)\n```\n:::\n\n\n# Preparing Data\n\nFor this example, we'll use a hypothetical dataset that represents the population distribution by age and gender. You can replace this dataset with your own data, but for now, let's create a sample dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a sample dataset\ndata <- data.frame(\n  Age = c(0:9, 0:9),\n  Gender = c(rep(\"Male\", 10), rep(\"Female\", 10)),\n  Population = c(200, 250, 300, 350, 400, 450, 500, 550, 600, 650,\n                  190, 240, 290, 330, 380, 430, 480, 530, 580, 630)\n)\n```\n:::\n\n\n# Constructing the Population Pyramid\n\nNow that we have our data, let's create the population pyramid plot step by step using ggplot2.\n\n## Step 1: Create a Basic Bar Chart\n\nStart by creating a basic bar chart representing the population distribution for one gender. We'll use the `geom_bar` function to do this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a basic bar chart for one gender\nbasic_plot <-  ggplot(\n\tdata, \n\taes(\n\t\tx = Age, \n\t\tfill = Gender, \n\t\ty = ifelse(\n\t\t\ttest = Gender == \"Male\", \n\t\t\tyes = -Population, \n\t\t\tno = Population\n\t\t\t)\n\t\t)\n\t) + \ngeom_bar(stat = \"identity\") \n```\n:::\n\n\nIn this code:\n\n- We filter the data to include only one gender (Male) using `subset`.\n- We use `aes` to specify the aesthetic mappings. We map `Age` to the x-axis, `-Population` to the y-axis (note the negative sign to flip the bars), and `Age` to the fill color.\n- `geom_bar` is used to create the bar chart, and `stat = \"identity\"` ensures that the heights of the bars are determined by the `Population` variable.\n- Finally, `coord_flip()` is applied to flip the chart horizontally, making it look like a pyramid.\n\n## Step 2: Combine Both Genders\n\nTo create a population pyramid, we need to combine both male and female data. We'll create two separate plots for each gender and then combine them using the `+` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create population pyramids for both genders and combine them\npopulation_pyramid <- basic_plot +\n  scale_y_continuous(\n    labels = abs, \n    limits = max(data$Population) * c(-1,1)\n  ) + \n  coord_flip() + \n  theme_minimal() +\n  labs(\n    x = \"Age\", \n    y = \"Population\", \n    fill = \"Age\", \n    title = \"Population Pyramid\"\n  )\n```\n:::\n\n\nIn this step:\n\n-   scale_y_continuous(labels = abs, limits = max(data$Population) * c(-1,1)):\n-   This part adjusts the y-axis (vertical axis) of the plot.\n-   labels = abs means that the labels on the y-axis will show the absolute values (positive numbers) rather than negative values.\n-   limits = max(data$Population) * c(-1,1) sets the limits of the y-axis. It ensures that the y-axis extends from the maximum population value (positive) to the minimum (negative) value, creating a symmetrical pyramid shape.\n-   coord_flip(): This function flips the coordinate system of the plot. By default, the x-axis (horizontal) represents age, and the y-axis (vertical) represents population. coord_flip() swaps them so that the x-axis represents population and the y-axis represents age, creating the pyramid effect.\n-   theme_minimal(): This sets the overall visual theme of the plot to a minimalistic style. It adjusts the background, gridlines, and other visual elements to a simple and clean appearance.\n-   labs(x = \"Age\", y = \"Population\", fill = \"Age\", title = \"Population Pyramid\"): This part labels various elements of the plot:\n    -   x = \"Age\" labels the x-axis as \"Age.\"\n    -   y = \"Population\" labels the y-axis as \"Population.\"\n    -   fill = \"Age\" specifies that the \"Age\" variable will be used to fill the bars in the plot.\n    -   title = \"Population Pyramid\" sets the title of the plot as \"Population Pyramid.\"\n\n## Step 3: Customize Your Plot\n\nFeel free to customize your plot further by adding labels, adjusting colors, or modifying other aesthetics to match your preferences. The `ggplot2` library provides extensive customization options.\n\n## Step 4: Visualize Your Population Pyramid\n\nTo visualize your population pyramid, simply print the `population_pyramid` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_pyramid\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis will display the population pyramid plot in your R graphics window.\n\n# Conclusion\n\nCreating population pyramid plots in R using ggplot2 can be a powerful way to visualize demographic data. In this blog post, we walked through the process step by step, from loading libraries and preparing data to constructing and customizing the pyramid plot. Now it's your turn to give it a try with your own data or explore additional features and customization options in ggplot2. Happy plotting!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}