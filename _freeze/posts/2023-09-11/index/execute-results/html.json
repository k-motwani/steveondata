{
  "hash": "a6855c556f4cded50a05ee8e0a936a61",
  "result": {
    "markdown": "---\ntitle: \"Plotting SVM Decision Boundaries with e1071 in R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-11\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nSupport Vector Machines (SVM) are a powerful tool in the world of machine learning and classification. They excel in finding the optimal decision boundary between different classes of data. However, understanding and visualizing these decision boundaries can be a bit tricky. In this blog post, we'll explore how to plot an SVM object using the `e1071` library in R, making it easier to grasp the magic happening under the hood.\n\n# What is e1071?\n\n`e1071` is an R package that provides tools for performing support vector machine (SVM) classification and regression. It's widely used in the R community for its simplicity and efficiency. In this post, we'll focus on SVM classification.\n\n# Setting Up\n\nBefore we dive into plotting, you'll need to install and load the `e1071` package if you haven't already (I already have it so I won't re-install it). You can do this using the following commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install e1071 (if not already installed)\n# install.packages(\"e1071\")\n\n# Load the library\nlibrary(e1071)\n```\n:::\n\n\n# Creating an Example SVM\n\nLet's start with a simple example to illustrate how to plot the decision boundary of an SVM. We'll use a toy dataset with two classes: red dots and blue squares. Our goal is to create an SVM that separates these two classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a toy dataset\nset.seed(123)\ndata <- data.frame(\n  x1 = rnorm(50, mean = 2),\n  x2 = rnorm(50, mean = 2),\n  label = c(rep(\"Red\", 25), rep(\"Blue\", 25)) |> as.factor()\n)\n\n# Train an SVM\nsvm_model <- svm(label ~ ., data = data, kernel = \"linear\")\n```\n:::\n\n\nIn this example, we generated 50 data points with two features (`x1` and `x2`) and two classes (`Red` and `Blue`). We then trained a linear SVM using the `svm` function from the `e1071` package.\n\n# Plotting the Decision Boundary\n\nNow comes the exciting part â€“ plotting the decision boundary! We'll use a combination of functions to achieve this. First, we'll create a grid of points that cover the entire range of our data. Then, we'll use the SVM model to predict the class labels for these points, effectively creating a decision boundary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a grid of points for prediction\nx1_grid <- seq(min(data$x1), max(data$x1), length.out = 100)\nx2_grid <- seq(min(data$x2), max(data$x2), length.out = 100)\ngrid <- expand.grid(x1 = x1_grid, x2 = x2_grid)\n\n# Predict class labels for the grid\npredicted_labels <- predict(svm_model, newdata = grid)\n\n# Plot the decision boundary\nplot(data$x1, data$x2, col = factor(data$label), pch = 19, main = \"SVM Decision Boundary\")\npoints(grid$x1, grid$x2, col = factor(predicted_labels), pch = \".\", cex = 1.5)\nlegend(\"topright\", legend = levels(data$label), col = c(\"blue\", \"red\"), pch = 19)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\nIn this code, we first create a grid of points covering the range of our data using `expand.grid`. Then, we predict the class labels for these points using our trained SVM model and store them in `predicted_labels`. Finally, we plot the original data points with colors representing their true labels and overlay the decision boundary using the predicted labels.\n\n## Interpreting the Plot\n\nThe resulting plot will display your data points with red dots and blue squares, representing the true class labels. The decision boundary will be shown as a mix of red and blue points, indicating where the SVM has classified the data. The legend on the top-right helps you distinguish between the two classes.\n\nWe can also more simply plot out the model, see below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(svm_model, data = data)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Change the colors\nplot(svm_model, data = data, color.palette = heat.colors)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n## Try It Yourself!\n\nNow that you've seen how to plot an SVM decision boundary using the `e1071` package, I encourage you to try it with your own datasets and experiment with different kernels (e.g., radial or polynomial) to see how the decision boundary changes.\n\nSVMs are a versatile tool for classification tasks, and visualizing their decision boundaries can provide valuable insights into your data and model. Happy plotting!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}