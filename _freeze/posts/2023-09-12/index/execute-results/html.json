{
  "hash": "5286d7b0fdded8b3f3b812ce6334fbdb",
  "result": {
    "markdown": "---\ntitle: \"Exploring the Third Dimension with R: A Guide to the persp() Function\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-09-12\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nIf you're an R enthusiast looking to take your data visualization to the next level, you're in for a treat. In this blog post, we're going to dive into the world of 3D plotting using R's powerful `persp()` function. Whether you're visualizing surfaces, mathematical functions, or complex data, `persp()` is a versatile tool that can help you create stunning three-dimensional plots.\n\n# What is persp()?\n\nThe `persp()` function in R stands for \"perspective plot,\" and it's part of the base graphics package. It allows you to create three-dimensional surface plots by representing a matrix of heights or values as a surface, with the x and y coordinates defining the grid and the z coordinates representing the height of the surface at each point.\n\n## The Syntax of persp()\n\nBefore we dive into examples, let's take a look at the basic syntax of the `persp()` function:\n\n```R\npersp(x, y, z, theta = 30, phi = 30, col = \"lightblue\",\n      border = \"black\", scale = TRUE, ... )\n```\n\n- `x`, `y`, and `z` are the vectors or matrices representing the x, y, and z coordinates of the data points.\n- `theta` and `phi` control the orientation of the plot. `theta` sets the azimuthal angle (rotation around the z-axis), and `phi` sets the polar angle (rotation from the xy-plane). These angles are in degrees.\n- `col` and `border` control the color of the surface and its border, respectively.\n- `scale` is a logical value that determines whether the axes should be scaled to match the data range.\n- Additional parameters can be passed as `...` to customize the plot further.\n\nNow, let's jump into some examples to see how `persp()` works in action!\n\n# Examples\n\n## Example 1: Creating a Simple Surface Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data for a simple surface plot\nx <- seq(-5, 5, length.out = 50)\ny <- seq(-5, 5, length.out = 50)\nz <- outer(x, y, function(x, y) cos(sqrt(x^2 + y^2)))\n\n# Create a 3D surface plot\npersp(x, y, z, col = \"lightblue\", border = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nIn this example, we generate a grid of x and y values and calculate the corresponding z values based on a mathematical function. The `persp()` function then creates a 3D surface plot, using the provided x, y, and z data.\n\n## Example 2: Customizing the Perspective\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data for a surface plot\nx <- seq(-10, 10, length.out = 100)\ny <- seq(-10, 10, length.out = 100)\nz <- outer(x, y, function(x, y) 2 * sin(sqrt(x^2 + y^2)) / sqrt(x^2 + y^2))\n\n# Create a customized 3D surface plot\npersp(x, y, z, col = \"lightblue\", border = \"black\", theta = 60, phi = 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIn this example, we create a similar surface plot but customize the perspective by changing the `theta` and `phi` angles. This gives the plot a different orientation, providing a unique view of the data.\n\n## Example 3: Scaling the Axes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data for a surface plot\nx <- seq(-2, 2, length.out = 50)\ny <- seq(-2, 2, length.out = 50)\nz <- outer(x, y, function(x, y) exp(-x^2 - y^2))\n\n# Create a 3D surface plot with scaled axes\npersp(x, y, z, col = \"lightblue\", border = \"black\", scale = TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nHere, we enable axis scaling with the `scale` parameter, which ensures that the x, y, and z axes are scaled to match the data range.\n\n## Example 4: Multiple Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data\nx <- seq(-10, 10, length.out = 50)\ny <- seq(-10, 10, length.out = 50)\nz1 <- outer(x, y, function(x, y) dnorm(sqrt(x^2 + y^2)))\nz2 <- outer(x, y, function(x, y) dnorm(sqrt((x-2)^2 + (y-2)^2)))\nz3 <- outer(x, y, function(x, y) dnorm(sqrt((x+2)^2 + (y+2)^2)))\n\n# Plot data\npar(mfrow = c(1, 3))\n\npersp(x, y, z1, theta = 30, phi = 30, col = \"lightblue\", border = NA, shade = 0.5, ticktype = \"detailed\", nticks = 5, xlab = \"X\", ylab = \"Y\", zlab = \"Z1\")\npersp(x, y, z2, theta = 30, phi = 30, col = \"lightblue\", border = NA, shade = 0.5, ticktype = \"detailed\", nticks = 5, xlab = \"X\", ylab = \"Y\", zlab = \"Z2\")\npersp(x, y, z3, theta = 30, phi = 30, col = \"lightblue\", border = NA, shade = 0.5, ticktype = \"detailed\", nticks = 5, xlab = \"X\", ylab = \"Y\", zlab = \"Z3\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 1))\n```\n:::\n\n\nIn this example, we create data for three different Gaussian distributions. We define the x- and y-axes and use the outer() function to calculate the z-values based on the normal distribution. We then use the persp() function to plot the data. We set the color to light blue, the border to NA, and the shading to 0.5. We also set the tick type to detailed and the number of ticks to 5. Finally, we label the x-, y-, and z-axes. We use the par() function to create multiple 3D plots in one figure.\n\n# Try It Yourself!\n\nNow that you've seen some examples of what the `persp()` function can do, it's time to try it out on your own data or mathematical functions. Experiment with different perspectives, colors, and data sources to create captivating 3D plots that visualize your information in a whole new dimension.\n\nRemember, the best way to learn is by doing. So, fire up R, load your data, and start exploring the third dimension with `persp()`. Happy plotting!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}