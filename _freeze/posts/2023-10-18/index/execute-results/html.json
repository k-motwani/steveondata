{
  "hash": "24a395c353688575ad470f3877e386dc",
  "result": {
    "markdown": "---\ntitle: \"Making Time Series Stationary Made Easy with `auto_stationarize()`\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-10-18\"\ncategories: [rtip, healthyrts, timeseries]\n---\n\n\n# Introduction\n\nWhen working with time series data, one common challenge is dealing with non-stationary data. Non-stationary time series can be a headache for analysts, but fear not, because we have a handy tool to make your life easier. Say hello to the `auto_stationarize()` function from the {healthyR.ts} package.\n\n# What's in the Box?\n\nBefore we get into the nitty-gritty of how this function works, let's take a look at its syntax:\n\n```R\nauto_stationarize(.time_series)\n```\n\nThe `.time_series` parameter should be a vector or a time series object. This function's primary goal is to attempt to stationarize your time series data. But what does that mean, and why is it important?\n\n# Stationarity: The Why and the How\n\nStationarity is a crucial concept in time series analysis. A stationary time series is one whose statistical properties, like mean, variance, and autocorrelation, don't change over time. Dealing with stationary data is much simpler because many time series models assume stationarity.\n\nNow, here's the magic of `auto_stationarize()`: it automatically handles stationarity for you.\n\n# The Swiss Army Knife of Time Series\n\nThis function is like a Swiss Army knife for your time series data. It checks if your data is already stationary using the Augmented Dickey-Fuller test. If it is, great, you get your original time series back.\n\nBut what if it's not? Well, that's where the real fun begins.\n\n# Transformations Galore\n\nIf your time series isn't stationary, `auto_stationarize()` goes the extra mile to make it so. It attempts a series of transformations until it succeeds. Here's the process:\n\n1. **Augmented Dickey-Fuller Test**: First, the function runs the Augmented Dickey-Fuller test to determine if your time series is stationary. If it's already stationary, you're done.\n\n2. **Logarithmic Transformation**: If the test suggests your data isn't stationary, the function tries a logarithmic transformation. This transformation can be helpful when dealing with data that grows exponentially over time.\n\n3. **Differencing**: If logarithmic transformation doesn't do the trick, the function resorts to differencing. Differencing involves subtracting each value from its previous value, effectively converting your data into the change between time periods.\n\n# What You Get\n\nIf `auto_stationarize()` succeeds in making your data stationary, it returns a list with two valuable elements:\n\n1. `stationary_ts`: This is your shiny, new stationary time series, ready for analysis.\n\n2. `ndiffs`: This little number tells you the order of differencing applied to make your data stationary. It's a useful piece of information if you need to understand how your data was transformed.\n\n# Examples\n\nLet's see some examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ts)\n\nauto_stationarize(AirPassengers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe time series is already stationary via ts_adf_test().\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\n1955 242 233 267 269 270 315 364 347 312 274 237 278\n1956 284 277 317 313 318 374 413 405 355 306 271 306\n1957 315 301 356 348 355 422 465 467 404 347 305 336\n1958 340 318 362 348 363 435 491 505 404 359 310 337\n1959 360 342 406 396 420 472 548 559 463 407 362 405\n1960 417 391 419 461 472 535 622 606 508 461 390 432\n```\n:::\n\n```{.r .cell-code}\nauto_stationarize(BJsales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe time series is not stationary. Attempting to make it stationary...\nDifferencing of order 1 made the time series stationary.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$stationary_ts\nTime Series:\nStart = 2 \nEnd = 150 \nFrequency = 1 \n  [1] -0.6 -0.1 -0.5  0.1  1.2 -1.6  1.4  0.3  0.9  0.4 -0.1  0.0  2.0  1.4  2.2\n [16]  3.4  0.0 -0.7 -1.0  0.7  3.7  0.5  1.4  3.6  1.1  0.7  3.3 -1.0  1.0 -2.1\n [31]  0.6 -1.5 -1.4  0.7  0.5 -1.7 -1.1 -0.1 -2.7  0.3  0.6  0.8  0.0  1.0  1.0\n [46]  4.2  2.0 -2.7 -1.5 -0.7 -1.3 -1.7 -1.1 -0.1 -1.7 -1.8  1.6  0.7 -1.0 -1.5\n [61] -0.7  1.7 -0.2  0.4 -1.8  0.8  0.7 -2.0 -0.3 -0.6  1.3 -1.4 -0.3 -0.9  0.0\n [76]  0.0  1.8  1.3  0.9 -0.3  2.3  0.5  2.2  1.3  1.9  1.5  4.5  1.7  4.8  2.5\n [91]  1.4  3.5  3.2  1.5  0.7  0.3  1.4 -0.1  0.2  1.6 -0.4  0.9  0.6  1.0 -2.5\n[106] -1.4  1.2  1.6  0.3  2.3  0.7  1.3  1.2 -0.2  1.4  3.0 -0.4  1.3 -0.9  1.2\n[121] -0.8 -1.0 -0.8 -0.1 -1.5  0.3  0.2 -0.5 -0.1  0.3  1.3 -1.1 -0.1 -0.5  0.3\n[136] -0.7  0.7 -0.5  0.6 -0.3  0.2  2.1  1.5  1.8  0.4 -0.5 -1.0  0.4  0.5\n\n$ndiffs\n[1] 1\n```\n:::\n:::\n\n\n# Try It Yourself\n\nThe best way to grasp the power of `auto_stationarize()` is by trying it yourself. Install the {healthyR.ts} package, load your time series data, and give it a whirl. The ease and simplicity of making your time series stationary with just one function call will leave you impressed.\n\n# Conclusion\n\nIn the world of time series analysis, making your data stationary is a crucial step. The `auto_stationarize()` function from the {healthyR.ts} package takes the headache out of this process. Whether you're dealing with financial data, weather patterns, or any other time series, this function is your trusty companion.\n\nSo, what are you waiting for? Transform your non-stationary time series into a stationary one with ease, thanks to `auto_stationarize()`. Your future self will thank you for it.\n\nHappy coding and data analysis!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}