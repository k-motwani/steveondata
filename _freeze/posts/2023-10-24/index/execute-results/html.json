{
  "hash": "6d4a326e162b1b3ebe7e9895a7472d8f",
  "result": {
    "markdown": "---\ntitle: \"Creating a Scree Plot in Base R\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-10-24\"\ncategories: [rtip, viz]\n---\n\n\n# Introduction\n\nA scree plot is a line plot that shows the eigenvalues or variance explained by each principal component (PC) in a Principal Component Analysis (PCA). It is a useful tool for determining the number of PCs to retain in a PCA model.\n\nIn this blog post, we will show you how to create a scree plot in base R. We will use the `iris` dataset as an example.\n\n# Step 1: Load the dataset and prepare the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop the non-numerical column\ndf <- iris[, -5]\n```\n:::\n\n\nE Step 2: Perform Principal Component Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform PCA on the iris dataset\npca <- prcomp(df, scale = TRUE)\n```\n:::\n\n\nE Step 3: Create the scree plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the eigenvalues from the PCA object\neigenvalues <- pca$sdev^2\n\n# Create a scree plot\nplot(eigenvalues, type = \"b\",\n     xlab = \"Principal Component\",\n     ylab = \"Eigenvalue\")\n\n# Add a line at y = 1 to indicate the elbow\nabline(v = 2, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Percentage of variance explained\nplot(eigenvalues/sum(eigenvalues), type = \"b\",\n     xlab = \"Principal Component\",\n     ylab = \"Percentage of Variance Explained\")\nabline(v = 2, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n# Interpretation\n\nThe scree plot shows that the first two principal components explain the most variance in the data. The third and fourth principal components explain much less variance.\n\nBased on the scree plot, we can conclude that the first two principal components are sufficient for capturing the most important information in the data.\n\nHere are the eigenvalues and the percentage explained\n\n\n::: {.cell}\n\n```{.r .cell-code}\neigenvalues\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.91849782 0.91403047 0.14675688 0.02071484\n```\n:::\n\n```{.r .cell-code}\neigenvalues/sum(eigenvalues)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.729624454 0.228507618 0.036689219 0.005178709\n```\n:::\n:::\n\n\n# Try it yourself\n\nTry creating a scree plot for another dataset of your choice. You can use the same steps outlined above.\n\nHere are some additional tips for creating scree plots:\n\n*   If you are using a dataset with a large number of variables, you may want to consider scaling the data before performing PCA. This will ensure that all of the variables are on the same scale and that no one variable has undue influence on the results.\n*   You can also add a line to the scree plot at y = 1 to indicate the elbow. The elbow is the point where the scree plot begins to level off. This is often used as a heuristic for determining the number of PCs to retain.\n*   Finally, keep in mind that the interpretation of a scree plot is subjective. There is no single rule for determining the number of PCs to retain. The best approach is to consider the scree plot in conjunction with other factors, such as your research goals and the specific dataset you are using.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}