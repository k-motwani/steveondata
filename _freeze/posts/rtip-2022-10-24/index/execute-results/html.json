{
  "hash": "332dc1877f78004fe1677a8298e76c80",
  "result": {
    "markdown": "---\ntitle: \"Cumulative Variance\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-10-13\"\ncategories: [code, rtip, cumulative, sapply, lapply]\n---\n\n\n# Introducton\n\nThis is going to be a simple example on how we can make a function in #base #r that will crate a cumulative variance function. From base R we are going to use `seq_along()`, `stats::var()`, and `sapply()` inside of the function we will call `cvar` for _cumulative variance_.\n\n# Generate Data\n\nThe first thing we need to do in order to showcase this function is to generate some data. Lets do that below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(\n  a = rnorm(50),\n  b = rnorm(50, 1),\n  c = rnorm(50, 2)\n)\n\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n [1]  0.14236035  1.07908717  0.48811459 -0.96183736 -0.02618869  0.95133167\n [7]  0.63807111  1.02789462  0.93867108 -1.46681319  1.05199480  0.61040866\n[13]  0.76812975 -0.22988768 -0.34388711  1.67072504 -0.49413272 -0.14059831\n[19] -0.47097711  0.95852756 -1.03018262  1.48903677 -0.30260668 -0.78493933\n[25]  0.06605279 -1.60641040  0.57457087 -0.22174409  1.11162910  0.46006121\n[31] -1.08739875  1.58008041 -0.61168338 -1.37363928 -0.18507209  0.73525472\n[37] -0.70491371 -0.04015022  0.08298709  0.12116863  0.12865278 -0.71580060\n[43]  0.35160694  1.02797931  0.39049518 -0.13436957 -0.24578954 -0.02877846\n[49] -0.81464274 -1.68525242\n\n$b\n [1]  1.758829440  1.916498618  1.353868108  1.942021808  1.534140376\n [6]  0.573367847  2.320251704  3.192347314 -0.242697139  0.231853537\n[11]  1.560889517  1.196108482  2.153484524  1.680142180 -0.317074702\n[16]  0.610887191  0.927771536  2.681267270  0.307306454 -0.176293057\n[21]  2.344669268  0.139295474  2.024717322  0.570051058  1.736287156\n[26]  2.681035387  0.354018495  0.611700916  1.080726406  2.229127803\n[31]  1.666757859  0.475579831  0.442114554  0.548917419  0.410108199\n[36]  0.506300847 -0.114215908  0.413051923  2.025665610  2.513906192\n[41] -0.100379318  1.890878269  0.316080468  1.089379172  2.406042498\n[46]  0.047148019  2.397266227  0.187906572  1.227735877  0.003326697\n\n$c\n [1]  1.3945854  1.3443772  0.6948003  2.3244759  2.2925597  3.1505359\n [7]  1.3095937  1.0185892  1.6088478  3.3028247  1.7349163  0.9236423\n[13]  2.2360962  2.9414162  2.6952268  1.9027548  2.1016597  3.6128745\n[19]  4.2309519  1.1695254  2.5860830  1.0786332  1.7326888 -0.7212045\n[25]  3.9881368  3.2365959  1.9744439  3.0853299  2.0879474  2.5888250\n[31]  1.0716597  1.8685039  2.8147892  3.2263676  0.6835549  2.8591092\n[37]  2.1518276  2.1830949  3.3952395  3.0968725  2.0128380  2.5838940\n[43]  3.8908572  0.6849639  1.5124854  2.5527159  2.4757899  3.1267242\n[49]  1.3601469  0.8975081\n```\n:::\n:::\n\n\n# Make Function\n\nNow that we have our data, lets make the function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncvar <- function(.x){\n  sapply(seq_along(.x), function(k, z) stats::var(z[1:k]), z = .x)\n}\n```\n:::\n\n\nOk, now that we have our function, lets take a look at it in use.\n\n# Use Function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(l, cvar)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              a          b           c\n [1,]        NA         NA          NA\n [2,] 0.4387286 0.01242978 0.001260431\n [3,] 0.2243753 0.08423439 0.152361694\n [4,] 0.7361032 0.07379517 0.449608552\n [5,] 0.5611614 0.06405452 0.482728196\n [6,] 0.5574772 0.26319627 0.781642346\n [7,] 0.4830026 0.31239592 0.695736923\n [8,] 0.4748609 0.57349940 0.670205756\n [9,] 0.4457001 0.97635513 0.587183390\n[10,] 0.7733498 1.05349509 0.784634920\n[11,] 0.7500445 0.94910706 0.707255539\n[12,] 0.6874597 0.86895774 0.712051239\n[13,] 0.6421960 0.83517906 0.670273431\n[14,] 0.6214222 0.77327038 0.712579734\n[15,] 0.6098735 0.94112518 0.706319948\n[16,] 0.6847408 0.91634823 0.659283591\n[17,] 0.6885667 0.86914816 0.619817732\n[18,] 0.6610967 0.92139029 0.738864469\n[19,] 0.6570367 0.93224012 0.952133506\n[20,] 0.6457895 0.99750459 0.949936806\n[21,] 0.6989706 1.00362785 0.913713807\n[22,] 0.7359479 1.01833479 0.919750868\n[23,] 0.7184031 0.99756659 0.883045388\n[24,] 0.7340650 0.97590509 1.167025074\n[25,] 0.7045773 0.94424710 1.285467616\n[26,] 0.8054156 0.98188722 1.290398824\n[27,] 0.7809677 0.97973891 1.241125941\n[28,] 0.7575305 0.96029037 1.232041471\n[29,] 0.7619505 0.92727988 1.188050483\n[30,] 0.7381221 0.92615115 1.154892890\n[31,] 0.7668343 0.89963699 1.151911185\n[32,] 0.8054067 0.89243063 1.116245706\n[33,] 0.8002625 0.88606944 1.097713105\n[34,] 0.8466948 0.87406657 1.101598065\n[35,] 0.8246462 0.86796673 1.129435833\n[36,] 0.8115328 0.85711366 1.113423960\n[37,] 0.8082386 0.87964306 1.082531528\n[38,] 0.7870376 0.87054301 1.053391286\n[39,] 0.7663478 0.86774066 1.067495159\n[40,] 0.7467002 0.89112519 1.062498991\n[41,] 0.7280398 0.90987648 1.036573699\n[42,] 0.7265981 0.90023009 1.015359809\n[43,] 0.7108620 0.89624446 1.059225765\n[44,] 0.7139730 0.87552184 1.088155986\n[45,] 0.6993790 0.89010022 1.073483425\n[46,] 0.6853049 0.89862212 1.052807302\n[47,] 0.6732510 0.91148170 1.031799126\n[48,] 0.6593397 0.91299243 1.028324136\n[49,] 0.6630180 0.89404281 1.021452523\n[50,] 0.7125354 0.90301656 1.033879360\n```\n:::\n\n```{.r .cell-code}\nlapply(l, cvar)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n [1]        NA 0.4387286 0.2243753 0.7361032 0.5611614 0.5574772 0.4830026\n [8] 0.4748609 0.4457001 0.7733498 0.7500445 0.6874597 0.6421960 0.6214222\n[15] 0.6098735 0.6847408 0.6885667 0.6610967 0.6570367 0.6457895 0.6989706\n[22] 0.7359479 0.7184031 0.7340650 0.7045773 0.8054156 0.7809677 0.7575305\n[29] 0.7619505 0.7381221 0.7668343 0.8054067 0.8002625 0.8466948 0.8246462\n[36] 0.8115328 0.8082386 0.7870376 0.7663478 0.7467002 0.7280398 0.7265981\n[43] 0.7108620 0.7139730 0.6993790 0.6853049 0.6732510 0.6593397 0.6630180\n[50] 0.7125354\n\n$b\n [1]         NA 0.01242978 0.08423439 0.07379517 0.06405452 0.26319627\n [7] 0.31239592 0.57349940 0.97635513 1.05349509 0.94910706 0.86895774\n[13] 0.83517906 0.77327038 0.94112518 0.91634823 0.86914816 0.92139029\n[19] 0.93224012 0.99750459 1.00362785 1.01833479 0.99756659 0.97590509\n[25] 0.94424710 0.98188722 0.97973891 0.96029037 0.92727988 0.92615115\n[31] 0.89963699 0.89243063 0.88606944 0.87406657 0.86796673 0.85711366\n[37] 0.87964306 0.87054301 0.86774066 0.89112519 0.90987648 0.90023009\n[43] 0.89624446 0.87552184 0.89010022 0.89862212 0.91148170 0.91299243\n[49] 0.89404281 0.90301656\n\n$c\n [1]          NA 0.001260431 0.152361694 0.449608552 0.482728196 0.781642346\n [7] 0.695736923 0.670205756 0.587183390 0.784634920 0.707255539 0.712051239\n[13] 0.670273431 0.712579734 0.706319948 0.659283591 0.619817732 0.738864469\n[19] 0.952133506 0.949936806 0.913713807 0.919750868 0.883045388 1.167025074\n[25] 1.285467616 1.290398824 1.241125941 1.232041471 1.188050483 1.154892890\n[31] 1.151911185 1.116245706 1.097713105 1.101598065 1.129435833 1.113423960\n[37] 1.082531528 1.053391286 1.067495159 1.062498991 1.036573699 1.015359809\n[43] 1.059225765 1.088155986 1.073483425 1.052807302 1.031799126 1.028324136\n[49] 1.021452523 1.033879360\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}