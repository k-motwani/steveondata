{
  "hash": "3f033c822a508eef3a86235e0c82e995",
  "result": {
    "markdown": "---\ntitle: \"Control Charts in healthyR.ai\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-10-26\"\ncategories: [code, rtip, healthyrai]\n---\n\n\n# Introduction\n\nSometimes you may be working with a time series or some process data and you will want to make a control chart. This is simple to do with the `{healthyR.ai}` package.\n\nIf you do not already have it, then you can follow the simple code below to get the latest version.\n\n## Installation\n\nYou can install the released version of healthyR.ai from CRAN with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"healthyR.ai\")\n```\n:::\n\n\nAnd the development version from GitHub with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"devtools\")\ndevtools::install_github(\"spsanderson/healthyR.ai\")\n```\n:::\n\n\nNow that we have the latest version installed, lets get some data and then use the function.\n\n# Library Load\n\nCan't do anyting without loading the library into our current session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ai)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n== Welcome to healthyR.ai ===========================================================================\nIf you find this package useful, please leave a star: \n   https://github.com/spsanderson/healthyR.ai'\n\nIf you encounter a bug or want to request an enhancement please file an issue at:\n   https://github.com/spsanderson/healthyR.ai/issues\n\nThank you for using healthyR.ai\n```\n:::\n:::\n\n\n# Generate Data\n\nLets generate some fake data below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_tbl <- tibble::tibble(\n  day = sample(\n    c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"),\n    100, TRUE\n  ),\n  person = sample(c(\"Tom\", \"Jane\", \"Alex\"), 100, TRUE),\n  count = rbinom(100, 20, ifelse(day == \"Friday\", .5, .2)),\n  date = Sys.Date() - sample.int(100)\n)\n```\n:::\n\n\nLets take a look at the `data_tbl`, to do so we will use the `glimpse()` function from `dplyr`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndplyr::glimpse(data_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 100\nColumns: 4\n$ day    <chr> \"Tuesday\", \"Monday\", \"Monday\", \"Monday\", \"Wednesday\", \"Wednesda…\n$ person <chr> \"Jane\", \"Jane\", \"Tom\", \"Tom\", \"Tom\", \"Jane\", \"Alex\", \"Alex\", \"A…\n$ count  <int> 2, 3, 2, 4, 3, 3, 1, 2, 0, 3, 1, 4, 4, 10, 6, 3, 6, 3, 3, 4, 4,…\n$ date   <date> 2022-08-02, 2022-09-23, 2022-09-07, 2022-10-14, 2022-08-01, 20…\n```\n:::\n:::\n\n\n# Control Chart\n\nThe `{healthyR.ai}` package comes with a control chart function. The reference for this function can be found [here](https://www.spsanderson.com/healthyR.ai/reference/hai_control_chart.html).\n\nLet's take a look at the full function call and it's defaults.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_control_chart(\n  .data,\n  .value_col,\n  .x_col,\n  .center_line = mean,\n  .std_dev = 3,\n  .plt_title = NULL,\n  .plt_catpion = NULL,\n  .plt_font_size = 11,\n  .print_plot = TRUE\n)\n```\n:::\n\n\nSo we see that there are several arguments to the function, with only three that are required from the user.\n\n# Details\n\nControl charts, also known as Shewhart charts (after Walter A. Shewhart) or process-behavior charts, are a statistical process control tool used to determine if a manufacturing or business process is in a state of control. It is more appropriate to say that the control charts are the graphical device for Statistical Process Monitoring (SPM). Traditional control charts are mostly designed to monitor process parameters when underlying form of the process distributions are known. However, more advanced techniques are available in the 21st century where incoming data streaming can-be monitored even without any knowledge of the underlying process distributions. Distribution-free control charts are becoming increasingly popular.\n\nNow let's see an example or a couple.\n\n# Visual\n\nLet's use the mean as is the default\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_control_chart(.data = data_tbl, .value_col = count, .x_col = date)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chart_one-1.png){width=672}\n:::\n:::\n\n\nNow let's use the median and change the standard deviation argument to 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_control_chart(data_tbl, count, date, median, 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/chart_two-1.png){width=672}\n:::\n:::\n\n\nFor a more advanced set of charts from a dedicated package you may want to check out the following from [John MacKintosh](https://github.com/johnmackintosh):\n\n-   [runcharter](https://github.com/johnmackintosh/runcharter)\n-   [cusumcharter](https://github.com/johnmackintosh/cusumcharter)\n-   [spccharter](https://github.com/johnmackintosh/spccharter)\n\nVoila!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}