{
  "hash": "fcde3e43e31c7fd6ec6a6c4b5da4c786",
  "result": {
    "markdown": "---\ntitle: \"Mapping K-Means with healthyR.ai\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-11-09\"\ncategories: [code, rtip, healthyrai, kmeans]\nimage: healthyrai_logo.png\n---\n\n\n# Introduction\n\nK-Means is a [clustering algorithm](https://en.wikipedia.org/wiki/K-means_clustering) that can be used to find potential clusters in your data.\n\nThe algorithm does require that you look at different values of `K` in order to assess which is the optimal value.\n\nIn the `R` package `{healthyR.ai}` there is a utility to do this.\n\n# Function\n\nLet's take a look at the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_kmeans_mapped_tbl(.data, .centers = 15)\n\nkmeans_mapped_tbl(.data, .centers = 15)\n```\n:::\n\n\nYou will notice that there are two, they are synonyms to each other as this functionality is moving out of the `{healthyR}` package.\n\n## Parameters\n\nThe parameters take the following arguments:\n\n*  `.data` - This is the data that should be an output of the `hai_user_item_tbl()` or it's synonym, or should at least be in the `user item` matrix format.\n*  `.centers` - The maximum amount of centers you want to map to the `k-means` function. The default is 15.\n\n# Example\n\nLet's run an example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.data)\nlibrary(healthyR.ai)\nlibrary(dplyr)\n\ndata_tbl <- healthyR_data %>%\n  filter(ip_op_flag == \"I\") %>%\n  filter(payer_grouping != \"Medicare B\") %>%\n  filter(payer_grouping != \"?\") %>%\n  select(service_line, payer_grouping) %>%\n  mutate(record = 1) %>%\n  as_tibble()\n\nui_tbl <- hai_kmeans_user_item_tbl(\n  .data = data_tbl,\n  .row_input = service_line,\n  .col_input = payer_grouping,\n  .record_input = record\n)\n\nkmeans_mapped_tbl <- hai_kmeans_mapped_tbl(ui_tbl)\n```\n:::\n\n\nLet's take a look at our data, user item matrix and our kmeans mapped tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 116,823 × 3\n   service_line  payer_grouping record\n   <chr>         <chr>           <dbl>\n 1 Medical       Blue Cross          1\n 2 Schizophrenia Medicare A          1\n 3 Syncope       Medicare A          1\n 4 Pneumonia     Medicare A          1\n 5 Chest Pain    Blue Cross          1\n 6 Chest Pain    Blue Cross          1\n 7 Surgical      Commercial          1\n 8 Medical       Medicare A          1\n 9 Alcohol Abuse Medicare A          1\n10 Syncope       Medicare A          1\n# … with 116,813 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nui_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23 × 12\n   service_line   Blue …¹ Comme…² Compe…³ Excha…⁴    HMO Medic…⁵ Medic…⁶ Medic…⁷\n   <chr>            <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>\n 1 Alcohol Abuse   0.0941 0.0321  5.25e-4 0.0116  0.0788 0.158    0.367   0.173 \n 2 Bariatric Sur…  0.317  0.0583  0       0.0518  0.168  0.00324  0.343   0.0485\n 3 Carotid Endar…  0.0845 0.0282  0       0       0.0141 0        0.0282  0.648 \n 4 Cellulitis      0.110  0.0339  1.18e-2 0.00847 0.0805 0.0869   0.192   0.355 \n 5 Chest Pain      0.144  0.0391  2.90e-3 0.00543 0.112  0.0522   0.159   0.324 \n 6 CHF             0.0295 0.00958 5.18e-4 0.00414 0.0205 0.0197   0.0596  0.657 \n 7 COPD            0.0493 0.0228  2.28e-4 0.00548 0.0342 0.0461   0.172   0.520 \n 8 CVA             0.0647 0.0246  1.07e-3 0.0107  0.0524 0.0289   0.0764  0.555 \n 9 GI Hemorrhage   0.0542 0.0175  1.25e-3 0.00834 0.0480 0.0350   0.0855  0.588 \n10 Joint Replace…  0.139  0.0179  3.36e-2 0.00673 0.0516 0        0.0874  0.5   \n# … with 13 more rows, 3 more variables: `Medicare HMO` <dbl>,\n#   `No Fault` <dbl>, `Self Pay` <dbl>, and abbreviated variable names\n#   ¹​`Blue Cross`, ²​Commercial, ³​Compensation, ⁴​`Exchange Plans`, ⁵​Medicaid,\n#   ⁶​`Medicaid HMO`, ⁷​`Medicare A`\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_mapped_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   centers k_means  glance          \n     <int> <list>   <list>          \n 1       1 <kmeans> <tibble [1 × 4]>\n 2       2 <kmeans> <tibble [1 × 4]>\n 3       3 <kmeans> <tibble [1 × 4]>\n 4       4 <kmeans> <tibble [1 × 4]>\n 5       5 <kmeans> <tibble [1 × 4]>\n 6       6 <kmeans> <tibble [1 × 4]>\n 7       7 <kmeans> <tibble [1 × 4]>\n 8       8 <kmeans> <tibble [1 × 4]>\n 9       9 <kmeans> <tibble [1 × 4]>\n10      10 <kmeans> <tibble [1 × 4]>\n11      11 <kmeans> <tibble [1 × 4]>\n12      12 <kmeans> <tibble [1 × 4]>\n13      13 <kmeans> <tibble [1 × 4]>\n14      14 <kmeans> <tibble [1 × 4]>\n15      15 <kmeans> <tibble [1 × 4]>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkmeans_mapped_tbl %>%\n  tidyr::unnest(glance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 6\n   centers k_means  totss tot.withinss betweenss  iter\n     <int> <list>   <dbl>        <dbl>     <dbl> <int>\n 1       1 <kmeans>  1.41       1.41    1.33e-15     1\n 2       2 <kmeans>  1.41       0.592   8.17e- 1     1\n 3       3 <kmeans>  1.41       0.372   1.04e+ 0     2\n 4       4 <kmeans>  1.41       0.276   1.13e+ 0     2\n 5       5 <kmeans>  1.41       0.202   1.21e+ 0     2\n 6       6 <kmeans>  1.41       0.159   1.25e+ 0     3\n 7       7 <kmeans>  1.41       0.124   1.28e+ 0     3\n 8       8 <kmeans>  1.41       0.0884  1.32e+ 0     3\n 9       9 <kmeans>  1.41       0.0745  1.33e+ 0     3\n10      10 <kmeans>  1.41       0.0576  1.35e+ 0     2\n11      11 <kmeans>  1.41       0.0460  1.36e+ 0     3\n12      12 <kmeans>  1.41       0.0363  1.37e+ 0     2\n13      13 <kmeans>  1.41       0.0272  1.38e+ 0     2\n14      14 <kmeans>  1.41       0.0202  1.39e+ 0     3\n15      15 <kmeans>  1.41       0.0161  1.39e+ 0     3\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}