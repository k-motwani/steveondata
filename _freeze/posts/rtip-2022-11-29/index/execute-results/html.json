{
  "hash": "4c2b87464748f68913ab29436ed06993",
  "result": {
    "markdown": "---\ntitle: \"Working with Lists\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-11-29\"\ncategories: [code, rtip, lists, lapply]\n---\n\n\n# Introduction\n\nIn __R__ there are many times where we will work with _lists_. I won't go into why lists are great or really the structure of a list but rather simply working with them.\n\n# Example\n\nFirst let's make a list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(\n  letters,\n  1:26,\n  rnorm(26)\n)\n\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n[[2]]\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\n[[3]]\n [1] -1.5647537840 -1.3080486753  1.3331315389 -0.5490502644 -0.4467608750\n [6] -1.5876952894  0.2292049732 -0.2885449316  1.4614499298 -0.0864987690\n[11]  0.5686850031 -0.3897819578  0.1776603862 -1.1326372302 -1.8651290164\n[16]  1.2676006036  0.2405115523 -1.0506728047  1.4069277686 -1.0125778892\n[21] -0.7687818102 -0.1325350681  0.3639485041  0.0005700058 -1.0698214370\n[26]  1.1972767040\n```\n:::\n:::\n\n\nNow let's look at somethings we can do with lists. First, let's see if we can get the class of each item in the list. We are going to use `lapply()` for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(l, class)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"character\"\n\n[[2]]\n[1] \"integer\"\n\n[[3]]\n[1] \"numeric\"\n```\n:::\n:::\n\n\nNow, let's perform some simple operations on each item of the list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(l, length)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 26\n\n[[2]]\n[1] 26\n\n[[3]]\n[1] 26\n```\n:::\n\n```{.r .cell-code}\ntry(lapply(l, sum))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError in FUN(X[[i]], ...) : invalid 'type' (character) of argument\n```\n:::\n:::\n\n\nOk so we see taking the sum of the first element of the list in `lapply()` did not work because of a class type mismatch. Let's see how we can get around this an only apply the `sum` function to a `numeric` type. To do this we can rely on [`{purrr}`](https://purrr.tidyverse.org/) by using a function [`map_if()`](https://purrr.tidyverse.org/reference/map_if.html?q=map_if#null)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\nmap_if(l, is.numeric, sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n[[2]]\n[1] 351\n\n[[3]]\n[1] -5.006323\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_if(l, is.numeric, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n[[2]]\n[1] 13.5\n\n[[3]]\n[1] -0.1925509\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}