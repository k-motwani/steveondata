{
  "hash": "cce7565bbfbd0b858b4c89117d6be0a9",
  "result": {
    "markdown": "---\ntitle: \"Generate Random Walk Data with {healthyR.ts}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-11-29\"\ncategories: [code, rtip, timeseries, healthyrts]\n---\n\n\n# Introduction\n\nGenerating random walk data for timesieries analysis does not have to be difficult, and in fact is not. It can be generated for multiple simulations and have a tidy output. How? [`ts_random_walk()`](https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html) from the [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) package. Let's take a look at the function.\n\n# Function\n\nHere is the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_random_walk(\n  .mean = 0,\n  .sd = 0.1,\n  .num_walks = 100,\n  .periods = 100,\n  .initial_value = 1000\n)\n```\n:::\n\n\nNow let's look at the arguments to the parameters.\n\n*  `.mean` - The desired mean of the random walks\n*  `.sd` - The standard deviation of the random walks\n*  `.num_walks` - The number of random walks you want generated\n*  `.periods` - The length of the random walk(s) you want generated\n*  `.initial_value` - The initial value where the random walks should start\n\nThe underlying data of this function is generated by `rnorm()`\n\n# Example\n\nLet's take a look at an example and see some visuals. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ts)\nlibrary(ggplot2)\n\ndf <- ts_random_walk(.num_walks = 100)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10,000 × 4\n     run     x       y cum_y\n   <dbl> <dbl>   <dbl> <dbl>\n 1     1     1 -0.128   872.\n 2     1     2  0.0231  892.\n 3     1     3  0.0803  964.\n 4     1     4 -0.162   808.\n 5     1     5  0.0580  855.\n 6     1     6 -0.109   762.\n 7     1     7  0.0617  809.\n 8     1     8  0.0988  888.\n 9     1     9  0.0917  970.\n10     1    10  0.127  1093.\n# … with 9,990 more rows\n```\n:::\n:::\n\n\nThere are attributes attached to the output of this function, let's see what they are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\natb <- attributes(df)\n\nnames_to_print <- names(atb)[which(names(atb) != \"row.names\")]\n\natb[names_to_print]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$names\n[1] \"run\"   \"x\"     \"y\"     \"cum_y\"\n\n$.mean\n[1] 0\n\n$.sd\n[1] 0.1\n\n$.num_walks\n[1] 100\n\n$.periods\n[1] 100\n\n$.initial_value\n[1] 1000\n```\n:::\n:::\n\n\nNow lets visualize.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n   ggplot(\n       mapping = aes(\n           x = x\n           , y = cum_y\n           , color = factor(run)\n           , group = factor(run)\n        )\n    ) +\n    geom_line(alpha = 0.8) +\n    ts_random_walk_ggplot_layers(df)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/viz-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}