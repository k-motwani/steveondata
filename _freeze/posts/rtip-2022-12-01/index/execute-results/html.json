{
  "hash": "c8e21cad5ea1fc2a887b81478bef1048",
  "result": {
    "markdown": "---\ntitle: \"Extract Boilerplate Workflow Metrics with {healthyR.ai}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2022-12-01\"\ncategories: [code, rtip, healthyrai]\n---\n\n\n# Introduction\n\nWhen working with the `{tidymodels}` framework there are ways to pull model metrics from a `workflow`, since [`{healthyR.ai}`](https://www.spsanderson.com/healthyR.ai/) is built on and around the `{tidyverse}` and `{tidymodels}` we can do the same. This post will focus on the function [`hai_auto_wflw_metrics()`](https://www.spsanderson.com/healthyR.ai/reference/hai_auto_wflw_metrics.html)\n\n# Function\n\nLet's take a look at the function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_auto_wflw_metrics(.data)\n```\n:::\n\n\nThe only parameter is `.data` and this is strictly the output object of one of the [`hai_auto_` boiler plate functions](https://www.spsanderson.com/healthyR.ai/reference/index.html#boiler-plate-functions)\n\n# Example\n\nSince this function requires the input from an `hai_auto` function, we will walk through an example with the __iris__ data set. We are going to use the `hai_auto_knn()` to classify the `Species`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ai)\n\ndata <- iris\n\nrec_obj <- hai_knn_data_prepper(data, Species ~ .)\n\nauto_knn <- hai_auto_knn(\n  .data = data,\n  .rec_obj = rec_obj,\n  .best_metric = \"f_meas\",\n  .model_type = \"classification\",\n  .grid_size = 2,\n  .num_cores = 4\n)\n\nhai_auto_wflw_metrics(auto_knn)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 9\n   neighbors weight_func dist_power .metric  .esti…¹  mean     n std_err .config\n       <int> <chr>            <dbl> <chr>    <chr>   <dbl> <int>   <dbl> <chr>  \n 1         8 rank             0.888 accuracy multic… 0.95     25 0.00652 Prepro…\n 2         8 rank             0.888 bal_acc… macro   0.962    25 0.00471 Prepro…\n 3         8 rank             0.888 f_meas   macro   0.947    25 0.00649 Prepro…\n 4         8 rank             0.888 kap      multic… 0.922    25 0.0102  Prepro…\n 5         8 rank             0.888 mcc      multic… 0.925    25 0.00964 Prepro…\n 6         8 rank             0.888 npv      macro   0.975    25 0.00351 Prepro…\n 7         8 rank             0.888 ppv      macro   0.949    25 0.00663 Prepro…\n 8         8 rank             0.888 precisi… macro   0.949    25 0.00663 Prepro…\n 9         8 rank             0.888 recall   macro   0.949    25 0.00633 Prepro…\n10         8 rank             0.888 sensiti… macro   0.949    25 0.00633 Prepro…\n# … with 12 more rows, and abbreviated variable name ¹​.estimator\n```\n:::\n:::\n\n\nAs we see this pulls out the full metric table from the workflow.\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}