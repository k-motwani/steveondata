{
  "hash": "3d83ef61aa178cd07bbdfaf361de075a",
  "result": {
    "markdown": "---\ntitle: \"More Randomwalks with {TidyDensity}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-05\"\ncategories: [code, rtip, tidydensity, randomwalk]\n---\n\n\n# Introduction\n\nRandom walks are a mathematical concept that have found various applications in fields such as economics, biology, and computer science. At a high level, a random walk refers to a process in which a set of objects move in a random direction at each time step. The path that the objects take over time forms a random walk.\n\nOne of the main uses of random walks is in modeling the behavior of stock prices. In the stock market, prices can be thought of as performing a random walk because they are influenced by a variety of unpredictable factors such as market trends, news events, and investor sentiment. By modeling stock prices as a random walk, it is possible to make predictions about future price movements and to understand the underlying factors that drive these movements.\n\nAnother application of random walks is in studying the movement patterns of animals. For example, biologists have used random walk models to understand the foraging behavior of ants and the migration patterns of animals such as birds and whales.\n\nOne interesting aspect of random walks is that they can be generated with different statistical distributions. For example, a random walk could be generated with a standard normal distribution (mean = 0, standard deviation = 1) or with a distribution that has a different mean and standard deviation. By looking at random walks with different distributional parameters, it is possible to understand how the underlying distribution affects the overall shape and pattern of the random walk.\n\nTo generate random walks with different distributional parameters, you can use the R package [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/). This package provides functions for generating random walks and visualizing them using density plots. With `{TidyDensity}`, you can easily compare random walks with different mean and standard deviation values to see how these parameters affect the shape of the random walk.\n\nIn summary, random walks are a useful tool for modeling the behavior of various systems over time. They are particularly useful for understanding the movement patterns of stock prices and animals, and can be generated with different statistical distributions using the R package `{TidyDensity}`.\n\n# Functions\n\nThere are a couple of functions that we are going to use, below you will find them with their full function call and parameter arguments.\n\n[`tidy_multi_single_dist()`](https://www.spsanderson.com/TidyDensity/reference/tidy_multi_single_dist.html)\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_multi_single_dist(.tidy_dist = NULL, .param_list = list())\n```\n:::\n\n\n*  `.tidy_dist` - The type of tidy_ distribution that you want to run. You can only choose one.\n*  `.param_list` - This must be a list() object of the parameters that you want to pass through to the TidyDensity tidy_ distribution function.\n\n[`tidy_random_walk()`](https://www.spsanderson.com/TidyDensity/reference/tidy_random_walk.html)\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_random_walk(\n  .data,\n  .initial_value = 0,\n  .sample = FALSE,\n  .replace = FALSE,\n  .value_type = \"cum_prod\"\n)\n```\n:::\n\n\n*  `.data` - The data that is being passed from a tidy_ distribution function.\n*  `.initial_value` - The default is 0, this can be set to whatever you want.\n*  `.sample` - This is a boolean value TRUE/FALSE. The default is FALSE. If set to TRUE then the y value from the tidy_ distribution function is sampled.\n*  `.replace` - This is a boolean value TRUE/FALSE. The default is FALSE. If set to TRUE AND .sample is set to TRUE then the replace parameter of the sample function will be set to TRUE.\n*  `.value_type` - This can take one of three different values for now. These are the following:\n    * \"cum_prod\" - This will take the cumprod of y\n    *  \"cum_sum\" - This will take the cumsum of y\n\n[`tidy_random_walk_autoplot()`](https://www.spsanderson.com/TidyDensity/reference/tidy_random_walk_autoplot.html?q=tidy_random#null)\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_random_walk_autoplot(\n  .data,\n  .line_size = 1,\n  .geom_rug = FALSE,\n  .geom_smooth = FALSE,\n  .interactive = FALSE\n)\n```\n:::\n\n\n*  `.data` - The data passed in from a tidy_distribution function like tidy_normal()\n*  `.line_size` - The size param ggplot\n*  `.geom_rug` - A Boolean value of TRUE/FALSE, FALSE is the default. TRUE will return the use of ggplot2::geom_rug()\n*  `.geom_smooth` - A Boolean value of TRUE/FALSE, FALSE is the default. TRUE will return the use of ggplot2::geom_smooth() The aes parameter of group is set to FALSE. This ensures a single smoothing band returned with SE also set to FALSE. Color is set to 'black' and linetype is 'dashed'.\n*  `.interactive` - A Boolean value of TRUE/FALSE, FALSE is the default. TRUE will return an interactive plotly plot.\n\n# Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ntidy_multi_single_dist(\n  .tidy_dist = \"tidy_normal\",\n  .param_list = list(\n    .n = 250,\n    .mean = 0,\n    .sd = c(.025, .05, .1, .15),\n    .num_sims = 25\n  )\n) %>%\n  tidy_random_walk(.initial_value = 1000, .value_type = \"cum_prod\") %>%\n  tidy_random_walk_autoplot() +\n  facet_wrap(~ dist_name, scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}