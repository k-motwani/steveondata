{
  "hash": "25665674f752e37a11ae837efea952cb",
  "result": {
    "markdown": "---\ntitle: \"New Release of {healthyR.ts}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-09\"\ncategories: [code, rtip, healthyrts]\n---\n\n\n# Introduction\n\nHello R users!\n\nI am are excited to announce a new update to the [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) package: the [`ts_brownian_motion()`](https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html) function.\n\nThis function allows you to easily simulate brownian motion, also known as a Wiener process, using just a few parameters. You can specify the length of the simulation using the '.time' parameter, the number of simulations to run using the '.num_sims' parameter, the time step size (standard deviation) using the '.delta_time' parameter, and the initial value (which is set to 0 by default) using the '.initial_value' parameter.\n\nBut what is brownian motion, and why might you want to simulate it? Brownian motion is a random process that describes the movement of particles suspended in a fluid. It is named after the botanist Robert Brown, who observed the random movement of pollen grains suspended in water under a microscope in the 19th century.\n\nIn finance, brownian motion is often used to model the movement of stock prices over time. By simulating brownian motion, you can get a sense of how prices might fluctuate in the future, and use this information to inform your investment decisions.\n\nI hope that the `ts_brownian_motion()` function will be a useful tool for anyone interested in simulating brownian motion, whether for financial modeling or any other application. Give it a try and see what you can do with it!\n\nRight now the function is a bit slow at `.num_sims` > 500 so I am working on optimizing it. I will also later on be introducing the Geometric Brownian Motion to `{healthyR.ts}`\n\nAs always, we welcome feedback and suggestions for new features and improvements. Thank you for using the {healthyR.ts} package, and happy simulating!\n\n# Function\n\nHere is the full function call:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_brownian_motion(\n  .time = 100,\n  .num_sims = 10,\n  .delta_time = 1,\n  .initial_value = 0\n)\n```\n:::\n\n\n# Example\n\nA simple example of the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ts)\n\nts_brownian_motion()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,010 × 3\n   sim_number     t       y\n   <fct>      <dbl>   <dbl>\n 1 1              0  0     \n 2 1              1  0.0441\n 3 1              2  0.305 \n 4 1              3 -1.78  \n 5 1              4 -4.89  \n 6 1              5 -4.36  \n 7 1              6 -6.27  \n 8 1              7 -7.02  \n 9 1              8 -7.04  \n10 1              9 -8.03  \n# … with 1,000 more rows\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}