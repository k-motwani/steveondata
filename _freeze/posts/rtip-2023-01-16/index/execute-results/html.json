{
  "hash": "e2a02af7b0873e7a7c4510ccd4a49ecf",
  "result": {
    "markdown": "---\ntitle: \"Auto K-Means with {healthyR.ai}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-16\"\ncategories: [code, rtip, kmeans, healthyrai]\n---\n\n\n# Introduction\n\nToday's post is going to center around the automatic k-means functionality of [`{healthyR.ai}`](https://www.spsanderson.com/healthyR.ai). I am not going to get into what it is or how it works, but rather the function call itself and how it works and what it puts out. The function is called [`hai_kmeans_automl`](https://www.spsanderson.com/healthyR.ai/reference/hai_kmeans_automl.html). This function is a wrapper around the `h2o::h2o.kmeans()` function, but also does some processing to enhance the output at the end. Let's get to it!\n\n# Function\n\nHere is the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhai_kmeans_automl(\n  .data,\n  .split_ratio = 0.8,\n  .seed = 1234,\n  .centers = 10,\n  .standardize = TRUE,\n  .print_model_summary = TRUE,\n  .predictors,\n  .categorical_encoding = \"auto\",\n  .initialization_mode = \"Furthest\",\n  .max_iterations = 100\n)\n```\n:::\n\n\nNow let's go over the function arguments:\n\n*  `.data` - The data that is to be passed for clustering.\n*  `.split_ratio` - The ratio for training and testing splits.\n*  `.seed` - The default is 1234, but can be set to any integer.\n*  `.centers` - The default is 1. Specify the number of clusters (groups of data) in a data set.\n*  `.standardize` - The default is set to TRUE. When TRUE all numeric columns will be set to zero mean and unit variance.\n*  `.print_model_summary` - This is a boolean and controls if the model summary is printed to the console. The default is TRUE.\n*  `.predictors` -  This must be in the form of c(\"column_1\", \"column_2\", ... \"column_n\")\n*  `.categorical_encoding` - Can be one of the following:\n    *  \"auto\"\n    *  \"enum\"\n    *  \"one_hot_explicit\"\n    *  \"binary\"\n    *  \"eigen\"\n    *  \"label_encoder\"\n    *  \"sort_by_response\"\n    *  \"enum_limited\"\n*  `.initialization_mode` - This can be one of the following:\n    *  \"Random\"\n    *  \"Furthest (default)\n    *  \"PlusPlus\"\n*  `.max_iterations` - The default is 100. This specifies the number of training iterations\n\n# Examples\n\nTime for some examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ai)\nlibrary(h2o)\n\nh2o.init()\n\noutput <- hai_kmeans_automl(\n  .data = iris,\n  .predictors = c(\n    \"Sepal.Width\", \"Sepal.Length\", \"Petal.Width\", \"Petal.Length\"\n    ),\n  .standardize = TRUE,\n  .split_ratio = .8\n)\n\nh2o.shutdown(prompt = FALSE)\n```\n:::\n\n\n\n\nNow let's take a look at the output. There are going to be 4 pieces of main output. Here they are:\n\n1. `data`\n2. `auto_kmeans_obj`\n3. `model_id`\n4. `scree_plt`\n\nLet's take a look at each one. First the `data` output which itself has 6 different objects in it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$splits\n$splits$training_tbl\n# A tibble: 123 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          5.1         3.5          1.4         0.2 setosa \n 2          4.9         3            1.4         0.2 setosa \n 3          4.7         3.2          1.3         0.2 setosa \n 4          5           3.6          1.4         0.2 setosa \n 5          5.4         3.9          1.7         0.4 setosa \n 6          4.6         3.4          1.4         0.3 setosa \n 7          5           3.4          1.5         0.2 setosa \n 8          4.4         2.9          1.4         0.2 setosa \n 9          5.4         3.7          1.5         0.2 setosa \n10          4.8         3.4          1.6         0.2 setosa \n# … with 113 more rows\n\n$splits$validate_tbl\n# A tibble: 27 × 5\n   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n          <dbl>       <dbl>        <dbl>       <dbl> <fct>  \n 1          4.6         3.1          1.5         0.2 setosa \n 2          4.9         3.1          1.5         0.1 setosa \n 3          5.8         4            1.2         0.2 setosa \n 4          5.1         3.5          1.4         0.3 setosa \n 5          5.7         3.8          1.7         0.3 setosa \n 6          5.1         3.8          1.5         0.3 setosa \n 7          5.4         3.4          1.7         0.2 setosa \n 8          5.1         3.7          1.5         0.4 setosa \n 9          5           3.4          1.6         0.4 setosa \n10          4.7         3.2          1.6         0.2 setosa \n# … with 17 more rows\n\n\n$metrics\n$metrics$training_metrics\n# A tibble: 2 × 3\n  centroid  size within_cluster_sum_of_squares\n     <dbl> <dbl>                         <dbl>\n1        1    87                         145. \n2        2    36                          38.3\n\n$metrics$validation_metrics\n# A tibble: 2 × 3\n  centroid  size within_cluster_sum_of_squares\n     <dbl> <dbl>                         <dbl>\n1        1    13                          35.7\n2        2    14                          13.4\n\n$metrics$cv_metric_summary\n# A tibble: 5 × 8\n  metric_name   mean    sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid cv_5_va…¹\n  <chr>        <dbl> <dbl>      <dbl>      <dbl>      <dbl>      <dbl>     <dbl>\n1 betweenss     62.5 12.4        66.7       72.7       71.6       42.5      59.1\n2 mse          NaN    0         NaN        NaN        NaN        NaN       NaN  \n3 rmse         NaN    0         NaN        NaN        NaN        NaN       NaN  \n4 tot_withinss  33.6  7.36       45.6       29.7       34.8       26.5      31.3\n5 totss         96.1 17.1       112.       102.       106.        69.0      90.3\n# … with abbreviated variable name ¹​cv_5_valid\n\n\n$original_data\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n[150 rows x 5 columns] \n\n$scree_data_tbl\n# A tibble: 2 × 2\n  centers   wss\n    <dbl> <dbl>\n1       1  745.\n2       2  226.\n\n$scoring_history_tbl\n# A tibble: 6 × 6\n  timestamp           duration     iterations number_of_clusters numbe…¹ withi…²\n  <chr>               <chr>             <dbl>              <dbl>   <dbl>   <dbl>\n1 2023-01-16 09:41:25 \" 0.241 sec\"          0                  0     NaN    NaN \n2 2023-01-16 09:41:25 \" 0.246 sec\"          1                  1     123   1003.\n3 2023-01-16 09:41:25 \" 0.247 sec\"          2                  1       0    488 \n4 2023-01-16 09:41:25 \" 0.250 sec\"          3                  2      26    311.\n5 2023-01-16 09:41:25 \" 0.251 sec\"          4                  2       2    184.\n6 2023-01-16 09:41:25 \" 0.251 sec\"          5                  2       0    183.\n# … with abbreviated variable names ¹​number_of_reassigned_observations,\n#   ²​within_cluster_sum_of_squares\n\n$model_summary_tbl\n# A tibble: 7 × 2\n  name                           value\n  <chr>                          <dbl>\n1 number_of_rows                  123 \n2 number_of_clusters                2 \n3 number_of_categorical_columns     0 \n4 number_of_iterations              5 \n5 within_cluster_sum_of_squares   183.\n6 total_sum_of_squares            488 \n7 between_cluster_sum_of_squares  305.\n```\n:::\n:::\n\n\nNow lets take a look at the `auto_kmeans_obj`\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$auto_kmeans_obj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel Details:\n==============\n\nH2OClusteringModel: kmeans\nModel ID:  KMeans_model_R_1673880074548_1 \nModel Summary: \n  number_of_rows number_of_clusters number_of_categorical_columns\n1            123                  2                             0\n  number_of_iterations within_cluster_sum_of_squares total_sum_of_squares\n1                    5                     183.42511            488.00000\n  between_cluster_sum_of_squares\n1                      304.57489\n\n\nH2OClusteringMetrics: kmeans\n** Reported on training data. **\n\n\nTotal Within SS:  183.4251\nBetween SS:  304.5749\nTotal SS:  488 \nCentroid Statistics: \n  centroid     size within_cluster_sum_of_squares\n1        1 87.00000                     145.14706\n2        2 36.00000                      38.27805\n\nH2OClusteringMetrics: kmeans\n** Reported on validation data. **\n\n\nTotal Within SS:  49.05625\nBetween SS:  53.9303\nTotal SS:  102.9865 \nCentroid Statistics: \n  centroid     size within_cluster_sum_of_squares\n1        1 13.00000                      35.67618\n2        2 14.00000                      13.38007\n\nH2OClusteringMetrics: kmeans\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\n\nTotal Within SS:  167.8887\nBetween SS:  320.1113\nTotal SS:  488 \nCentroid statistics are not available.\nCross-Validation Metrics Summary: \n                  mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\nbetweenss    62.496490 12.417224  66.671760  72.679665  71.595474  42.470100\nmse                 NA  0.000000         NA         NA         NA         NA\nrmse                NA  0.000000         NA         NA         NA         NA\ntot_withinss 33.577747  7.357984  45.607327  29.705257  34.811970  26.512373\ntotss        96.074234 17.148642 112.279080 102.384926 106.407450  68.982475\n             cv_5_valid\nbetweenss     59.065456\nmse                  NA\nrmse                 NA\ntot_withinss  31.251806\ntotss         90.317260\n```\n:::\n:::\n\nThe model id:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$model_id\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"KMeans_model_R_1673880074548_1\"\n```\n:::\n:::\n\n\nAnd finally the `scree_plt`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$scree_plt\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}