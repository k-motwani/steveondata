{
  "hash": "d54aaa25951bc9d28b8aa0377fbf8e8b",
  "result": {
    "markdown": "---\ntitle: \"Geometric Brownian Motion with {healthyR.ts}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-18\"\ncategories: [code, rtip, timeseries, healthyrts]\n---\n\n\n# Introduction\n\nGeometric Brownian motion (GBM) is a widely used model in financial analysis for modeling the behavior of stock prices. It is a stochastic process that describes the evolution of a stock price over time, assuming that the stock price follows a random walk with a drift term and a volatility term.\n\nOne of the advantages of GBM is that it can capture the randomness and volatility of stock prices, which is a key feature of financial markets. GBM can also be used to estimate the expected return and volatility of a stock, which are important inputs for financial decision making.\n\nAnother advantage of GBM is that it can be used to generate simulations of future stock prices. These simulations can be used to estimate the probability of different outcomes, such as the probability of a stock price reaching a certain level in the future. This can be useful for risk management and for evaluating investment strategies.\n\nGBM is also very easy to implement, making it a popular choice among financial analysts and traders.\n\nThe equation for GBM is: $$\ndS(t) = μS(t)dt + σS(t)dW(t)\n$$ Where:\n\n$dS(t)$ is the change in the stock price at time $t$\n\n$S(t)$ is the stock price at time $t$\n\n$μ$ is the expected return of the stock\n\n$σ$ is the volatility of the stock\n\n$dW(t)$ is a Wiener process (a random variable that describes the rate of change of a random variable over time)\n\nIt's important to keep in mind that GBM is a model and not always a perfect fit to real-world stock prices. However, it's a widely accepted model due to its capability to captures the key characteristics of stock prices and its mathematical tractability.\n\nAttention R users! Are you looking for a reliable and accurate way to model stock prices? We have some exciting news for you! The next release of the R package [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) will include a new function, `ts_geometric_brownian_motion()`. This powerful function utilizes the geometric Brownian motion model to simulate stock prices, providing you with valuable insights and predictions for your financial analysis.\n\n# Function\n\nLet's take a look at the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_geometric_brownian_motion(\n  .num_sims = 100,\n  .time = 25,\n  .mean = 0,\n  .sigma = 0.1,\n  .initial_value = 100,\n  .delta_time = 1/365,\n  .return_tibble = TRUE\n)\n```\n:::\n\n\nNow let's go over the arguments to the parameters.\n\n*  `.num_sims` - Total number of simulations.\n*  `.time` - Total time of the simulation.\n*  `.mean` - Expected return\n*  `.sigma` - Volatility\n*  `.initial_value` - Integer representing the initial value.\n*  `.delta_time` - Time step size.\n*  `.return_tibble` The default is TRUE. If set to FALSE then an object of class matrix will be returned.\n\n\n# Example\n\nLet's go over a few examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ts)\n\nts_geometric_brownian_motion()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,600 × 3\n   sim_number        t     y\n   <fct>         <int> <dbl>\n 1 sim_number 1      1   100\n 2 sim_number 2      1   100\n 3 sim_number 3      1   100\n 4 sim_number 4      1   100\n 5 sim_number 5      1   100\n 6 sim_number 6      1   100\n 7 sim_number 7      1   100\n 8 sim_number 8      1   100\n 9 sim_number 9      1   100\n10 sim_number 10     1   100\n# … with 2,590 more rows\n```\n:::\n:::\n\n\nNow without returning a `tibble` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_geometric_brownian_motion(.num_sims = 5, .return_tibble = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      sim_number 1 sim_number 2 sim_number 3 sim_number 4 sim_number 5\n [1,]    100.00000     100.0000    100.00000    100.00000     100.0000\n [2,]    101.04170     100.6583    100.46420     99.68513     100.3776\n [3,]    101.58155     100.8959    100.03621     98.91656     101.5732\n [4,]    100.91680     100.7494     99.47735     98.57117     101.1525\n [5,]     99.96787     101.3298     98.70899     99.03101     101.1557\n [6,]     99.29069     101.4187     98.32176     98.33018     101.5584\n [7,]     99.40451     101.5124     98.26237     97.79356     101.4934\n [8,]     99.35345     101.0328     98.69587     97.46604     101.9630\n [9,]     97.94177     100.9534     98.32630     96.95231     102.1643\n[10,]     97.95812     101.3813     98.36934     96.64048     101.8546\n[11,]     98.47820     101.8262     98.21492     96.12851     102.5529\n[12,]     99.53016     102.5522     97.92270     95.97443     102.8912\n[13,]     98.82850     102.7482     96.66348     96.26008     103.1899\n[14,]     99.87335     102.9351     96.69635     96.15058     103.9259\n[15,]    101.03605     103.3796     96.60162     96.63562     103.3790\n[16,]    101.83475     103.1900     97.63875     96.00162     103.0422\n[17,]    102.10155     103.5851     97.12873     95.99579     103.0913\n[18,]    102.16085     103.2966     96.26772     95.95174     103.7034\n[19,]    102.35736     103.7429     96.37355     96.02805     102.8406\n[20,]    102.49297     104.5301     96.44318     96.28293     103.3507\n[21,]    102.36953     105.1809     96.87639     97.32625     104.0307\n[22,]    103.30672     104.7480     96.90017     97.16507     104.0751\n[23,]    103.55433     104.9848     97.40063     97.49375     102.6901\n[24,]    103.44429     104.3553     97.35982     97.39390     102.8163\n[25,]    103.23952     102.9840     97.30287     97.66737     103.2160\n[26,]    103.48365     103.6117     97.96290     97.91773     103.0579\nattr(,\".time\")\n[1] 25\nattr(,\".num_sims\")\n[1] 5\nattr(,\".mean\")\n[1] 0\nattr(,\".sigma\")\n[1] 0.1\nattr(,\".initial_value\")\n[1] 100\nattr(,\".delta_time\")\n[1] 0.002739726\nattr(,\".return_tibble\")\n[1] FALSE\n```\n:::\n:::\n\n\nLet's visualize the GBM at different levels of volatility.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\n\ngbm <- rbind(\n  ts_geometric_brownian_motion(.sigma = 0.05) %>%\n    mutate(volatility = as.factor(\"A) Sigma = 5%\")),\n  ts_geometric_brownian_motion(.sigma = 0.1) %>%\n    mutate(volatility = as.factor(\"B) Sigma = 10%\")),\n  ts_geometric_brownian_motion(.sigma = .15) %>%\n    mutate(volatility = as.factor(\"C) Sigma = 15%\")),\n  ts_geometric_brownian_motion(.sigma = .2) %>%\n    mutate(volatility = as.factor(\"D) Sigma = 20%\"))\n)\n\ngbm %>%\n  ggplot(aes(x = t, y = y, group = sim_number, color = sim_number)) + \n  facet_wrap(~ volatility, scales = \"free\") +\n  geom_line() +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}