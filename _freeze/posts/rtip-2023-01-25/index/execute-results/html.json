{
  "hash": "45015617be7c4184fa3255430cbbdaee",
  "result": {
    "markdown": "---\ntitle: \"Simplifying List Filtering in R with purrr's keep()\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-25\"\ncategories: [code, rtip, lists, purrr]\n---\n\n\n# Introduction\n\nThe [`{purrr}`](https://purrr.tidyverse.org/) package in R is a powerful tool for working with lists and other data structures. One particularly useful function in the package is [`keep()`](https://purrr.tidyverse.org/reference/keep.html), which allows you to filter a list by keeping only the elements that meet certain conditions.\n\nThe `keep()` function takes two arguments: the list to filter, and a function that returns a logical value indicating whether each element of the list should be kept. The function can be specified as an anonymous function or a named function, and it should take a single argument (the current element of the list).\n\nFor example, let's say we have a list of numbers and we want to keep only the even numbers. We could use the keep() function with an anonymous function that checks the remainder of the current element divided by 2:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\nnumbers <- c(1, 2, 3, 4, 5, 6)\neven_numbers <- keep(numbers, function(x) x %% 2 == 0)\neven_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n:::\n\nWe see that this keeps __[1] 2 4 6__.\n\nThe purrr package also provides a convenient shorthand for this operation, `.p`, which can be used inside the keep function to return the element.\n\n\n::: {.cell}\n\n```{.r .cell-code}\neven_numbers <- keep(numbers, ~ .x %% 2 == 0)\neven_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 6\n```\n:::\n:::\n\nYou can also use the `keep()` function to filter a list of other types of objects, such as strings or lists. For example, you could use it to keep only the strings that are longer than a certain length:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwords <- c(\"cat\", \"dog\", \"elephant\", \"bird\")\nlong_words <- keep(words, function(x) nchar(x) > 4)\nlong_words\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"elephant\"\n```\n:::\n:::\n\n\nWe see that this keeps \"elephant\" & \"bird\".\n\nIn summary, the `{purrr}` package's `keep()` function is a powerful tool for filtering lists in R, and the `.p` parameter can be used as a shorthand. It can be used to keep only the items in a list that meet a user-given condition, and it can be used with a variety of data types.\n\n# Function\n\nHere is the `keep()` function and it's parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep(.x, .p, ...)\n```\n:::\n\n\nHere are the arguments to the parameters.\n\n*  `.x` - A list or vector.\n*  `.p` - A predicate function (i.e. a function that returns either TRUE or FALSE) specified in one of the following ways:\n    *  A named function, e.g. is.character.\n    *  An anonymous function, e.g. `\\(x) all(x < 0)` or `function(x) all(x < 0)`.\n    *  A formula, e.g. `~ all(.x < 0)`. You must use `.x` to refer to the first argument). Only recommended if you require backward compatibility with older versions of R.\n*  `...` - Additional arguments passed on to .p.\n\n# Examples\n\nI recently came across wanting to filter a list that is given as an argument to a parameter. The function I am working for my upcoming [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) package has a function called [`create_workflow_set()`](https://www.spsanderson.com/tidyAML/reference/create_workflow_set.html) that has a parameter `.recipe_list` which is set to `list()`. The user must only place recipes in this list or else I want it to fail. So I was able to write a quick check using `keep()` like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Checks ----\n# only keep() recipes\nrec_list <- purrr::keep(rec_list, ~ inherits(.x, \"recipe\"))\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}