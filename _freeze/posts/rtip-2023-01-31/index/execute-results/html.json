{
  "hash": "e23090b595b58bc746e6433a4906b403",
  "result": {
    "markdown": "---\ntitle: \"Median: A Simple Way to Detect Excess Events Over Time with {healthyR}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-31\"\ncategories: [code, rtip, timeseries, healthyr]\n---\n\n\n# Introduction\n\nAs we collect data over time, it's important to look for patterns and trends that can help us understand what's happening. One common way to do this is to look at the median of the data. The median is the middle value of a set of numbers, and it can be a useful tool for detecting whether there is an excess of events, either positive or negative, occurring over time.\n\nBenefits of Looking at Median:\n\n1. Shows the central tendency: The median gives us a good idea of the central tendency of the data. This can help us understand what's typical and what's not.\n\n2. Resistant to outliers: Unlike the mean, the median is not affected by outliers. This means that if there are a few extreme values in the data, the median will not be skewed by them.\n\n3. Easy to understand: The median is easy to understand, even for people who are not familiar with statistics.\n\nUsing the R Library [`{healthyR}`](https://www.spsanderson.com/healthyR/) provides a convenient way to perform median analysis. The function [`ts_median_excess_plt()`](https://www.spsanderson.com/healthyR/reference/ts_median_excess_plt.html) can be used to plot the median of an event over time and detect any excess events that may be occurring. This function is designed to be user-friendly, so even if you're not an expert in statistics, you can still use it to gain valuable insights into your data.\n\nIn conclusion, looking at the median of an event over time can be a useful tool for detecting excess events, either positive or negative. The R library {healthyR} provides a convenient way to perform this analysis with the function `ts_median_excess_plt()`. Give it a try and see what insights you can uncover in your own data!\n\n# Function\n\nHere is the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_median_excess_plt(\n  .data,\n  .date_col,\n  .value_col,\n  .x_axis,\n  .ggplot_group_var,\n  .years_back\n)\n```\n:::\n\n\nHere are its arguments.\n\n*  `.data` - The data that is being analyzed, data must be a tibble/data.frame.\n*  `.date_col` - The column of the tibble that holds the date.\n*  `.value_col` - The column that holds the value of interest.\n*  `.x_axis` - What is the be the x-axis, day, week, etc.\n*  `.ggplot_group_var` - The variable to group the ggplot on.\n*  `.years_back` - How many yeas back do you want to go in order to compute the median value.\n\n# Example\n\nFirst make sure you have the package installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"healthyR\")\n```\n:::\n\n\nNow for an example. The data is required to be in a certain format, this function is dated, meaning it was one of the first ones I wrote so I will be taking time to improve it in the future. We are using data from my [`{healthyR.data]`}](https://www.spsanderson.com/healthyR.data/) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.data)\nlibrary(lubridate)\nlibrary(healthyR)\nlibrary(dplyr)\nlibrary(timetk)\nlibrary(ggplot2)\n\ndf <- healthyR_data %>%\n  filter_by_time(\n    .date_var = visit_start_date_time,\n    .start_date = \"2012\",\n    .end_date = \"2019\"\n  ) %>%\n  filter(ip_op_flag == \"I\") %>%\n  select(visit_id, visit_start_date_time) %>%\n  mutate(\n    visit_start_date_time = as.Date(visit_start_date_time, \"%Y%M%D\"),\n    record = 1\n    ) %>%\n  summarise_by_time(\n    .date_var = visit_start_date_time,\n    visits = sum(record)\n  ) %>%\n  ts_signature_tbl(\n    .date_col = visit_start_date_time\n  )\n```\n:::\n\n\nOk now that we have our data, let's take a look at it using `glimpse()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,922\nColumns: 30\n$ visit_start_date_time <date> 2012-01-01, 2012-01-02, 2012-01-03, 2012-01-04,…\n$ visits                <dbl> 34, 52, 53, 44, 46, 55, 42, 29, 50, 55, 50, 43, …\n$ index.num             <dbl> 1325376000, 1325462400, 1325548800, 1325635200, …\n$ diff                  <dbl> NA, 86400, 86400, 86400, 86400, 86400, 86400, 86…\n$ year                  <int> 2012, 2012, 2012, 2012, 2012, 2012, 2012, 2012, …\n$ year.iso              <int> 2011, 2012, 2012, 2012, 2012, 2012, 2012, 2012, …\n$ half                  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ quarter               <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ month                 <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ month.xts             <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ month.lbl             <ord> January, January, January, January, January, Jan…\n$ day                   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ hour                  <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ minute                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ second                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ hour12                <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ am.pm                 <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ wday                  <int> 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, …\n$ wday.xts              <int> 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, …\n$ wday.lbl              <ord> Sunday, Monday, Tuesday, Wednesday, Thursday, Fr…\n$ mday                  <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ qday                  <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ yday                  <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1…\n$ mweek                 <int> 5, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, …\n$ week                  <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, …\n$ week.iso              <int> 52, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3,…\n$ week2                 <int> 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, …\n$ week3                 <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, …\n$ week4                 <int> 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, …\n$ mday7                 <int> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, …\n```\n:::\n:::\n\n\nNow to visualize it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  ts_median_excess_plt(\n    .date_col = visit_start_date_time,\n    .value_col = visits,\n    .x_axis = month.lbl,\n    .ggplot_group_var = year,\n    .years_back = 3\n  ) +\n  labs(\n    y = \"Excess Visits\",\n    title = \"Excess Visits by Month YoY\"\n  ) + \n  theme(axis.text.x=element_text(angle = -90, hjust = 0))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nSo from here what we can see is that looking back in time over the visits data that the current year (the max year in the data) shows that it is significantly under previous years median values by month.\n\nVoila!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}