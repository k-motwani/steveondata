{
  "hash": "c8519de150cf53e84813e1098f2d99eb",
  "result": {
    "markdown": "---\ntitle: \"Attributes in R Functions: An Overview\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-01\"\ncategories: [code, rtip, metadata, attributes]\n---\n\n\n# Introduction\n\nR is a powerful programming language that is widely used for data analysis, visualization, and machine learning. One of the features of R that makes it versatile and flexible is the ability to assign attributes to functions. Attributes are metadata associated with an object in R, and they can be used to store additional information about the function or to modify the behavior of the function.\n\nIn this blog post, we will discuss what attributes are, how they can be useful, and how they can be used inside R functions.\n\n## What are Attributes in R Functions?\n\nAttributes are pieces of information that are stored alongside an object in R. Functions are objects in R, and they can have attributes associated with them. Some of the common attributes associated with functions in R include:\n\n1. `formals`: This attribute stores the arguments of the function and their default values.\n2. `srcref`: This attribute stores the source code of the function, including the line numbers of the code.\n3. `environment`: This attribute stores the environment in which the function was defined.\n\n## How Attributes can be Useful in R Functions\n\nAttributes can be useful in R functions in several ways, including:\n\n1. Debugging: Attributes can be used to store information that can be used to debug functions. For example, the srcref attribute can be used to retrieve the source code of the function and the line numbers of the code, which can be useful when trying to identify the source of an error.\n2. Metadata: Attributes can be used to store metadata about the function, such as the author, version, and date of creation. This information can be used to keep track of the function and to provide information about its purpose and usage.\n3. Modifying Function Behavior: Attributes can be used to modify the behavior of the function. For example, the environment attribute can be used to set the environment in which the function is executed. This can be useful when creating closures or when using functions in a specific context.\n\n## How to Use Attributes in R Functions\n\nTo access or modify the attributes of a function in R, you can use the attributes() function. For example, to retrieve the formals attribute of a function, you can use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x, y) { x + y }\nattributes(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$srcref\nfunction(x, y) { x + y }\n```\n:::\n\n```{.r .cell-code}\nformals(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\n\n\n$y\n```\n:::\n:::\n\nTo add an attribute to a function, you can use the attr() function. For example, to add a version attribute to a function, you can use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x, y) { x + y }\nattr(f, \"version\") <- \"1.0\"\nattributes(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$srcref\nfunction(x, y) { x + y }\n\n$version\n[1] \"1.0\"\n```\n:::\n:::\n\nTo remove an attribute from a function, you can use the attributes() function with the NULL value. For example, to remove the version attribute from a function, you can use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x, y) { x + y }\nattr(f, \"version\") <- \"1.0\"\nattributes(f)$version <- NULL\nattributes(f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$srcref\nfunction(x, y) { x + y }\n```\n:::\n:::\n\n\nConclusion\n\nAttributes are a useful feature in R functions that can be used to store additional information about the function, to debug the function, and to modify its behavior. By using attributes, you can make your functions more versatile, flexible, and easier to work with.\n\n\n# Function\n\nHere is a function from my [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) package that makes use of attributes that come in from the output of another function. The function is [`ts_brownian_motion_plot()`](https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html). Let's go ahead and take a look at how the function works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ...\n\n # Attributes\n    atb <- attributes(.data)\n    \n# ...\n\nggplot2::labs(\n  title = atb$.motion_type,\n  subtitle = paste0(\"Simulations: \", atb$.num_sims,\n                    \" - Initial Value: \", round(atb$.initial_value, 2),\n                    \" - Delta Time: \", round(atb$.delta_time, 2))\n  ) +\nggplot2::theme(legend.position = if(atb$.num_sims > 9) {\"none\"})\n```\n:::\n\n\nSo what's happening here is that I am taking the attributes from the incoming data which is the result of a `{healthyR.ts}` brownian motion function and setting them equal to a variable `atb`, later in the function I take that `atb` variable and pluck out certain items I want from it.\n\n# Example\n\nLet's see an example in action.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"healthyR.ts\")\nlibrary(healthyR.ts)\n\ndf <- ts_brownian_motion()\n\natb <- attributes(df)\n\natb[!names(atb) %in% \"row.names\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$names\n[1] \"sim_number\" \"t\"          \"y\"         \n\n$class\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n$.time\n[1] 100\n\n$.num_sims\n[1] 10\n\n$.delta_time\n[1] 1\n\n$.initial_value\n[1] 0\n\n$.return_tibble\n[1] TRUE\n\n$.motion_type\n[1] \"Brownian Motion\"\n```\n:::\n:::\n\n\nNow to see the plat in action.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_brownian_motion_plot(df, t, y)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}