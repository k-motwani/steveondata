{
  "hash": "9100acdd4f1815d976bde7c4f2f6d64f",
  "result": {
    "markdown": "---\ntitle: \"Creating an R Project Directory\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-08\"\ncategories: [code, rtip]\n---\n\n\n# Introduction\n\nWhen working in R I find it best to create a new project when working on something. This keeps all of the data and scripts in one location. This also means that if you are not careful the directory you have your project in can become quite messy. This used to happen to me with regularity, then I got smart and wrote a script that would standardize how projects are built for me.\n\nI find it important to have different fodlers for different parts of a project. This does not mean I will use them all for every project but that is fine, you can either comment that portion out or just delete the files that are created.\n\n# Function\n\nHere is what I do broken down into different steps. First, I see if the package `{fs}` is installed, and if not, then install it, and finally load it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(fs)) {\n  install.packages(\"fs\")\n}\nsuppressPackageStartupMessages(library(fs))\n```\n:::\n\n\nNext we create a character vector of folder paths that will exist inside of the main project folder itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolders <- c(\n  \"00_Scripts\"\n  , \"00_Data\"\n  , \"01_Queries\"\n  , \"02_Data_Manipulation\"\n  , \"03_Viz\"\n  , \"04_TS_Modeling\"\n  , \"99_Automations\"\n)\n```\n:::\n\n\nNow that the folders we want are spelt out, we can create them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfs::dir_create(\n  path = folders\n)\n```\n:::\n\n\nNow that is done, it's off to creating a few files that I personally almost always use. I do a lot of work out of a data warehouse so a connection file is needed. We also need a disconnection function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# DSS Connection \ndb_connect <- function() {\n  db_con <- LICHospitalR::db_connect()\n  \n  return(db_con)\n  \n}\n\n# Disconnect from Database\ndb_disconnect <- function(.connection) {\n  \n  DBI::dbDisconnect(\n    conn = db_connect()\n  )\n  \n}\n```\n:::\n\n\nNow, let's load in the typical libraries. You can modify this to suit your own needs. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Library Load\n\nlibrary_load <- function(){\n  \n  if(!require(pacman)){install.packages(\"pacman\")}\n  pacman::p_load(\n    \"DBI\"\n    , \"odbc\"\n    , \"janitor\"\n    , \"dplyr\"\n    , \"tibble\"\n    , \"tidyr\"\n    , \"LICHospitalR\"\n    , \"modeltime\"\n  )\n  \n}\n```\n:::\n\n\nOk so now the functions have been created, let's dump them!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndb_funs <- c(\"db_connect\",\"db_disconnect\")\ndump(\n  list = db_funs,\n  file = \"00_Scripts/db_con_obj.R\"\n)\n\nlib_funs <- \"library_load\"\ndump(\n  list = lib_funs,\n  file = \"00_Scripts/library_load.R\"\n)\n```\n:::\n\n\n# Example\n\nHere is the full script!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(fs)) {\n  install.packages(\"fs\")\n}\nsuppressPackageStartupMessages(library(fs))\n\nfolders <- c(\n  \"00_Scripts\"\n  , \"00_Data\"\n  , \"01_Queries\"\n  , \"02_Data_Manipulation\"\n  , \"03_Viz\"\n  , \"04_TS_Modeling\"\n  , \"99_Automations\"\n)\n\nfs::dir_create(\n  path = folders\n)\n\n\nfile_create(\"01_Queries/query_functions.R\")\nfile_create(\"02_Data_Manipulation/data_functions.R\")\nfile_create(\"03_Viz/viz_functions.R\")\nfile_create(\"04_TS_Modeling/ts_functions.R\")\n\n# DSS Connection \ndb_connect <- function() {\n  db_con <- LICHospitalR::db_connect()\n  \n  return(db_con)\n  \n}\n\n# Disconnect from Database\ndb_disconnect <- function(.connection) {\n  \n  DBI::dbDisconnect(\n    conn = db_connect()\n  )\n  \n}\n\n# Library Load\n\nlibrary_load <- function(){\n  \n  if(!require(pacman)){install.packages(\"pacman\")}\n  pacman::p_load(\n    \"DBI\"\n    , \"odbc\"\n    , \"janitor\"\n    , \"dplyr\"\n    , \"tibble\"\n    , \"tidyr\"\n    , \"LICHospitalR\"\n    , \"modeltime\"\n  )\n  \n}\n\ndb_funs <- c(\"db_connect\",\"db_disconnect\")\ndump(\n  list = db_funs,\n  file = \"00_Scripts/db_con_obj.R\"\n)\n\nlib_funs <- \"library_load\"\ndump(\n  list = lib_funs,\n  file = \"00_Scripts/library_load.R\"\n)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}