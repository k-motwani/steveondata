{
  "hash": "214bad079cd52005c62d0ca2e591d1c5",
  "result": {
    "markdown": "---\ntitle: \"Creating and Predicting Fast Regression Parsnip Models with {tidyAML}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-09\"\ncategories: [code, rtip, tidyaml]\n---\n\n\n# Introduction\n\nI am almost ready for a first release of my R package [`{tidyAML}`](https://www.spsanderson.com/tidyAML/). The purpose of this is to act as a way of quickly generating models using the __parsnip__ package and keeping things inside of the __tidymodels__ framework allowing users to seamlessly create models in __tidyAML__ but pluck and move them over to __tidymodels__ should they prefer. This is because I believe that software should be interchangeable and work well with other libraries. Today I am going to showcase how the function [`fast_regression()`](https://www.spsanderson.com/tidyAML/reference/fast_regression.html)\n\n# Function\n\nLet's take a look at the function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_regression(\n  .data,\n  .rec_obj,\n  .parsnip_fns = \"all\",\n  .parsnip_eng = \"all\",\n  .split_type = \"initial_split\",\n  .split_args = NULL\n)\n```\n:::\n\n\nHere are the arguments to the function:\n\n*  `.data` - The data being passed to the function for the regression problem\n*  `.rec_obj` - The recipe object being passed.\n*  `.parsnip_fns` - The default is 'all' which will create all possible regression model specifications supported.\n*  `.parsnip_eng` - The default is 'all' which will create all possible regression model specifications supported.\n*  `.split_type` - The default is 'initial_split', you can pass any type of split supported by __rsample__\n*  `.split_args` - The default is NULL, when NULL then the default parameters of the split type will be executed for the rsample split type.\n\n# Example\n\nLet's take a look at an example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML)\nlibrary(dplyr)\nlibrary(recipes)\nlibrary(purrr)\n\nrec_obj <- recipe(mpg ~ ., data = mtcars)\nfast_reg_tbl <- fast_regression(\n  .data = mtcars,\n  .rec_obj = rec_obj,\n  .parsnip_eng = c(\"lm\",\"glm\"),\n  .parsnip_fns = \"linear_reg\"\n)\n\nglimpse(fast_reg_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2\nColumns: 8\n$ .model_id       <int> 1, 2\n$ .parsnip_engine <chr> \"lm\", \"glm\"\n$ .parsnip_mode   <chr> \"regression\", \"regression\"\n$ .parsnip_fns    <chr> \"linear_reg\", \"linear_reg\"\n$ model_spec      <list> [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…\n$ wflw            <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ fitted_wflw     <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ pred_wflw       <list> [<tbl_df[24 x 1]>], [<tbl_df[24 x 1]>]\n```\n:::\n:::\n\n\nLet's take a look at the model spec.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_reg_tbl %>% slice(1) %>% pull(model_spec) %>% pluck(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nNow the `wflw` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_reg_tbl %>% slice(1) %>% pull(wflw) %>% pluck(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nThe Fitted workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_reg_tbl %>% slice(1) %>% pull(fitted_wflw) %>% pluck(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nstats::lm(formula = ..y ~ ., data = data)\n\nCoefficients:\n(Intercept)          cyl         disp           hp         drat           wt  \n -15.077267     1.107474     0.001161    -0.001014     4.010199    -1.280324  \n       qsec           vs           am         gear         carb  \n   0.512318    -0.488014     2.430052     4.353568    -2.546043  \n```\n:::\n:::\n\n\nAnd lastly tne predicted workflow column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_reg_tbl %>% slice(1) %>% pull(pred_wflw) %>% pluck(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 24 × 1\n   .pred\n   <dbl>\n 1  24.7\n 2  28.2\n 3  18.9\n 4  12.0\n 5  14.8\n 6  15.4\n 7  14.7\n 8  20.0\n 9  11.2\n10  19.1\n# … with 14 more rows\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}