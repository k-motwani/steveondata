{
  "hash": "0c08761593c0b1559f1ee9fe963f7ae3",
  "result": {
    "markdown": "---\ntitle: \"Off to CRAN! {tidyAML}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-13\"\ncategories: [code, rtip, tidyaml, tidymodels]\n---\n\n\n# Introduction\n\nAre you tired of spending hours tuning and testing different machine learning models for your regression or classification problems? The new R package [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) is here to simplify the process for you! tidyAML is a simple interface for automatic machine learning that fits the tidymodels framework, making it easier for you to solve regression and classification problems.\n\nThe tidyAML package has been designed with the goal of providing a simple API that automates the entire machine learning pipeline, from data preparation to model selection, training, and prediction. This means that you no longer have to spend hours tuning and testing different models; tidyAML will do it all for you, saving you time and effort.\n\nIn this initial release (version 0.0.1), tidyAML introduces a number of new features and minor fixes to improve the overall user experience. Here are some of the updates in this release:\n\nNew Features:\n\n*  `make_regression_base_tbl()` and `make_classification_base_tbl()` functions for creating base tables for regression and classification problems, respectively.\n*  `internal_make_spec_tbl()` function for making the specification table for the machine learning pipeline.\n*  `internal_set_args_to_tune()` function for setting arguments to tune the models. This has not yet been implemented in a true working fashion but might be useful for feedback in this initial release.\n*  `create_workflow_set()` function for creating a set of workflows to test different models.\n*  `get_model()`, `extract_model_spec()`, `extract_wflw()`, `extract_wflw_fit()`, and `extract_wflw_pred()` functions for extracting different parts of the machine learning pipeline.\n*  `match_args()` function for matching arguments between the base and specification tables.\n\nMinor Fixes and Improvements:\n\n*  Updates to `fast_classification_parsnip_spec_tbl()` and `fast_regression_parsnip_spec_tbl()` to use the `make_regression` and `make_classification` functions and the `internal_make_spec_tbl()` function.\n*  Addition of a class for the base table functions and using that class in `internal_make_spec_tbl()`.\n*  Update to the DESCRIPTION for R >= 3.4.0.\n\nIn conclusion, tidyAML is a game-changer for those looking to automate the machine learning pipeline. It provides a simple API that eliminates the need for manual tuning and testing of different models. With the updates in this initial release, the tidyAML package is sure to make your machine learning journey easier and more efficient.\n\n# Function\n\nThere are too many functions to go over in this post so [you can find them all here](https://www.spsanderson.com/tidyAML/reference/index.html)\n\n# Examples\n\nEven though there are many functions to go over, we can showcase some with a small useful example. So let's get at it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML)\nlibrary(recipes)\nlibrary(dplyr)\n\nrec_obj <- recipe(mpg ~ ., data = mtcars)\n\nfrt_tbl <- fast_regression(\n  .data = mtcars, \n  .rec_obj = rec_obj, \n  .parsnip_eng = c(\"lm\",\"glm\"),\n  .parsnip_fns = \"linear_reg\"\n  )\n\nglimpse(frt_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2\nColumns: 8\n$ .model_id       <int> 1, 2\n$ .parsnip_engine <chr> \"lm\", \"glm\"\n$ .parsnip_mode   <chr> \"regression\", \"regression\"\n$ .parsnip_fns    <chr> \"linear_reg\", \"linear_reg\"\n$ model_spec      <list> [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…\n$ wflw            <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ fitted_wflw     <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ pred_wflw       <list> [<tbl_df[24 x 1]>], [<tbl_df[24 x 1]>]\n```\n:::\n:::\n\n\nNow let's go through the extractors.\n\nThe `get_model()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_model(frt_tbl, 2) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1\nColumns: 8\n$ .model_id       <int> 2\n$ .parsnip_engine <chr> \"glm\"\n$ .parsnip_mode   <chr> \"regression\"\n$ .parsnip_fns    <chr> \"linear_reg\"\n$ model_spec      <list> [~NULL, ~NULL, NULL, regression, TRUE, NULL, glm, TRUE…\n$ wflw            <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ fitted_wflw     <list> [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…\n$ pred_wflw       <list> [<tbl_df[24 x 1]>]\n```\n:::\n:::\n\n\nThe `extract_model_spec()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_model_spec(frt_tbl, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nOr do multiples:\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_model_spec(frt_tbl, 1:2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n\n[[2]]\nLinear Regression Model Specification (regression)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nThe `extract_wflw()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw(frt_tbl, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nOr do multiples:\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw(frt_tbl, c(1, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n\n\n[[2]]\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nThe `extract_wflw_fit()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw_fit(frt_tbl, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nstats::lm(formula = ..y ~ ., data = data)\n\nCoefficients:\n(Intercept)          cyl         disp           hp         drat           wt  \n   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  \n       qsec           vs           am         gear         carb  \n    0.69956      0.39398      1.50212     -0.35338      0.48289  \n```\n:::\n:::\n\n\nOr do multiples:\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw_fit(frt_tbl, 1:2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nstats::lm(formula = ..y ~ ., data = data)\n\nCoefficients:\n(Intercept)          cyl         disp           hp         drat           wt  \n   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  \n       qsec           vs           am         gear         carb  \n    0.69956      0.39398      1.50212     -0.35338      0.48289  \n\n\n[[2]]\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:  stats::glm(formula = ..y ~ ., family = stats::gaussian, data = data)\n\nCoefficients:\n(Intercept)          cyl         disp           hp         drat           wt  \n   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  \n       qsec           vs           am         gear         carb  \n    0.69956      0.39398      1.50212     -0.35338      0.48289  \n\nDegrees of Freedom: 23 Total (i.e. Null);  13 Residual\nNull Deviance:\t    935.1 \nResidual Deviance: 121.5 \tAIC: 131\n```\n:::\n:::\n\n\nFinally the `extract_wflw_pred()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw_pred(frt_tbl, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 24 × 1\n   .pred\n   <dbl>\n 1  24.8\n 2  26.5\n 3  18.5\n 4  13.9\n 5  24.6\n 6  29.1\n 7  14.0\n 8  17.9\n 9  10.0\n10  23.4\n# … with 14 more rows\n```\n:::\n:::\n\n\nOr do multiples:\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_wflw_pred(frt_tbl, 1:2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 24 × 1\n   .pred\n   <dbl>\n 1  24.8\n 2  26.5\n 3  18.5\n 4  13.9\n 5  24.6\n 6  29.1\n 7  14.0\n 8  17.9\n 9  10.0\n10  23.4\n# … with 14 more rows\n\n[[2]]\n# A tibble: 24 × 1\n   .pred\n   <dbl>\n 1  24.8\n 2  26.5\n 3  18.5\n 4  13.9\n 5  24.6\n 6  29.1\n 7  14.0\n 8  17.9\n 9  10.0\n10  23.4\n# … with 14 more rows\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}