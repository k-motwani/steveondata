{
  "hash": "ca0160a313babf1e809e20fce37c0926",
  "result": {
    "markdown": "---\ntitle: \"An example of using {box}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-14\"\ncategories: [code, rtip, box]\n---\n\n\n# Introduction\n\nToday I am going to make a short post on the R package [`{box}`](https://klmr.me/box/) which was showcased to me quite nicely by [**Michael Miles**](https://www.linkedin.com/in/milesmichaeld/). It was informative and I was able to immediately see the usefulness of the `{box}` library.\n\nSo what is 'box'? Well here is the description straight from their site:\n\n> 'box' allows organising R code in a more modular way, via two mechanisms:\n>\n> -   It enables writing modular code by treating files and folders of R code as independent (potentially nested) modules, without requiring the user to wrap reusable code into packages.\n> -   It provides a new syntax to import reusable code (both from packages and from modules) which is more powerful and less error-prone than library or require, by limiting the number of names that are made available.\n\nSo let's see how it all works.\n\n# Function\n\nThe main portion of the script looks like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Main script\n\n# Script setup --------------------------------------\n\n# Load box modules\nbox::use(. / box / global_options / global_options)\nbox::use(. / box / io / imports)\nbox::use(. / box / io / exports)\nbox::use(. / box / mod / mod)\n\n# Load global options\nglobal_options$set_global_options() \n\n\n# Main script ---------------------------------------\n\n# Load data, process it, and export results\nall_data <- getOption('data_dir') |> \n  \n  # Load all data\n  imports$load_all() |> \n  \n  # Modify dataset\n  mod$modify_data() |> \n  \n  # Export data\n  exports$export_data()\n```\n:::\n\n\nSo what does this do? Well it is grabbing data from a predefined location, modifying it and then re-exporting it. Now let's look at all the code that is behind it, which allows us to do these things and then you will see the power of using __box__\n\n# Example\n\nLet's take a look at the global options settings.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set global options\n#' @export\nset_global_options <- function() {\n  options(\n    look_ups = 'look-ups/',\n    data_dir = 'data/input/'\n  )\n}\n```\n:::\n\n\nOk 6 lines, boxed down to one.\n\nNow the import function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function for importing data\n\n#' @export\nload_all <- function(file_path) {\n  \n  box::use(purrr)\n  box::use(vroom)\n  \n  file_path |> \n    \n    # Get all csv files from folder\n    list.files(full.names = TRUE) |> \n    \n    # Set list names\n    purrr$set_names(\\(file) basename(file)) |> \n    \n    # Load all csvs into list\n    purrr$map(\\(file) vroom$vroom(file))\n\n}\n```\n:::\n\n\nNow the `modify_data` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function for modifying data\n\n#' @export\nmodify_data <- function(df_list) {\n  \n  box::use(dplyr)\n  box::use(purrr)\n  \n  map_fun <- function(df) {\n    \n    df |> \n      dplyr$select(name:mass) |> \n      dplyr$mutate(lol = height * mass) |> \n      dplyr$filter(lol > 1500)\n  }\n  \n  # Apply mapping function to list\n  purrr$map(df_list, map_fun)\n  \n}\n```\n:::\n\n\nOk again, a big savings here, instead of the above we simply call `mod$modify_data()` which makes things clearner and also modular in that we can go to a very specific spot in our proejct to fix an error or add/subtract functionality.\n\nLastly the export.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function for exporting data\n\n#' @export\nexport_data <- function(df_list) {\n  \n  box::use(vroom)\n  box::use(purrr)\n  \n  # Export data\n  purrr$map2(.x = df_list,\n             .y = names(df_list),\n             ~vroom$vroom_write(x = .x,\n                               file = paste0('data/output/', \n                                             .y),\n                               delim = ','))\n  \n}\n```\n:::\n\n\nVoila! I think to even a fresh user, the power of boxing your functions is fairly apparent and to the advanced user, eyes are most likely glowing!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}