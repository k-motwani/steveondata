{
  "hash": "bd23cf520872c684f9e485479c858585",
  "result": {
    "markdown": "---\ntitle: \"Moving Average Plots with {healthyR.ts}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-15\"\ncategories: [code, rtip, timeseries, healthyrts]\n---\n\n\n# Introduction\n\nAre you interested in visualizing time series data in a clear and concise way? The R package [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) provides a variety of tools for time series analysis and visualization, including the __ts_ma_plot()__ function.\n\nThe [`ts_ma_plot()`](https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html) function is designed to help you quickly and easily create moving average plots for time series data. This function takes several arguments, including the data you want to visualize, the date column from your data, the value column from your data, and the frequency of the aggregation.\n\nOne of the great features of ts_ma_plot() is that it can handle both weekly and monthly data frequencies, making it a flexible tool for analyzing a variety of time series data. If you pass in a frequency other than \"weekly\" or \"monthly\", the function will default to weekly, so it's important to ensure that your data is aggregated at the appropriate frequency.\n\nWith ts_ma_plot(), you can create a variety of plots to help you better understand your time series data. The function allows you to add up to three different titles to your plot, helping you to organize and communicate your findings effectively. The main_title argument sets the title for the main plot, while the secondary_title and tertiary_title arguments set the titles for the second and third plots, respectively.\n\nIf you're interested in using ts_ma_plot() for your own time series data, you'll first need to preprocess your data so that it's in the appropriate format for this function. Once you've done that, though, ts_ma_plot() can help you to quickly identify trends and patterns in your data that might not be immediately apparent from a raw data set.\n\nIn summary, ts_ma_plot() is a powerful and flexible tool for visualizing time series data. Whether you're working with weekly or monthly data, this function can help you to quickly and easily create moving average plots that can help you to better understand your data. If you're interested in time series analysis, be sure to check out {healthyR.ts} and give ts_ma_plot() a try!\n\n# Function\n\nHere is the full function call.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_ma_plot(\n  .data,\n  .date_col,\n  .value_col,\n  .ts_frequency = \"monthly\",\n  .main_title = NULL,\n  .secondary_title = NULL,\n  .tertiary_title = NULL\n)\n```\n:::\n\n\nNow for the arguments to the parameters.\n\n*  `.data`: the data you want to visualize, which should be pre-processed and the aggregation should match the .frequency argument.\n*  `.date_col`: the data column from the .data argument that contains the dates for your time series.\n*  `.value_col`: the data column from the .data argument that contains the values for your time series.\n*  `.ts_frequency`: the frequency of the aggregation, which should be quoted\nas \"weekly\" or \"monthly\". If not specified, the function defaults to weekly.\n*  `.main_title`: the title of the main plot.\n*  `.secondary_title`: the title of the second plot.\n*  `.tertiary_title`: the title of the third plot.\n\n# Example\n\nNow for an example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(healthyR.ts)\nlibrary(dplyr)\n\ndata_tbl <- ts_to_tbl(AirPassengers) |>\n  select(-index)\n\noutput <- ts_ma_plot(\n  .data = data_tbl,\n  .date_col = date_col,\n  .value_col = value\n)\n```\n:::\n\n\nLet's take a look at each piece of the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$data_trans_xts |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           value ma12\n1949-01-01   112   NA\n1949-02-01   118   NA\n1949-03-01   132   NA\n1949-04-01   129   NA\n1949-05-01   121   NA\n1949-06-01   135   NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$data_diff_xts_a |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              diff_a\n1949-01-01        NA\n1949-02-01  5.357143\n1949-03-01 11.864407\n1949-04-01 -2.272727\n1949-05-01 -6.201550\n1949-06-01 11.570248\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$data_diff_xts_b |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           diff_b\n1949-01-01     NA\n1949-02-01     NA\n1949-03-01     NA\n1949-04-01     NA\n1949-05-01     NA\n1949-06-01     NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$data_summary_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 5\n   date_col   value  ma12 diff_a diff_b\n   <date>     <dbl> <dbl>  <dbl>  <dbl>\n 1 1949-01-01   112    NA   0         0\n 2 1949-02-01   118    NA   5.36      0\n 3 1949-03-01   132    NA  11.9       0\n 4 1949-04-01   129    NA  -2.27      0\n 5 1949-05-01   121    NA  -6.20      0\n 6 1949-06-01   135    NA  11.6       0\n 7 1949-07-01   148    NA   9.63      0\n 8 1949-08-01   148    NA   0         0\n 9 1949-09-01   136    NA  -8.11      0\n10 1949-10-01   119    NA -12.5       0\n# … with 134 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$pgrid\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$xts_plt\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}