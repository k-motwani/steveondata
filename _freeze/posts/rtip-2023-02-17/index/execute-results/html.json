{
  "hash": "e61a7f60acf2b9ebe1337fe98c3148ff",
  "result": {
    "markdown": "---\ntitle: \"Converting a {tidyAML} tibble to a {workflowsets}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-02-17\"\ncategories: [code, rtip, tidyaml, workflowsets, tidymodels]\n---\n\n\n# Introduction\n\nThe [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) package is an R package that provides a set of tools for building regression/classification models on the fly with minimal input required. In this post we will discuss the [`create_workflow_set()`](https://www.spsanderson.com/tidyAML/reference/create_workflow_set.html) function.\n\nThe `create_workflow_set` function is a function in the `tidyAML` package that is used to create a `workflowset` object from the `workflowsets` package. A workflow is a sequence of tasks that can be executed in a specific order, and is often used in data analysis and machine learning to automate data processing and model fitting. The `create_workflow_set` function takes as input a YAML specification of a set of workflows, and returns a list of workflow objects that can be executed using the `tidymodels` package and its associated packages.\n\nThe `create_workflow_set` function is particularly useful when working with the `tidymodels` package and the `parsnip` framework. The `tidymodels` package is a collection of packages for modeling and machine learning in R that provides a consistent interface for building, tuning, and evaluating machine learning models. The parsnip package is part of the `tidymodels` ecosystem and provides a way to specify a wide range of models in a consistent manner. \n\n## Using the create_workflow_set function with tidymodels and parsnip\n\nTo use the `create_workflow_set` function with `tidymodels` and` parsnip`, you will need to provide a recipe or recipes as a list to the __.recipe_list__ parameter and a model_spec tibble that you would get from something like `fast_regression_parsnip_spec_tbl()`, other classes will be supported in the future.\n\nThe reason this was done was because I did not want to force users to remain inside of `tidyAML` perhaps and most likely there are other packages out there that are more suited to an end users specific problem at hand.\n\n# Function\n\nLet's take a look at the function and it's arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_workflow_set(\n  .model_tbl = NULL, \n  .recipe_list = list(), \n  .cross = TRUE\n)\n```\n:::\n\n\n*  `.model_tbl` - The model table that is generated from a function like `fast_regression_parsnip_spec_tbl()`. The model spec column will be grabbed automatically as the class of the object must be `tidyaml_base_tbl`\n*  `.recipe_list` - Provide a list of recipes here that will get added to the workflow set object.\n*  `.cross` - The default is TRUE, can be set to FALSE. This is passed to the cross parameter as an argument to the workflow_set() function.\n\n\n# Example\n\nHere is a simple example. Remember you really only want to use this if you have a model_spec tibble not a tibble with workflows that have already been fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML)\nlibrary(recipes)\n\nrec_obj <- recipe(mpg ~ ., data = mtcars)\nspec_tbl <- fast_regression_parsnip_spec_tbl(\n  .parsnip_fns = \"linear_reg\",\n  .parsnip_eng = c(\"lm\",\"glm\")\n)\n\nwfs_tbl <- create_workflow_set(\n  spec_tbl,\n  list(rec_obj)\n)\n```\n:::\n\n\nNow let's inspect.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nwfs_tbl |>\n  slice(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A workflow set/tibble: 1 × 4\n  wflow_id            info             option    result    \n  <chr>               <list>           <list>    <list>    \n1 recipe_linear_reg_1 <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n:::\n\n```{.r .cell-code}\nclass(wfs_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"workflow_set\" \"tbl_df\"       \"tbl\"          \"data.frame\"  \n```\n:::\n\n```{.r .cell-code}\nwfs_tbl$info\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 1 × 4\n  workflow   preproc model      comment\n  <list>     <chr>   <chr>      <chr>  \n1 <workflow> recipe  linear_reg \"\"     \n\n[[2]]\n# A tibble: 1 × 4\n  workflow   preproc model      comment\n  <list>     <chr>   <chr>      <chr>  \n1 <workflow> recipe  linear_reg \"\"     \n```\n:::\n\n```{.r .cell-code}\nwfs_tbl$info[[1]]$workflow[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}