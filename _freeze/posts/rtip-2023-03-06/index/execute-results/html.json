{
  "hash": "c090090598fbd6ab9db846c962354a1f",
  "result": {
    "markdown": "---\ntitle: \"Simple examples of imap() from {purrr}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-06\"\ncategories: [code, rtip, purrr]\n---\n\n\n# Introduction\n\nThe [`imap()`](https://purrr.tidyverse.org/reference/imap.html) function is a powerful tool for iterating over a list or a vector while also keeping track of the index or names of the elements. This function applies a given function to each element of a list, along with the name or index of that element, and returns a new list with the results.\n\nThe `imap()` function takes two main arguments: `x` and `.f`. `x` is the list or vector to iterate over, and `.f` is the function to apply to each element. The .f function takes two arguments: x and i, where x is the value of the element and i is the index or name of the element.\n\n# Function\n\nHere is the `imap()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimap(.x, .f, ...)\n```\n:::\n\n\nHere is the documentation from the function page:\n\n*  `.x` - A list or atomic vector.\n*  `.f` - A function, specified in one of the following ways:\n    *  A named function, e.g. paste.\n    *  An anonymous function, e.g. \\(x, idx) x + idx or function(x, idx) x + idx.\n    *  A formula, e.g. ~ .x + .y. You must use .x to refer to the current element and .y to refer to the current index. Only recommended if you require backward compatibility with older versions of R.\n*  `...` - Additional arguments passed on to the mapped function. We now generally recommend against using ... to pass additional (constant) arguments to .f. Instead use a shorthand anonymous function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instead of\nx |> map(f, 1, 2, collapse = \",\")\n# do:\nx |> map(\\(x) f(x, 1, 2, collapse = \",\"))\n```\n:::\n\nThis makes it easier to understand which arguments belong to which function and will tend to yield better error messages.\n\n# Example\n\nHere's an example of using imap() with a simple list of integers:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\n# create a list of integers\nmy_list <- list(1, 2, 3, 4, 5)\n\n# define a function to apply to each element of the list\nmy_function <- function(x, i) {\n  paste(\"The element at index\", i, \"is\", x)\n}\n\n# apply the function to each element of the list using imap()\nresult <- imap(my_list, my_function)\n\n# print the result\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"The element at index 1 is 1\"\n\n[[2]]\n[1] \"The element at index 2 is 2\"\n\n[[3]]\n[1] \"The element at index 3 is 3\"\n\n[[4]]\n[1] \"The element at index 4 is 4\"\n\n[[5]]\n[1] \"The element at index 5 is 5\"\n```\n:::\n:::\n\n\nIn this example, we create a list of integers called my_list. We define a function called my_function that takes two arguments: x, which is the value of each element in the list, and i, which is the index of that element. We then use imap() to apply my_function to each element of my_list, passing both the value and the index of the element as arguments. The result is a new list where each element contains the output of my_function applied to the corresponding element of my_list.\n\nNow let's take a look at a slightly more complex example. In this case, we will use imap() to iterate over a list of data frames, apply a function to each data frame that subsets the data to include only certain columns, and return a new list of data frames with the subsetted data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a list of data frames\nmy_list <- list(\n  data.frame(x = 1:5, y = c(\"a\", \"b\", \"c\", \"d\", \"e\")),\n  data.frame(x = 6:10, y = c(\"f\", \"g\", \"h\", \"i\", \"j\")),\n  data.frame(x = 11:15, y = c(\"k\", \"l\", \"m\", \"n\", \"o\"))\n)\n\n# define a function to apply to each element of the list\nmy_function <- function(df, i) {\n  # subset the data to include only the x column\n  df_subset <- df[, \"x\", drop = FALSE]\n  # rename the column to include the index of the element\n  colnames(df_subset) <- paste(\"x_\", i, sep = \"\")\n  # return the subsetted data frame\n  return(df_subset)\n}\n\n# apply the function to each element of the list using imap\nresult <- imap(my_list, my_function)\n\n# print the result\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n  x_1\n1   1\n2   2\n3   3\n4   4\n5   5\n\n[[2]]\n  x_2\n1   6\n2   7\n3   8\n4   9\n5  10\n\n[[3]]\n  x_3\n1  11\n2  12\n3  13\n4  14\n5  15\n```\n:::\n:::\n\n\nIn this example, we create a list of three data frames called my_list. We define a function called my_function that takes two arguments: df, which is the value of each element in the list (a data frame), and i, which is the index of that element. The function subsets the data frame to include only the x column, renames the column to include the index of the element, and returns the subsetted data frame.\n\nWe use imap() to apply my_function to each element of my_list, passing both the data frame and the index of the element as arguments. The result is a new list of data frames, where each data frame contains only the x column from the original data frame, with a new name that includes the index of the element.\n\nAs you can see, the output is a list of three data frames, each containing only the x column from the corresponding original data frame, with a new name that includes the index of the element.\n\nIn summary, the imap() function from the R library purrr is a useful tool for iterating over a list or a vector while also keeping track of the index or names of the elements. The function takes a list or a vector as its first argument, and a function as its second argument, which takes two arguments: the value of each element, and the index or name of that element. The function returns a new list or vector with the results of applying the function to each element of the original list or vector. This function is particularly useful for complex data structures, where the index or name of each element is important for further data analysis or processing.\n\nVoila!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}