{
  "hash": "398099408f57269f9ba544923f6cff8d",
  "result": {
    "markdown": "---\ntitle: \"tidy_bernoulli() with {data.table}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-07\"\ncategories: [code, rtip, data.table]\n---\n\n\n# Introduction\n\nSo I was challanged by Adrian Antico to learn [`data.table`](https://rdatatable.gitlab.io/data.table/), so yesterday I started with a single function from my package [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) called __tidy_bernoulli()__.\n\nSo let's see how I did (hint, works but needs a lot of improvement, so I'll learn it.)\n\n# Function\n\nLet's see the function in `data.table`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyr)\nlibrary(stats)\nlibrary(purrr)\n\nnew_func <- function(num_sims, n, pr) {\n\n  # Create a data.table with one row per simulation\n  sim_data <- data.table(sim_number = factor(seq(1, num_sims, 1)))\n  \n  # Group the data by sim_number and add columns for x and y\n  sim_data[, `:=` (\n    x = list(1:n),\n    y = list(stats::rbinom(n = n, size = 1, prob = pr))\n  ), by = sim_number]\n  \n  # Compute the density of the y values and add columns for dx and dy\n  sim_data[, `:=` (\n    d = list(density(unlist(y), n = n)[c(\"x\", \"y\")] |>\n      set_names(\"dx\", \"dy\") |>\n      as_tibble())\n  ), by = sim_number]\n  \n  # Compute the p-values for the y values and add a column for p\n  sim_data[, `:=` (\n    p = list(stats::pbinom(unlist(y), size = 1, prob = pr))\n  ), by = sim_number]\n  \n  # Compute the q-values for the p-values and add a column for q\n  sim_data[, `:=` (\n    q = list(stats::qbinom(unlist(p), size = 1, prob = pr))\n  ), by = sim_number]\n  \n  # Unnest the columns for x, y, d, p, and q\n  sim_data <- sim_data[, \n                       unnest(\n                         .SD, \n                         cols = c(\"x\", \"y\", \"d\", \"p\", \"q\")\n                         ), \n                       by = sim_number]\n  \n  # Remove the grouping\n  sim_data[, sim_number := as.factor(sim_number)]\n  \n  return(sim_data)\n}\n```\n:::\n\n\n# Example\n\nNow, let's see the output of the original function __tidy_bernoulli()__ and __new_func()__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\nn <- 50\npr <- 0.1\nsims <- 5\n\nset.seed(123)\ntb <- tidy_bernoulli(.n = n, .prob = pr, .num_sims = sims)\n\nset.seed(123)\nnf <- new_func(n = n, num_sims = sims, pr = pr)\n\nprint(tb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 250 × 7\n   sim_number     x     y      dx     dy     p     q\n   <fct>      <int> <int>   <dbl>  <dbl> <dbl> <dbl>\n 1 1              1     0 -0.405  0.0292   0.9     0\n 2 1              2     0 -0.368  0.0637   0.9     0\n 3 1              3     0 -0.331  0.129    0.9     0\n 4 1              4     0 -0.294  0.243    0.9     0\n 5 1              5     1 -0.258  0.424    1       1\n 6 1              6     0 -0.221  0.688    0.9     0\n 7 1              7     0 -0.184  1.03     0.9     0\n 8 1              8     0 -0.147  1.44     0.9     0\n 9 1              9     0 -0.110  1.87     0.9     0\n10 1             10     0 -0.0727 2.25     0.9     0\n# … with 240 more rows\n```\n:::\n\n```{.r .cell-code}\nprint(nf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     sim_number  x y         dx          dy   p q\n  1:          1  1 0 -0.4053113 0.029196114 0.9 0\n  2:          1  2 0 -0.3683598 0.063683226 0.9 0\n  3:          1  3 0 -0.3314083 0.129227066 0.9 0\n  4:          1  4 0 -0.2944568 0.242967496 0.9 0\n  5:          1  5 1 -0.2575054 0.424395426 1.0 1\n ---                                             \n246:          5 46 0  1.2575054 0.057872104 0.9 0\n247:          5 47 0  1.2944568 0.033131931 0.9 0\n248:          5 48 1  1.3314083 0.017621873 1.0 1\n249:          5 49 1  1.3683598 0.008684076 1.0 1\n250:          5 50 0  1.4053113 0.003981288 0.9 0\n```\n:::\n:::\n\n\nOk so at least the output is identical which is a good sign. Now let's benchmark the two solutions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rbenchmark)\nlibrary(dplyr)\n\nbenchmark(\n  \"original\" = {\n    tidy_bernoulli(.n = n, .prob = pr, .num_sims = sims)\n  },\n  \"data.table\" = {\n    new_func(n = n, pr = pr, num_sims = sims)\n  },\n  replications = 100,\n  columns = c(\"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\"  )\n) |>\n  arrange(relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        test replications elapsed relative user.self sys.self\n1   original          100    3.29     1.00      2.51     0.08\n2 data.table          100    4.64     1.41      3.34     0.04\n```\n:::\n:::\n\n\nYeah, needs some work but it's a start.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}