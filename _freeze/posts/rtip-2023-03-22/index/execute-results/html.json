{
  "hash": "b98f0c013927176f07e1050a9e0f0915",
  "result": {
    "markdown": "---\ntitle: \"Some Examples of Cumulative Mean with {TidyDensity}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-22\"\ncategories: [rtip, tidydensity]\n---\n\n\n# Introduction\n\nCumulative mean is a statistical measure that calculates the mean of a set of numbers up to a certain point in time or after a certain number of observations. It is also known as a running average or moving average.\n\nCumulative mean can be useful in a variety of contexts. For example:\n\n*    Tracking progress: Cumulative mean can be used to track progress over time. For instance, a teacher might use it to track the average test scores of her students throughout the school year.\n\n*    Analyzing trends: Cumulative mean can help identify trends in data. For example, a business might use it to track the average revenue generated by a new product over the course of several months.\n\n*    Smoothing data: Cumulative mean can be used to smooth out fluctuations in data. For instance, a meteorologist might use it to calculate the average temperature over the course of a year, which would help to smooth out the effects of daily temperature fluctuations.\n\nIn summary, cumulative mean is a useful statistical measure that can help track progress, analyze trends, and smooth out fluctuations in data.\n\n# Function\n\nThe function we will review is `cmean()` from the [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) R package. Let's take a look at it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmean()\n```\n:::\n\n\nThe only argument is `.x` which is a numeric vector as this is a vectorized function. Let's see it in use.\n\n# Example\n\nFirst let's load in __TidyDensity__\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TidyDensity)\n```\n:::\n\n\nOk now let's make some data. For this we are going to use the simple `rnorm()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(100)\n\nhead(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.8293250 -1.2983499  2.2782337 -0.1521549  0.6859169  0.3809020\n```\n:::\n:::\n\n\nOk, now that we have our vector, let's run it through the function and see what it outputs and then we will graph it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncmx <- cmean(x)\nhead(cmx)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.8293249774 -1.0638374319  0.0501862766 -0.0003990095  0.1368641726\n[6]  0.1775371452\n```\n:::\n:::\n\n\nNow let's graph it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cmx, type = \"l\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOk nice, so can we do this on grouped data or lists of data? Of course! First let's use a for loop to generate a list of __rnorm()__ values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Initialize an empty list to store the generated values\nmy_list <- list()\n\n# Generate values using rnorm(5) in a for loop and store them in the list\nfor (i in 1:5) {\n  my_list[[i]] <- rnorm(100)\n}\n\n# Print the generated list\npurrr::map(my_list, head)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] -0.8054353 -0.4596541 -0.2362475  1.1486398 -0.7242154  0.5184610\n\n[[2]]\n[1]  0.3243327  0.7170802 -0.5963424 -1.0307104  0.3388504  0.5717486\n\n[[3]]\n[1]  1.7360816 -1.0359467 -0.3206138 -1.2157684 -0.8841356  0.1856481\n\n[[4]]\n[1] -1.1401642 -0.4437817 -0.2555245 -0.1809040 -0.2131763 -0.1251750\n\n[[5]]\n[1]  0.08835903 -1.79153379 -2.15010900  0.67344844  1.06125849  0.99848796\n```\n:::\n:::\n\n\nNow that we have our list object let's go ahead and plot the values out after we pass the data through `cmean()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\nmy_list |>\n  map(\\(x) x |> cmean() |> plot(type = \"l\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n\n[[3]]\nNULL\n\n[[4]]\nNULL\n\n[[5]]\nNULL\n```\n:::\n:::\n\n\nFrom here I think it is easy to see how one could do this on gruoped data as well with dplyr's __group_by()__.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}