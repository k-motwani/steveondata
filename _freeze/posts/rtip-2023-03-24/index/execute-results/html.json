{
  "hash": "cf4f8f427d48f9f1234f9bafaa01a19f",
  "result": {
    "markdown": "---\ntitle: \"How fast do the files read in?\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-24\"\ncategories: [rtip, benchmark]\n---\n\n\n# Introduction\n\nI will demonstrate how to generate a 1,000 row and column matrix with random numbers in R, and then save it in different file formats. I will also show how to get the file size of each saved object and benchmark how long it takes to read in each file using different functions.\n\n## Generating a large matrix\n\nTo generate a 1,000 row and column matrix with random numbers, we can use the matrix() function and the runif() function in R. Here's the code to generate the matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set seed for reproducibility\nset.seed(123)\n\n# number of rows/columns in matrix\nn <- 1000\n\n# generate matrix with random normal values\nmat <- matrix(runif(n^2), nrow = n) \n```\n:::\n\n\nThis code sets the random number generator seed to ensure that the same random numbers are generated every time the code is run. It then generates a vector of 1,000^2 random numbers using the runif() function, and creates a matrix with 1,000 columns using the matrix() function.\n\n## Saving the matrix in different file formats\n\nWe can save the generated matrix in different file formats using different functions in R. Here are the functions we will use for each file format:\n\n*    CSV: write.csv()\n*    RDS: saveRDS()\n*    FST: write_fst()\n*    Arrow: write_feather()\n\nHere's the code to save the matrix in each file format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fst)\nlibrary(arrow)\n\n# Save matrix in different file formats\nwrite.csv(mat, \"matrix.csv\", row.names=FALSE)\nsaveRDS(mat, \"matrix.rds\")\nwrite_fst(as.data.frame(mat), \"matrix.fst\")\nwrite_feather(as_arrow_table(as.data.frame(mat)), \"matrix.arrow\")\n```\n:::\n\n\nThis code saves the matrix in each file format using the corresponding function, with the file name specified as the second argument.\nGetting the file size of each saved object\n\nTo get the file size of each saved object, we can use the file.size() function in R. Here's the code to get the file size of each saved object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get file size of each saved object\ncsv_size <- file.size(\"matrix.csv\")  / (1024^2)\nrds_size <- file.size(\"matrix.rds\") / (1024^2)\nfst_size <- file.size(\"matrix.fst\") / (1024^2)\narrow_size <- file.size(\"matrix.arrow\") / (1024^2)\n\n# Print file size in human-readable format\nprint(paste(\"CSV file size in MB:\", format(csv_size, units=\"auto\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"CSV file size in MB: 17.17339\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"RDS file size in MB:\", format(rds_size, units=\"auto\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"RDS file size in MB: 5.079627\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"FST file size in MB:\", format(fst_size, units=\"auto\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"FST file size in MB: 7.700841\"\n```\n:::\n\n```{.r .cell-code}\nprint(paste(\"Arrow file size in MB:\", format(arrow_size, units=\"auto\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Arrow file size in MB: 6.705355\"\n```\n:::\n:::\n\n\nThis code uses the file.size() function to get the file size of each object, and stores the file size of each object in a separate variable.\n\nFinally, it prints the file size of each object in a human-readable format using the format() function with the units=\"auto\" argument. The units=\"auto\" argument automatically chooses the most appropriate unit (e.g., KB, MB, GB) based on the file size.\n\n## Benchmarking file read times\n\nTo benchmark how long it takes to read in each file, we can use the `{rbenchmark}` package in R. In this example, we will compare the read times for the CSV file using four different functions: `read.csv()`, `read_csv()` from the `{readr}` package, `fread()` from the `{data.table}` package, and `vroom()` from the `{vroom}` package. We will also benchmark the read times for the RDS file using `readRDS()`, the FST file using `read_fst()`, and the Arrow file using `read_feather()`.\n\nHere's the code to benchmark the read times:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load rbenchmark package\nlibrary(rbenchmark)\nlibrary(readr)\nlibrary(data.table)\nlibrary(vroom)\nlibrary(dplyr)\n\nn = 30\n\n# Benchmark read times for CSV file\nbenchmark(\n  # CSV File\n  \"read.csv\" = {\n    a <- read.csv(\"matrix.csv\")\n  },\n  \"read_csv\" = {\n    b <- read_csv(\"matrix.csv\")\n  },\n  \"fread\" = {\n    c <- fread(\"matrix.csv\")\n  },\n  \"vroom alltrep false\" = {\n    d <- vroom(\"matrix.csv\")\n  },\n  \"vroom alltrep true\" = {\n    dd <- vroom(\"matrix.csv\", altrep = TRUE)\n  },\n  \n  # Replications\n  replications = n,\n  \n  # Columns\n  columns = c(\n    \"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\")\n) |>\n  arrange(relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 test replications elapsed relative user.self sys.self\n1               fread           30    1.35    1.000      0.90     0.20\n2  vroom alltrep true           30    6.59    4.881      3.58     1.71\n3 vroom alltrep false           30    6.62    4.904      3.43     1.62\n4            read.csv           30   33.86   25.081     26.15     0.22\n5            read_csv           30   82.39   61.030     20.39     3.47\n```\n:::\n\n```{.r .cell-code}\n# RDS File\nbenchmark(\n  # RDS File\n  \"readRDS\" = {\n    e <- readRDS(\"matrix.rds\")\n  },\n  \"read_rds\" = {\n    f <- read_rds(\"matrix.rds\")\n  },\n  \n  # Repications\n  replications = n,\n  \n  # Columns\n  columns = c(\n    \"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\")\n) |>\n  arrange(relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      test replications elapsed relative user.self sys.self\n1 read_rds           30    0.95    1.000      0.74     0.01\n2  readRDS           30    0.97    1.021      0.74     0.02\n```\n:::\n\n```{.r .cell-code}\n# FST / Arrow\nbenchmark(\n  # FST\n  \"read_fst\" = {\n    g <- read_fst(\"matrix.fst\")\n  },\n  \n  # Arrow\n  \"arrow\" = {\n    h <- read_feather(\"matrix.arrow\")\n  },\n  \n  # Replications\n  replications = n,\n  \n  # Columns\n  columns = c(\n    \"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\")\n) |>\n  arrange(relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      test replications elapsed relative user.self sys.self\n1 read_fst           30    0.21    1.000      0.05     0.12\n2    arrow           30    3.00   14.286      1.60     0.11\n```\n:::\n:::\n\n\nThis code loads the `{rbenchmark}` package, and uses the `benchmark()` function to compare the read times for each file format. We specify the function to use for each file format, and set the number of replications to 10.\nConclusion\n\nIn this blog post, we demonstrated how to generate a large matrix with random numbers in R, and how to save it in different file formats. We also showed how to get the file size of each saved object, and benchmarked the read times for each file format using different functions.\n\nThis example demonstrates the importance of choosing the appropriate file format and read function for your data. Depending on the size of your data and the requirements of your analysis, some file formats and functions may be more efficient than others.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}