{
  "hash": "80bbb6b4027f001c9e30ca7c7e20e3a7",
  "result": {
    "markdown": "---\ntitle: \"How fast does a compressed file in Part 2\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-28\"\ncategories: [rtip, benchmark, arrow, duckdb, datatable, readr]\n---\n\n\n# Introduction\n\nYesterday I posted on performing a benchmark on reading in a compressed `.csv.gz` file of a 2,000 by 2,000 `data.frame`. It was brought to my attention by someone on Mastadon (@mariviere@fediscience.org - <https://fediscience.org/@mariviere>) that I should also use `{duckdb}` and `{arrow}` so I will perform the same analysis as yesterday but I will also add in the two aforementioned packages.\n\n# Function\n\nThe functions that we will be using this time around are as follows:\n\n*  `fread()` - data.table\n*  `duckdb_read_csv()` - duckdb\n*  `read_csv()` - readr\n*  `read.csv()` - base\n*  `read.table()` - base\n*  `vroom()` with altrep = `FALSE` - vroom\n*  `vroom()` with altrep = `TRUE` - vroom\n*  `oprn_csv_dataset()` - arrow\n\n\n# Example\n\n## Make the Data\nLet's make that dataset again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(R.utils)\n\n# create a 1000 x 1000 matrix of random numbers\ndf <- matrix(rnorm(2000000), nrow = 2000, ncol = 2000) |>\n  as.data.frame()\n\n# Make and save gzipped file\nwrite.csv(df, \"df.csv\")\ngzip(\n  filename = \"df.csv\", \n  destname = \"df.csv.gz\",\n  overwrite = FALSE, \n  remove = TRUE\n)\n```\n:::\n\n\n## Benchmarking\n\nTime to benchmark\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rbenchmark)\nlibrary(data.table)\nlibrary(readr)\nlibrary(duckdb)\nlibrary(arrow)\nlibrary(vroom)\nlibrary(dplyr)\nlibrary(DBI)\n\nn <- 30\n\nbenchmark(\n  # Base R\n  \"read.table\" = {\n    a <- read.table(\n      \"df.csv.gz\", \n      sep = \",\", \n      colClasses = list(numeric = 1:2000)\n    )\n  },\n  \"read.csv\" = {\n    b <- read.csv(\n      \"df.csv.gz\", \n      sep = \",\", \n      colClasses = list(numeric = 1:2000)\n    )\n  },\n  \n  # data.table\n  \"fread\" = {\n    c <- fread(\n      \"df.csv.gz\", \n      sep = \",\", \n      colClasses = list(numeric = 1:2000)\n    )\n  },\n  \n  # vroom\n  \"vroom alltrep false\" = {\n    d <- vroom(\"df.csv.gz\", delim = \",\", col_types = \"d\")\n  },\n  \"vroom alltrep true\" = {\n    e <- vroom(\"df.csv.gz\", delim = \",\", altrep = TRUE, col_types = \"d\")\n  },\n  \n  # readr\n  \"readr\" = {\n    f <- read_csv(\"df.csv.gz\", col_types = \"d\")\n  },\n  \n  # Arrow\n  \"arrow\" = {\n    g <- open_csv_dataset(\"df.csv.gz\")\n  },\n  \n  # DuckDB\n  \"duckdb\" = {\n    con <- dbConnect(duckdb())\n    h <- duckdb_read_csv(\n      conn = con,\n      name = \"df\",\n      files = \"C:\\\\Users\\\\ssanders\\\\Documents\\\\GitHub\\\\steveondata\\\\posts\\\\rtip-2023-03-28\\\\df.csv.gz\"\n    )\n    dbDisconnect(con)\n  },\n  \n  # Replications\n  replications = n,\n  \n  # Columns\n  columns = c(\n    \"test\",\"replications\",\"elapsed\",\"relative\",\"user.self\",\"sys.self\")\n) |>\n  arrange(relative)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 test replications elapsed relative user.self sys.self\n1               arrow           30    3.01    1.000      5.04     0.25\n2               fread           30   28.28    9.395     19.56     4.30\n3 vroom alltrep false           30   31.89   10.595     26.25    10.75\n4  vroom alltrep true           30   33.72   11.203     25.75    10.67\n5              duckdb           30   94.09   31.259     90.70     2.77\n6               readr           30   98.28   32.651    113.05    45.12\n7          read.table           30  109.97   36.535    107.78     1.24\n8            read.csv           30  153.79   51.093    152.44     0.56\n```\n:::\n:::\n\n\nImportant note is the session info on the pc I am using to write this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.3 (2023-03-15 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 10 x64 (build 19045)\n\nMatrix products: default\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] dplyr_1.1.1       vroom_1.6.1       arrow_11.0.0.3    duckdb_0.7.1-1   \n [5] DBI_1.1.3         readr_2.1.4       data.table_1.14.8 rbenchmark_1.0.0 \n [9] R.utils_2.12.2    R.oo_1.25.0       R.methodsS3_1.8.2\n\nloaded via a namespace (and not attached):\n [1] pillar_1.9.0      compiler_4.2.3    tools_4.2.3       digest_0.6.31    \n [5] bit_4.0.5         jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3  \n [9] tibble_3.2.1      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        \n[13] rstudioapi_0.14   parallel_4.2.3    yaml_2.3.7        xfun_0.38        \n[17] fastmap_1.1.1     knitr_1.42        generics_0.1.3    vctrs_0.6.1      \n[21] htmlwidgets_1.6.2 hms_1.1.3         bit64_4.0.5       tidyselect_1.2.0 \n[25] glue_1.6.2        R6_2.5.1          fansi_1.0.4       rmarkdown_2.21   \n[29] tzdb_0.3.0        purrr_1.0.1       magrittr_2.0.3    htmltools_0.5.5  \n[33] assertthat_0.2.1  utf8_1.2.3        crayon_1.5.2     \n```\n:::\n\n```{.r .cell-code}\n Sys.info() |> \n   as.data.frame() |> \n   tibble::rownames_to_column() |> \n   as_tibble() |> \n   slice(1,2,3,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 2\n  rowname `Sys.info()`\n  <chr>   <chr>       \n1 sysname Windows     \n2 release 10 x64      \n3 version build 19045 \n4 machine x86-64      \n```\n:::\n\n```{.r .cell-code}\n memory.profile() |>\n   as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            memory.profile()\nNULL                       1\nsymbol                 24303\npairlist              642504\nclosure                11189\nenvironment             4009\npromise                22963\nlanguage              189766\nspecial                   47\nbuiltin                  701\nchar                 2039073\nlogical                18866\ninteger               108132\ndouble                 20060\ncomplex                    5\ncharacter             160381\n...                       21\nany                        0\nlist                   58500\nexpression                 5\nbytecode               41555\nexternalptr            12382\nweakref                13860\nraw                    10113\nS4                      1362\n```\n:::\n\n```{.r .cell-code}\n gc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           used  (Mb) gc trigger  (Mb) max used  (Mb)\nNcells  3363479 179.7    5830931 311.5  5830931 311.5\nVcells 32950395 251.4   81254422 620.0 81254324 620.0\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}