{
  "hash": "b8e309cdc5f059c45646ab8f8dc5de4a",
  "result": {
    "markdown": "---\ntitle: \"A Bootstrapped Time Series Model with auto.arima() from {forecast}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-29\"\ncategories: [rtip, timeseries, bootstrap]\n---\n\n\n# Introduction\n\nTime series analysis is a powerful tool for understanding and predicting patterns in data that vary over time. In this tutorial, we will use the AirPassengers dataset to create a bootstrapped timeseries model in R.\n\nThe AirPassengers dataset\nThe AirPassengers dataset contains data on the number of passengers traveling on international flights per month from 1949 to 1960. To begin, we will load the dataset into R and plot it to get an idea of the data's structure and any underlying patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forecast)\n\ndata(AirPassengers)\nplot(AirPassengers, main = \"International Airline Passengers 1949-1960\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nFrom the plot, we can see that there is a clear upward trend in the data, as well as some seasonality.\n\n# Creating a bootstrapped timeseries model\n\nNow that we have an idea of the structure of the data, we can create a bootstrapped timeseries model using the `auto.arima()` function from the `{forecast}` package. The `auto.arima()` function uses an automated algorithm to determine the best model for a given timeseries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nn <- length(AirPassengers)\nn_boot <- 1000\n\n# create bootstrap sample indices\nboot_indices <- replicate(n_boot, sample(1:n, replace = TRUE))\n\n# create list to store models\nmodels <- list()\n\n# create bootstrapped models\nfor(i in 1:n_boot) {\n  boot_data <- AirPassengers[boot_indices[, i]]\n  models[[i]] <- auto.arima(boot_data)\n}\n\nmodels[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: boot_data \nARIMA(0,0,0) with non-zero mean \n\nCoefficients:\n          mean\n      275.5347\ns.e.    9.5443\n\nsigma^2 = 13209:  log likelihood = -887.01\nAIC=1778.02   AICc=1778.1   BIC=1783.96\n```\n:::\n:::\n\n\nIn the code above, we first set a seed to ensure reproducibility of our results. We then specify the length of the timeseries and the number of bootstrap iterations we want to run. We create a list to store the models and a set of bootstrap sample indices.\n\nWe then loop through each bootstrap iteration, creating a new dataset from the original timeseries by sampling with replacement using the boot_indices. We use the `auto.arima()` function to create a timeseries model for each bootstrap sample and store it in our models list.\n\n# Summarizing and plotting residuals\n\nNow that we have created our bootstrapped timeseries models, we can summarize and plot the residuals of each model to get an idea of how well our models fit the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create list to store residuals\nresiduals <- list()\n\n# create residuals for each model\nfor(i in 1:n_boot) {\n  boot_data <- AirPassengers[boot_indices[, i]]\n  residuals[[i]] <- residuals(models[[i]])\n}\n\n# summarize residuals\nresidual_means <- sapply(residuals, mean)\nresidual_sd <- sapply(residuals, sd)\n\n# plot residuals\npar(mfrow = c(2, 1))\n\nhist(\n  residual_means, \n  main = \"Bootstrapped Model Residuals\", \n  xlab = \"Mean Residuals\"\n  )\nhist(\n  residual_sd, \n  col = \"red\", \n  main = \"\", \n  xlab = \"SD Residuals\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1,1))\n```\n:::\n\n\nIn the code above, we create a list to store the residuals for each model, loop through each model to create residuals using the residuals() function, and summarize the residuals by taking the mean and standard deviation of each set of residuals.\n\nWe then plot the mean residuals and standard deviations for each model using the plot() function and add a legend to indicate the meaning of the two lines.\n\nVoila!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}