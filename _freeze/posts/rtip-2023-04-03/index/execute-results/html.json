{
  "hash": "d648f76f7f054ec146e656518ca90d29",
  "result": {
    "markdown": "---\ntitle: \"A sample Shiny App to view CMS Healthcare Data\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-03-29\"\ncategories: [rtip, shiny, data, healthcare, cms]\n---\n\n\n# Introduction\n\nIn this blog post, we will be discussing how to create a Shiny application in R that will download and extract data from a zip file and allow users to choose which data they would like to see presented to them in the app from a selection drop-down menu. We will be using the `current_hosp_data()` function to obtain and read in the data. This function is in the upcoming release for the [`{healthyR.data}`](https://www.spsanderson.com/healthyR.data/) package.\n\n# Example\n\n## Install\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(c(\"shiny\",\"shinythemes\"))\n```\n:::\n\n\n## Current Hospital Data\n\nHere is the `current_hospital_data()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_hosp_data <- function() {\n\n  # URL for file\n  url <- \"https://data.cms.gov/provider-data/sites/default/files/archive/Hospitals/current/hospitals_current_data.zip\"\n\n  # Create a temporary directory to process the zip file\n  tmp_dir <- tempdir()\n  download_location <- file.path(tmp_dir, \"download.zip\")\n  extract_location <- file.path(tmp_dir, \"extract\")\n\n  # Download the zip file to the temporary location\n  utils::download.file(\n    url = url,\n    destfile = download_location\n  )\n\n  # Unzip the file\n  utils::unzip(download_location, exdir = extract_location)\n\n  # Read the csv files into a list\n  csv_file_list <- list.files(\n    path = extract_location,\n    pattern = \"\\\\.csv$\",\n    full.names = TRUE\n  )\n\n  # make named list\n  csv_names <-\n    stats::setNames(\n      object = csv_file_list,\n      nm =\n        csv_file_list |>\n        basename() |>\n        gsub(pattern = \"\\\\.csv$\", replacement = \"\") |>\n        janitor::make_clean_names()\n    )\n\n  # Process CSV Files\n  parse_csv_file <- function(file) {\n    # Normalize the path to use C:/path/to/file structure\n    normalizePath(file, \"/\") |>\n      # read in the csv file and use check.names = FALSE because some of\n      # the names are very long\n      utils::read.csv(check.names = FALSE) |>\n      dplyr::as_tibble() |>\n      # clean the field names\n      janitor::clean_names()\n  }\n\n  list_of_tables <- lapply(csv_names, parse_csv_file)\n\n  unlink(tmp_dir, recursive = TRUE)\n\n  # Return the tibbles\n  # Add and attribute and a class type to the object\n  attr(list_of_tables, \".list_type\") <- \"current_hosp_data\"\n  class(list_of_tables) <- c(\"current_hosp_data\", class(list_of_tables))\n\n  list_of_tables\n}\n```\n:::\n\n\n## App File\n\nNext, let's create a new file called `app.R`. In this file, we will create the Shiny app. The app will have a user interface (UI) and a server.\n\nThe UI is responsible for creating the layout of the app, while the server is responsible for processing the data and responding to user input.\n\nFirst, let's create the UI. The UI will consist of a drop-down menu that will allow users to choose which data they would like to see presented to them in the app.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(shinythemes)\n\nhosp_data <- current_hosp_data()\n\nui <- fluidPage(theme = shinytheme(\"cerulean\"),\n                \n                # Set up the dropdown menu\n                selectInput(inputId = \"table\", \n                            label = \"Select a table:\", \n                            choices = names(hosp_data), \n                            selected = NULL),\n                \n                # Set up the table output\n                tableOutput(outputId = \"table_output\")\n)\n```\n:::\n\n\nThe `fluidPage()` function creates a new Shiny app page. We also specify the theme using the `{shinythemes}` package. The `selectInput()` function creates the drop-down menu, which allows users to select which data they would like to see presented to them in the app. The choices argument is set to the names of the tables in the [`current_hosp_data()`](https://www.spsanderson.com/healthyR.data/reference/current_hosp_data.html) object. The `tableOutput()` function creates the output for the selected table.\n\n## Server\n\nNext, let's create the server. The server will be responsible for processing the data and generating the output based on user input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n    \n    # Load the data into a reactive object\n    data <- reactive(hosp_data)\n    \n    # Set up the table output\n    output$table_output <- renderTable({\n        # Get the selected table\n        table_selected <- input$table\n        \n        # Get the table from the data object\n        table_data <- data()[[table_selected]]\n        \n        # Return the table data\n        table_data\n    })\n}\n```\n:::\n\n\nThe reactive() function is used to create a reactive object that will load the data when the app starts. The `renderTable()` function generates the output for the selected table. It does this by getting the selected table from the drop-down menu, getting the table data from the reactive data object, and returning the table data.\n\n## Shiny App\n\nFinally, we need to run the appl using the `shinyApp()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n## Pros and Cons\n\nPros:\n\n*    The app is easy to use, and users can quickly select which data they would like to see presented to them in the app.\n*    The `current_hosp_data()` function is only called once when the app starts, which can save time and resources if the function is time-consuming or resource-intensive.\n\nCons:\n\n*    The app will not update if the data in the zip file changes. Users will need to restart the app to see the updated data.\n*    The app loads all the data into memory when it starts, which can be an issue if the data is large and memory-intensive.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}