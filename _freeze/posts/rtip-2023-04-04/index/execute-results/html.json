{
  "hash": "b5ec95d5ed5ead195d689e90219f5f40",
  "result": {
    "markdown": "---\ntitle: \"A sample Shiny App to view Forecasts on the AirPassengers Data\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-04\"\ncategories: [rtip, shiny, data, timeseries]\n---\n\n\n# Introduction\n\nHello! In this code, we are making a program that will help us predict the number of air passengers in the future. Let me explain what each part of the code does, step by step.\n\nFirst, we need to load some tools that will help us create the program. These tools are called \"packages.\" We use the library() function to load them. The packages we need are called `shiny`, `forecast`, and `ggplot2`.\n\n## Load Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(forecast)\nlibrary(ggplot2)\n```\n:::\n\n\n## Data\n\nNext, we need some data to work with. We will use a dataset of the number of air passengers each month from 1949 to 1960. We load this dataset using the data() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(AirPassengers)\n```\n:::\n\n\n## User Interface\nNow, we need to create the user interface, or UI. This is what the user will see and interact with. In this case, we will create a simple app with a title, a __dropdown__ menu to choose a forecasting model, and a plot and table to display the forecast results. We use the `fluidPage()` function to create the UI, and we define the UI elements inside it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"AirPassengers Forecast\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"model\", label = \"Choose a model:\",\n                  choices = c(\"auto.arima\", \"ets\", \"holtwinters\"))\n    ),\n    mainPanel(\n      plotOutput(outputId = \"forecast_plot\"),\n      tableOutput(outputId = \"forecast_table\")\n    )\n  )\n)\n```\n:::\n\n\n## Server\n\nNow, we need to define the server. The server is where the program does the calculations and generates the output based on what the user selects in the UI. We define the server inside the function(input, output) argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n```\n:::\n\nInside the server, we need to create a reactive expression that generates the forecast based on the model the user selects. We use an if statement to check which model the user selected, and then we use the corresponding function to generate the forecast.\n\n### Forecast the Data\n\n::: {.cell}\n\n```{.r .cell-code}\nforecast_data <- reactive({\n    if (input$model == \"auto.arima\") {\n      fit <- auto.arima(AirPassengers)\n      forecast(fit)\n    } else if (input$model == \"ets\") {\n      fit <- ets(AirPassengers)\n      forecast(fit)\n    } else {\n      fit <- hw(AirPassengers)\n      forecast(fit)\n    }\n  })\n```\n:::\n\n\n### Render Plot\n\nThe `renderPlot()` function tells the program to create a plot based on the reactive expression we defined earlier. We use the `plotOutput()` function in the UI to display the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$forecast_plot <- renderPlot({\n    plot(forecast_data())\n  })\n```\n:::\n\n\nSimilarly, the `renderTable()` function tells the program to create a table based on the reactive expression we defined earlier. We use the `tableOutput()` function in the UI to display the table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$forecast_table <- renderTable({\n    forecast_data()$mean\n  })\n```\n:::\n\n\nFinally, we run the app using the `shinyApp()` function, with the UI and server arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nAnd that's it! This program allows the user to choose a forecasting model, and then generates a plot and table with the predicted number of air passengers based on that model.\n\nHere is the Full code block\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(shiny)\nlibrary(forecast)\nlibrary(ggplot2)\n\n# Load AirPassengers dataset\ndata(AirPassengers)\n\n# Define UI\nui <- fluidPage(\n  \n  # Title of the app\n  titlePanel(\"AirPassengers Forecast\"),\n  \n  # Sidebar with input controls\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"model\", label = \"Choose a model:\",\n                  choices = c(\"auto.arima\", \"ets\", \"holtwinters\"))\n    ),\n    \n    # Output plot and table\n    mainPanel(\n      plotOutput(outputId = \"forecast_plot\"),\n      tableOutput(outputId = \"forecast_table\")\n    )\n  )\n)\n\n# Define server\nserver <- function(input, output) {\n  \n  # Reactive expression to create forecast based on selected model\n  forecast_data <- reactive({\n    if (input$model == \"auto.arima\") {\n      fit <- auto.arima(AirPassengers)\n      forecast(fit)\n    } else if (input$model == \"ets\") {\n      fit <- ets(AirPassengers)\n      forecast(fit)\n    } else {\n      fit <- hw(AirPassengers)\n      forecast(fit)\n    }\n  })\n  \n  # Output plot\n  output$forecast_plot <- renderPlot({\n    plot(forecast_data())\n    #checkresiduals(forecast_data())\n  })\n  \n  # Output table\n  output$forecast_table <- renderTable({\n    forecast_data()$mean\n  })\n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}