{
  "hash": "1de60dc968561f86321308355d2818c7",
  "result": {
    "markdown": "---\ntitle: \"Looking at Daily Log Returns with tidyquant, TidyDensity, and Shiny\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-05\"\ncategories: [rtip, shiny, tidydensity, tidyquant, timeseries]\n---\n\n\n# Introduction\n\nIn this blog post, we'll walk through how to create a shiny application that allows users to analyze the weekly returns of FAANG stocks (AAPL, AMZN, FB, GOOGL, and NFLX) using the [`{tidyquant}`](https://business-science.github.io/tidyquant/) and [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) packages in R.\n\n## Section 1: Package and UI Setup\n\nThe first section of the code sets up the necessary R packages and creates the UI for the shiny app. The packages we'll be using are:\n\n*   __shiny__: for creating interactive web applications in R\n*   __tidyquant__: for easily getting and analyzing financial data in R\n*   __TidyDensity__: for computing and visualizing probability distributions in a tidy way\n*   __dplyr__: for manipulating data in a tidy way\n*   __DT__: for creating interactive and scrollable data tables\n\nAnalysts assemble your packages!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyquant)\nlibrary(TidyDensity)\nlibrary(dplyr)\nlibrary(DT)\n```\n:::\n\n\nThe UI consists of a title panel, a sidebar panel, and a main panel. The sidebar panel contains a select input that allows users to choose which FAANG stock to analyze, as well as a numeric input for the number of simulations to run. The main panel contains two sections: one for the `tidy_autoplot()` output (a plot of the stock returns), and one for the `tidy_empirical()` output (a table of the log returns).\n\n## Section 2: Server Setup\n\nThe second section of the code defines the server function for the shiny app. The server function takes the input values from the UI (i.e. the selected stock and number of simulations) and uses them to get and analyze the stock data.\n\nTo get the stock data, we use the `tq_get()` function from the `tidyquant` package to retrieve the adjusted stock prices for the selected security from January 1, 2010 to the present. We then use the `tq_transmute()` function to compute the weekly log returns of the stock and rename the resulting column to \"log_return\".\n\nThe `tidy_empirical()` function from the `TidyDensity` package is used to compute the empirical distribution of the log returns. The resulting table is displayed using the `renderDT()` function from the `DT` package, which creates a scrollable data table that can be sorted and filtered.\n\nThe `tidy_autoplot()` function is used to create a plot of the log returns, which is displayed using the `renderPlot()` function.\n\n## Section 3: Running the App\n\nThe final section of the code runs the shiny app using the ui and server functions.\n\nOverall, this shiny app provides a simple and interactive way for users to analyze the weekly returns of FAANG stocks using `tidyquant` and `TidyDensity` in R. By allowing users to choose which stock to analyze and how many simulations to run, the app provides a customizable way to explore the empirical distributions of the log returns.\n\n# Example\n\nHere is a full working example, except for FB for some reason that symbol errors out for me, go figure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyquant)\nlibrary(TidyDensity)\nlibrary(dplyr)\nlibrary(DT)\n\n# define UI\nui <- fluidPage(\n  titlePanel(\"FAANG Stock Analysis\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"ticker\", \"Select a security:\", choices = c(\"AAPL\", \"AMZN\", \"FB\", \"GOOGL\", \"NFLX\"), selected = \"AAPL\"),\n      numericInput(\"num_sims\", \"Enter the number of simulations:\", value = 1, min = 1, max = 25, step = 1)\n    ),\n    mainPanel(\n      h3(\"Tidy Autoplot Output\"),\n      plotOutput(\"autoplot_output\"),\n      h3(\"Tidy Empirical Output\"),\n      DTOutput(\"empirical_output\")\n    )\n  )\n)\n\n# define server\nserver <- function(input, output) {\n  \n  # get stock data using tq_get and tq_transmute\n  stock_data <- reactive({\n    tq_get(input$ticker, get = \"stock.prices\", from = \"2010-01-01\") %>%\n      tq_transmute(select = adjusted, mutate_fun = periodReturn, period = \"weekly\", type = \"log\", col_rename = \"log_return\")\n  })\n  \n  # output tidy_empirical results\n  output$empirical_output <- renderDT({\n    datatable(\n      tidy_empirical(stock_data()$log_return, .num_sims = input$num_sims),\n      options = list(scrollY = \"250px\")\n    )\n  })\n  \n  # output tidy_autoplot results\n  output$autoplot_output <- renderPlot({\n    stock_data()$log_return %>%\n      tidy_empirical(.num_sims = input$num_sims) %>%\n      tidy_autoplot()\n  })\n  \n}\n\n# run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}