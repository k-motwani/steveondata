{
  "hash": "b1b315a9d4e68bb3ea9ae10618b0f31c",
  "result": {
    "markdown": "---\ntitle: \"Exploring Distributions with {shiny} and {TidyDensity}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-18\"\ncategories: [rtip, shiny, tidydensity]\n---\n\n\n# Introduction\n\nShiny is an R package that allows you to build interactive web applications using R code. TidyDensity is an R package that provides a tidyverse-style interface for working with probability density functions. In this tutorial, we'll use these two packages to build a Shiny app that allows users to interact with TidyDensity functions.\n\n# Example\n\n## Required Packages\n\nBefore we dive into the code, let's go over the packages that we'll be using in this app:\n\n*    Shiny: As mentioned earlier, Shiny is an R package for building interactive web applications. It provides a variety of input controls and output elements that allow you to create user interfaces for your R code.\n\n*    TidyDensity: TidyDensity is an R package that provides a tidyverse-style interface for working with probability density functions. It provides a set of functions for generating density functions, as well as a tidy_autoplot() function for creating visualizations.\n\n*    tidyverse: Tidyverse is a collection of R packages designed for data science. It includes many popular packages such as ggplot2, dplyr, and tidyr. We'll be using some functions from the tidyverse packages in our Shiny app.\n\n*    DT: DT is an R package for creating interactive tables in RMarkdown documents, Shiny apps, and RStudio. We'll be using the DT::datatable() function to create a table of output data in our app.\n\nLoad them up!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(DT)\nlibrary(tidyverse)\nlibrary(TidyDensity)\n```\n:::\n\n\n## The UI Object\n\nThe UI object is the first argument of the shinyApp() function, and it defines the layout and appearance of the app. In our TidyDensity Shiny app, we'll use a sidebar layout with two input controls and two output elements:\n\n*    Select Function Input: A selectInput() control that allows users to select one of four TidyDensity functions: tidy_normal(), tidy_bernoulli(), tidy_beta(), and tidy_gamma().\n\n*    Number of Simulations Input: A numericInput() control that allows users to specify the number of simulations to use in the TidyDensity function.\n\n*    Sample Size Input: A numericInput() control that allows users to specify the sample size to use in the TidyDensity function.\n\n*    Density Plot Output: A plotOutput() element that displays the density plot generated by tidy_autoplot().\n\n*    Data Table Output: A dataTableOutput() element that displays the output data from the TidyDensity function.\n\nHere's the code for the UI object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"function\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                    )\n                  ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200)\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      dataTableOutput(\"data_table\")\n    )\n  )\n)\n```\n:::\n\n\n## The Server Object\n\nThe server object is the second argument of the shinyApp() function, and it defines the behavior and output of the app. In our TidyDensity Shiny app, the server object consists of two reactive expressions that generate the output elements based on the user inputs:\n\n*    Data Reactive Expression: A reactive expression that generates the output data for the selected TidyDensity function based on the user inputs. We use match.fun() to convert the selected function name into an R function, and we pass the num_sims and n arguments from the input controls.\n\n*    Density Plot Reactive Expression: A reactive expression that generates the density plot using tidy_autoplot() and the output data from the data reactive expression.\n\n*    Data Table Output: We use DT::renderDataTable() to generate the data table output element based on the output data from the data reactive expression.\n\nHere's the code for the server object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$function)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() %>%\n      tidy_autoplot()\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n}\n```\n:::\n\n\n# Conclusion\n\nIn this tutorial, we used Shiny and TidyDensity to build an interactive web application that allows users to generate and visualize probability density functions. We learned how to use the selectInput() and numericInput() controls to allow users to specify the function and input parameters, and we used the plotOutput() and dataTableOutput() elements to display the output data and visualizations. We also used the reactive() function to create reactive expressions that automatically update the output elements based on the user inputs.\n\nMost importantly, steal the code below and see what you can do with it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"functions\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                    )\n                  ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200)\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() |>\n      tidy_autoplot()\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}