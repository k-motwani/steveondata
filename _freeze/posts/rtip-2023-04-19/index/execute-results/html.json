{
  "hash": "4d2ebb07118190718f72c0617b43747f",
  "result": {
    "markdown": "---\ntitle: \"Exploring Distributions with {shiny} and {TidyDensity} Part 2\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-19\"\ncategories: [rtip, shiny, tidydensity]\n---\n\n\n# Introduction\n\nShiny is an R package that allows you to create interactive web applications from R code. In this blog post, we'll explore the different components of a Shiny application and show how they work together to create an interactive data visualization app. This is a part 2 with a small enhancement.\n\n# The App\n\nOur Shiny app will generate density plots for different statistical distributions based on user input. The user will be able to select a distribution, set the number of simulations, and choose the plot type from a dropdown menu. The app will also display a table of data generated by the selected distribution.\n\nHere's a preview of what the app will look like:\n![TidyDensity with Shiny](image.PNG)\n\n## The UI\n\nThe user interface (UI) is the visual part of the app that the user interacts with. In our app, the UI is defined using the fluidPage() function from the shiny package. It consists of a title panel, a sidebar layout, and a main panel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"functions\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                  )\n      ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200),\n      selectInput(inputId = \"plot_type\",\n                  label = \"Select plot type\",\n                  choices = c(\n                    \"density\",\n                    \"quantile\",\n                    \"probability\",\n                    \"qq\",\n                    \"mcmc\"\n                  )\n      )\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n```\n:::\n\n\nThe title panel displays the app name, while the sidebar layout contains the input controls for the user. In this case, we have four input elements:\n\n*    `selectInput()` allows the user to choose a statistical distribution to generate data from.\n*    `numericInput()` allows the user to set the number of simulations.\n*    Another `numericInput()` allows the user to set the sample size.\n*    `selectInput()` allows the user to choose the type of plot to display.\n\nThe main panel contains the output elements for the app, in this case a plot and a table.\n\n## The Server\n\nThe server is the backend of the app that handles the logic and generates the output based on user input. In our app, the server is defined using the `server()` function from the shiny package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() |>\n      tidy_autoplot(.plot_type = input$plot_type)\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n}\n```\n:::\n\n\nThe `server()` function takes two arguments, input and output. These arguments allow the server to interact with the user interface.\n\nFirst, we create a reactive data object data, which takes in the user's input for the function, number of simulations, and sample size, and passes it to the appropriate function using `match.fun()`.\n\nNext, we create the density_plot output. We use the `renderPlot()` function to create a reactive plot of the data using the tidy_autoplot() function from the `{TidyDensity}` package. The `tidy_autoplot()` function allows the user to choose from several plot types, including density, quantile, probability, qq, and mcmc. We then print the plot using the `print()` function.\n\nFinally, we create the `data_table` output using the `DT::renderDataTable()` function. This output displays the reactive data as a table using the `DT::datatable()` function.\n\n## The Shiny App\n\nFinally, we run the Shiny app using the `shinyApp()` function, which takes the `ui` and `server` functions as arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nThis launches the app and displays the user interface. The user can interact with the app by selecting a function, specifying the number of simulations and sample size, and viewing the resulting density plot and data table. The app provides a simple and interactive way to explore the TidyDensity package and its functionality.\n\n# Conclusion\nHere is the entire app! Steal this code and modify it for yourself, see what you can do!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"functions\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                  )\n      ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200),\n      selectInput(inputId = \"plot_type\",\n                  label = \"Select plot type\",\n                  choices = c(\n                    \"density\",\n                    \"quantile\",\n                    \"probability\",\n                    \"qq\",\n                    \"mcmc\"\n                  )\n      )\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() |>\n      tidy_autoplot(.plot_type = input$plot_type)\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}