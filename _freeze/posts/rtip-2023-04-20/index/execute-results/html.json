{
  "hash": "f9b3b28f309d24c2b9e1ea1ed36eaa3a",
  "result": {
    "markdown": "---\ntitle: \"Exploring Distributions with {shiny} and {TidyDensity} Part 3\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-20\"\ncategories: [rtip, shiny, tidydensity]\n---\n\n\n# Introduction\n\nIn the previous post we allowed users to choose a distribution and a plot type. Now, we want to allow users to download a __.csv__ file of the data that is generated.\n\nIn the UI, we added a `downloadButton` with `outputId = \"download_data\"` and `label = \"Download Data\"`. In the server, we added a `downloadHandler` that takes a `filename` and content function. The `filename` function returns the name of the file to be downloaded (in this case, we used the selected function name as the file name with \".csv\" extension). The content function writes the reactive data to a CSV file using the write.csv function. The `downloadHandler` returns the file to be downloaded when the button is clicked.\n\nSee here:\n![Download Buttong](DownloadData.PNG)\n\n# UI Section\n\nHere is the update to the UI Section\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"functions\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                  )\n      ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200),\n      selectInput(inputId = \"plot_type\",\n                  label = \"Select plot type\",\n                  choices = c(\n                    \"density\",\n                    \"quantile\",\n                    \"probability\",\n                    \"qq\",\n                    \"mcmc\"\n                  )\n      ),\n      # Download the data\n      downloadButton(outputId = \"download_data\", label = \"Download Data\")\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n```\n:::\n\n\n# Server Section\n\nHere is the update to the Server section.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() |>\n      tidy_autoplot(.plot_type = input$plot_type)\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n  # Download data handler\n  output$download_data <- downloadHandler(\n    filename = function() {\n      paste0(input$functions, \".csv\")\n    },\n    content = function(file) {\n      write.csv(data(), file, row.names = FALSE)\n    }\n  )\n  \n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n# Conclusion\n\nWith these changes, the user can now export the data to a __.csv__ file by clicking the \"Export Data\" button and selecting where to save the file.\n\nI hope this update to the TidyDensity app will make it more useful for your data analysis needs. If you have any questions or feedback, please feel free to let me know, and as usual...Steal this Code!! Modify for yourself and see what you come up with.\n\n\nHere is the entire script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(inputId = \"functions\",\n                  label = \"Select Function\",\n                  choices = c(\n                    \"tidy_normal\", \n                    \"tidy_bernoulli\", \n                    \"tidy_beta\", \n                    \"tidy_gamma\"\n                  )\n      ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200),\n      selectInput(inputId = \"plot_type\",\n                  label = \"Select plot type\",\n                  choices = c(\n                    \"density\",\n                    \"quantile\",\n                    \"probability\",\n                    \"qq\",\n                    \"mcmc\"\n                  )\n      ),\n      downloadButton(outputId = \"download_data\", label = \"Download Data\")\n    ),\n    mainPanel(\n      plotOutput(\"density_plot\"),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input\n    match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    p <- data() |>\n      tidy_autoplot(.plot_type = input$plot_type)\n    \n    print(p)\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    DT::datatable(data())\n  })\n  \n  # Download data handler\n  output$download_data <- downloadHandler(\n    filename = function() {\n      paste0(input$functions, \".csv\")\n    },\n    content = function(file) {\n      write.csv(data(), file, row.names = FALSE)\n    }\n  )\n  \n}\n\n# Run the app\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}