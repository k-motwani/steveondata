{
  "hash": "8477f901975b5589665cfe0dbddae53a",
  "result": {
    "markdown": "---\ntitle: \"Exploring Distributions with {shiny}, {TidyDensity} and {plotly} Part 5\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-24\"\ncategories: [rtip, shiny, tidydensity, plotly]\n---\n\n\n# Introduction\n\nI have been writing about using the [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) package with `shiny` for the last few posts, and this one is the last. This post will go over the app and discuss how to change the output of the graph from a `ggplot2` object into a `plotly` object. So we will end up with something like this in the menu panel:\n\n![Plotly Output](Capture1.PNG)\n\nAnd here is the difference between the plots, first the __ggplot2__ plot:\n![ggplot2 Plot](Capture3.PNG)\n\nAnd the __plotly_plot__:\n![plotly plot](Capture2.PNG)\n\nFirst, the required libraries are loaded: `shiny`, `TidyDensity`, `tidyverse`, `DT`, and `plotly`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(plotly)\n```\n:::\n\n\n# UI\nThe user interface (UI) is defined using the `fluidPage()` function from the `shiny` package. The UI consists of a title panel, a sidebar panel, and a main panel. The title panel simply displays the title of the app, while the sidebar panel contains user input elements such as radio buttons, text inputs, and numeric inputs. The main panel displays the plot, data table, and download button.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      # user input elements\n    ),\n    mainPanel(\n      # plot, data table, and download button\n    )\n  )\n)\n```\n:::\n\n\nNext, the server is defined using the `server()` function from the `shiny` package. The server is responsible for generating the output based on the user inputs. The first step is to create reactive data using the `reactive()` function. The reactive data is created based on the user inputs for the distribution function or the entered data. The `match.fun()` function is used to match the selected function with the corresponding function in the `TidyDensity package`. The `tidy_empirical()` function is used if the user entered their own data.\n\n# Server\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input or tidy_empirical if user entered data\n    if (input$data_input_type == \"Enter Data\") {\n      data <- input$data\n      if (is.null(data) || data == \"\") {\n        return(NULL)\n      }\n      data <- as.numeric(strsplit(data, \",\")[[1]])\n      tidy_empirical(data)\n    } else {\n      match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n    }\n  })\n```\n:::\n\n\nAfter the reactive data is created, the output is generated. The output consists of the density plot, data table, and download button. The `renderPlot()` and `renderPlotly()` functions are used to generate the plot output. The `renderDataTable()` function is used to generate the data table output. The `downloadHandler()` function is used to generate the download button.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      print(p)\n      \n      #ifelse(input$plotly_option == \"TRUE\", ggplotly(p), p)\n    }\n  })\n  \n  output$density_plotly <- renderPlotly({\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      ggplotly(p)\n    }\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    if (!is.null(data())) {\n      DT::datatable(data())\n```\n:::\n\n\nNext, we define the server function, which contains the code that will run in response to user input. We start by creating a reactive data object called data. This object will store the data that will be used to generate the plots and tables in the app.\n\nThe data that data stores depends on the user's input. If the user selects \"Enter Data\" in the sidebar, then data will be set to a `tidy_empirical()` object generated from the user-entered data. Otherwise, if the user selects \"Select Function\", then data will be set to a `tidy_` function object generated using the user's choices for number of simulations and sample size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input or tidy_empirical if user entered data\n    if (input$data_input_type == \"Enter Data\") {\n      data <- input$data\n      if (is.null(data) || data == \"\") {\n        return(NULL)\n      }\n      data <- as.numeric(strsplit(data, \",\")[[1]])\n      tidy_empirical(data)\n    } else {\n      match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n    }\n  })\n  ...\n}\n```\n:::\n\n\nThe `tidy_empirical()` function is used to generate a density plot of the empirical distribution of the user-entered data. This function takes the user-entered data as input and returns a tidy data frame that can be used to create a density plot.\n\nThe `tidy_` functions are used to simulate data from various distributions and generate plots based on that data. These functions take the number of simulations and sample size as input and return a tidy data frame that can be used to create various types of plots.\n\nNext, we define the code for generating the density plot. This code uses the data object that was created earlier to generate a plot. The `tidy_autoplot()` function is used to generate the plot based on the user's selected plot type. If the user selects the \"Use Plotly\" option, then the plot is generated using the `ggplotly()` function from the `plotly` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      print(p)\n      \n      #ifelse(input$plotly_option == \"TRUE\", ggplotly(p), p)\n    }\n  })\n  \n  output$density_plotly <- renderPlotly({\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      ggplotly(p)\n    }\n  })\n```\n:::\n\n\nThe `ggplotly()` function is used to generate an interactive version of the plot that can be zoomed in and out of and hovered over to see details about specific data points.\n\nNext, we define the code for generating the data table. This code simply displays the data object as a table using the `datatable()` function from the DT package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data table\noutput$data_table <- DT::renderDataTable({\n  # Return reactive data as a data table\n  if (!is.null(data())) {\n    DT::datatable(data())\n  }\n})\n```\n:::\n\n\nFinally, we define the code for downloading the data as a CSV file. This code uses the `downloadHandler()` function to generate a file download link that, when clicked, will download the data as a CSV file. The name of the CSV file depends on the user's input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # Download data handler\n  output$download_data <- downloadHandler(\n    filename = function() {\n      if (input$data_input_type == \"Enter Data\") {\n        paste0(\"tidy_empirical.csv\")\n      } else {\n        paste0(input$functions, \".csv\")\n      }\n    },\n    content = function(file) {\n      write.csv(data(), file, row.names = FALSE)\n    }\n  )\n```\n:::\n\n\nFinally, here is the script in it's entirety, steal it and see what you can come up with!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(TidyDensity)\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(plotly)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"TidyDensity App\"),\n  sidebarLayout(\n    sidebarPanel(\n      radioButtons(inputId = \"data_input_type\",\n                   label = \"Data Input Type:\",\n                   choices = c(\"Select Function\", \"Enter Data\"),\n                   selected = \"Select Function\"),\n      conditionalPanel(\n        condition = \"input.data_input_type == 'Enter Data'\",\n        textInput(inputId = \"data\",\n                  label = \"Enter data as a comma-separated list of numeric values\")\n      ),\n      conditionalPanel(\n        condition = \"input.data_input_type == 'Select Function'\",\n        selectInput(inputId = \"functions\",\n                    label = \"Select Function\",\n                    choices = c(\n                      \"tidy_normal\", \n                      \"tidy_bernoulli\", \n                      \"tidy_beta\", \n                      \"tidy_gamma\"\n                    )\n        )\n      ),\n      numericInput(inputId = \"num_sims\",\n                   label = \"Number of simulations:\",\n                   value = 1,\n                   min = 1,\n                   max = 15),\n      numericInput(inputId = \"n\",\n                   label = \"Sample size:\",\n                   value = 50,\n                   min = 30,\n                   max = 200),\n      selectInput(inputId = \"plot_type\",\n                  label = \"Select plot type\",\n                  choices = c(\n                    \"density\",\n                    \"quantile\",\n                    \"probability\",\n                    \"qq\",\n                    \"mcmc\"\n                  )\n      ),\n      selectInput(inputId = \"plotly_option\",\n                  label = \"Use Plotly\",\n                  choices = c(\"TRUE\", \"FALSE\"),\n                  selected = \"FALSE\"\n      ),\n      downloadButton(outputId = \"download_data\", label = \"Download Data\")\n    ),\n    mainPanel(\n      conditionalPanel(\n        condition = \"input.plotly_option == 'TRUE'\",\n        plotlyOutput(\"density_plotly\")\n      ),\n      conditionalPanel(\n        condition = \"input.plotly_option == 'FALSE'\",\n        plotOutput(\"density_plot\")\n      ),\n      DT::dataTableOutput(\"data_table\")\n    )\n  )\n)\n\n# Define server\nserver <- function(input, output) {\n  \n  # Create reactive data\n  data <- reactive({\n    # Call selected function with user input or tidy_empirical if user entered data\n    if (input$data_input_type == \"Enter Data\") {\n      data <- input$data\n      if (is.null(data) || data == \"\") {\n        return(NULL)\n      }\n      data <- as.numeric(strsplit(data, \",\")[[1]])\n      tidy_empirical(data)\n    } else {\n      match.fun(input$functions)(.num_sims = input$num_sims, .n = input$n)\n    }\n  })\n  \n  # Create density plot\n  output$density_plot <- renderPlot({\n    # Call autoplot on reactive data\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      print(p)\n      \n      #ifelse(input$plotly_option == \"TRUE\", ggplotly(p), p)\n    }\n  })\n  \n  output$density_plotly <- renderPlotly({\n    if (!is.null(data())) {\n      p <- data() |>\n        tidy_autoplot(.plot_type = input$plot_type)\n      \n      ggplotly(p)\n    }\n  })\n  \n  # Create data table\n  output$data_table <- DT::renderDataTable({\n    # Return reactive data as a data table\n    if (!is.null(data())) {\n      DT::datatable(data())\n    }\n  })\n  \n  # Download data handler\n  output$download_data <- downloadHandler(\n    filename = function() {\n      if (input$data_input_type == \"Enter Data\") {\n        paste0(\"tidy_empirical.csv\")\n      } else {\n        paste0(input$functions, \".csv\")\n      }\n    },\n    content = function(file) {\n      write.csv(data(), file, row.names = FALSE)\n    }\n  )\n  \n}\n\n# Run\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}