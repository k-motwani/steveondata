{
  "hash": "8f2b58af7548d059ddabc380c151cfca",
  "result": {
    "markdown": "---\ntitle: \"Building models with {shiny} and {tidyAML} Part 1\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-25\"\ncategories: [rtip, shiny, tidymodels, tidyaml]\n---\n\n\n# Introduction\n\nWelcome to the [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) Model Builder, a Shiny web application that allows you to build predictive models using the `tidyAML` and Parsnip packages in R.\n\nLet's dive into the code to understand how it works!\n\n# Load Libraries\nFirst, we load the necessary packages: \n\n*    `shiny`\n*    `tidyAML`\n*    `recipes`\n*    `DT`\n*    `glmnet.`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyAML)\nlibrary(recipes)\nlibrary(DT)\nlibrary(glmnet)\n```\n:::\n\n\n# UI\n\nNext, we define the user interface (UI) of the Shiny app using the `fluidPage()` function from the `shiny` package. The UI consists of a title panel, a sidebar panel, and a main panel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"TidyAML Model Builder\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Upload your data file (csv or txt):\"),\n      selectInput(\n        \"dataset\", \n        \"Choose a built-in dataset:\", \n        choices = c(\"mtcars\", \"iris\")\n      ),\n      selectInput(\n        \"predictor_col\", \n        \"Select the predictor column:\", \n        choices = NULL\n      ),\n      selectInput(\n        \"model_type\", \n        \"Select a model type:\", \n        choices = c(\"regression\", \"classification\")\n      ),\n      selectInput(\n        \"model_fn\", \n        \"Select a model function:\", \n         choices = c(\"lm\", \"glm\", \"glmnet\")\n      ),\n      actionButton(\"build_model\", \"Build Model\"),\n      verbatimTextOutput(\"recipe_output\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"model_table\")\n    )\n  )\n)\n```\n:::\n\n\nThe `sidebarPanel()` contains several input elements that allow the user to specify the dataset, the predictor column, the type of model, and the model function. There is also an input element that allows the user to upload their own data file. The `actionButton()` is used to trigger the model building process. Finally, the `verbatimTextOutput()` element is used to display the output of the model building process.\n\nThe `mainPanel()` contains a single `verbatimTextOutput()` element that displays the output of the model building process.\n\nNext, we define the server function, which is responsible for handling the user inputs and building the predictive models. The server function takes three arguments:` input`, `output`, and `session`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session){\n  ...\n}\n```\n:::\n\n\nWe start by defining a reactive expression called `data`. This expression reads in the user-specified dataset or data file and updates the `predictor_col` select input with the names of the columns of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  data <- reactive({\n    if (!is.null(input$file)) {\n      df <- read.csv(\n        input$file$datapath, \n        header = TRUE, \n        stringsAsFactors = FALSE\n        )\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n        )\n      return(df)\n    } else if (!is.null(input$dataset)) {\n      df <- get(input$dataset)\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n        )\n      return(df)\n    }\n  })\n```\n:::\n\n\nThe first reactive expression, `data`, reads in the data file uploaded by the user or selects a built-in dataset, depending on which option the user chooses. If the user uploads a file, the `read.csv()` function is used to read the data file into a data frame. If the user selects a built-in dataset, the `get()` function is used to retrieve the data frame associated with that dataset. In both cases, the column names of the data frame are used to update the choices in the `predictor_col` select input, so that the user can select which column to use as the predictor variable.\n\nThe next reactive expression, `recipe_obj`, creates a recipe object based on the` predictor_col` selected by the user and the data frame returned by `data()`. The `as.formula()` function is used to create a formula that specifies the predictor column as the response variable and all other columns as the predictors. The resulting formula is passed to the `recipe()` function, along with the data frame. The `step_normalize()` function is then used to standardize all numeric predictors (except for the outcome variable) to have a mean of 0 and a standard deviation of 1. The resulting recipe object is returned by the reactive expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  recipe_obj <- eventReactive(input$predictor_col, {\n    rec <- recipe(as.formula(paste(input$predictor_col, \"~ .\")), \n                  data = data()) |>\n      step_normalize(all_numeric(), -all_outcomes())\n    \n    return(rec)\n  })\n```\n:::\n\n\nThe model_fn reactive expression uses a `switch()` statement to determine which model function to use based on the `model_fn` select input. The available options are `\"lm\"` (for linear regression), `\"glm\"` (for generalized linear models), and `\"glmnet\"` (for regularized linear models).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  model_fn <- reactive({\n    switch(\n      input$model_fn,\n      \"lm\" = \"lm\",\n      \"glm\" = \"glm\",\n      \"glmnet\" = \"glmnet\"\n    )\n  })\n```\n:::\n\n\nThe last reactive expression, model, uses the `fast_regression()` or `fast_classification()` functions from the `tidyAML` package to build a regression or classification model based on the data, recipe, and model function selected by the user. The resulting model object is returned by the reactive expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  model <- eventReactive(input$build_model, {\n    if (input$model_type == \"regression\") {\n      mod <- fast_regression(\n        .data = data(),\n        .rec_obj = recipe_obj(),\n        .parsnip_eng = model_fn()\n      )\n    } else if (input$model_type == \"classification\") {\n      mod <- fast_classification(\n        .data = data(),\n        .rec_obj = recipe_obj(),\n        .parsnip_eng = model_fn()\n      )\n    }\n    return(mod)\n  })\n```\n:::\n\n\nFinally we output the summary of the `recipe_obj` and print the resulting `tibble` of model(s) to the screen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  output$recipe_output <- renderPrint({\n    if (!is.null(input$predictor_col)) {\n      summary(recipe_obj())\n    }\n  })\n  \n  output$model_table <- renderPrint({\n    if (input$build_model > 0) {\n      print(model())\n    }\n  })\n```\n:::\n\n\nAnd of course, we cannot serve our app until we run the following line:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nI hope you have enjoyed this post. Please steal this code and see what you can do with it. I am trying to figure out how to print the tibble using the DT package so maybe in another post.\n\n# Full Shiny App\n\nHere are some pictures\n![Initial Panel](1.PNG)\n\n![Making a recipe change](2.PNG)\n\n![Single Model Output](3.PNG)\n\n![Two Model Output with one successful failure](4.PNG)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyAML)\nlibrary(recipes)\nlibrary(DT)\nlibrary(glmnet)\n\nui <- fluidPage(\n  titlePanel(\"TidyAML Model Builder\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Upload your data file (csv or txt):\"),\n      selectInput(\"dataset\", \n                  \"Choose a built-in dataset:\", \n                  choices = c(\"mtcars\", \"iris\")\n                  ),\n      selectInput(\"predictor_col\", \n                  \"Select the predictor column:\", \n                  choices = NULL\n                  ),\n      selectInput(\"model_type\", \n                  \"Select a model type:\", \n                  choices = c(\"regression\", \"classification\")),\n      selectInput(\"model_fn\", \"Select a model function:\", \n                  choices = c(\"lm\", \"glm\", \"glmnet\")\n                  ),\n      actionButton(\"build_model\", \"Build Model\"),\n      verbatimTextOutput(\"recipe_output\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"model_table\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  data <- reactive({\n    if (!is.null(input$file)) {\n      df <- read.csv(\n        input$file$datapath, \n        header = TRUE, \n        stringsAsFactors = FALSE\n        )\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n        )\n      return(df)\n    } else if (!is.null(input$dataset)) {\n      df <- get(input$dataset)\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n        )\n      return(df)\n    }\n  })\n  \n  recipe_obj <- eventReactive(input$predictor_col, {\n    rec <- recipe(as.formula(paste(input$predictor_col, \"~ .\")), \n                  data = data()\n                  ) |>\n      step_normalize(all_numeric(), -all_outcomes())\n    return(rec)\n  })\n  \n  model_fn <- reactive({\n    switch(input$model_fn,\n           \"lm\" = \"lm\",\n           \"glm\" = \"glm\",\n           \"glmnet\" = \"glmnet\")\n  })\n  \n  model <- eventReactive(input$build_model, {\n    if (input$model_type == \"regression\") {\n      mod <- fast_regression(.data = data(),\n                             .rec_obj = recipe_obj(),\n                             .parsnip_eng = model_fn())\n    } else if (input$model_type == \"classification\") {\n      mod <- fast_classification(.data = data(),\n                                 .rec_obj = recipe_obj(),\n                                 .parsnip_eng = model_fn())\n    }\n    return(mod)\n  })\n  \n  output$recipe_output <- renderPrint({\n    if (!is.null(input$predictor_col)) {\n      summary(recipe_obj())\n    }\n  })\n  \n  output$model_table <- renderPrint({\n    if (input$build_model > 0) {\n      print(model())\n    }\n  })\n  \n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}