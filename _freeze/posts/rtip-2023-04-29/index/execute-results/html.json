{
  "hash": "7953bd829dfa0e1fcdd26a9cafc8a0bc",
  "result": {
    "markdown": "---\ntitle: \"Building models with {shiny} and {tidyAML} Part 4\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-04-29\"\ncategories: [rtip, shiny, tidymodels, tidyaml]\n---\n\n\n# Introduction\n\nThis is a Shiny app for building models using the [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) which is based on the  `tidymodels` package in R. The app allows you to upload your own data or choose from one of two built-in datasets (mtcars or iris) and select the type of model you want to build (regression or classification).\n\nLet's take a closer look at the code.\n\nFirst, the necessary packages are loaded:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyAML)\nlibrary(recipes)\nlibrary(DT)\nlibrary(glmnet)\nlibrary(rules)\nlibrary(tidymodels)\nlibrary(reactable)\n```\n:::\n\n\nThe `tidymodels_prefer()` function is called to set some default options for the `tidymodels package`, and `load_deps()` from `tidyAML` is called to make sure all the necessary packages are loaded, you can also separately run `install_deps()` to make sure they all get installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidymodels_prefer()\nload_deps()\n```\n:::\n\n\nNext, the user interface (UI) is defined using the `fluidPage()` function. The UI consists of a title panel and a sidebar layout with various input elements, such as file input and select input. There are also two conditional panels that are shown depending on the selected model type (regression or classification). The UI also includes an action button and some output elements, such as `verbatimTextOutput` and `reactableOutput`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"tidyAML Model Builder\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Upload your data file (csv or txt):\"),\n      selectInput(\"dataset\", \n                  \"Choose a built-in dataset:\", \n                  choices = c(\"mtcars\", \"iris\")\n      ),\n      selectInput(\"predictor_col\",\n                  \"Select the predictor column:\",\n                  choices = NULL\n      ),\n      selectInput(\"model_type\", \n                  \"Select a model type:\", \n                  choices = c(\"regression\", \"classification\")\n      ),\n      conditionalPanel(\n        condition = \"input.model_type == 'regression'\",\n        selectInput(\"model_engine\", \n                    \"Select a model engine:\", \n                    choices = c(\"all\", \n                                make_regression_base_tbl() %>% \n                                  pull(.parsnip_engine) %>% \n                                  unique())),\n        selectInput(\"model_fns\", \n                    \"Select a model function:\", \n                    choices = c(\"all\",\n                                make_regression_base_tbl() %>% \n                                  pull(.parsnip_fns) %>% \n                                  unique()))\n      ),\n      \n      conditionalPanel(\n        condition = \"input.model_type == 'classification'\",\n        selectInput(\"model_engine\", \n                    \"Select a model engine:\", \n                    choices = c(\"all\", \n                                make_classification_base_tbl() %>% \n                                  pull(.parsnip_engine) %>% \n                                  unique())),\n        selectInput(\"model_fns\", \n                    \"Select a model function:\", \n                    choices = c(\"all\",\n                                make_classification_base_tbl() %>% \n                                  pull(.parsnip_fns) %>% \n                                  unique())),\n        checkboxInput(\"predictor_factor\",\n                      \"Convert predictor column to factor?\",\n                      value = TRUE)\n      ),\n      actionButton(\"build_model\", \"Build Model\"),\n      verbatimTextOutput(\"recipe_output\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"model_table\"),\n      reactableOutput(\"model_reactable\")\n    )\n  )\n)\n```\n:::\n\n\nAfter defining the UI, the server function is defined. The server function handles the reactive behavior of the app.\n\nThe first reactive element is data, which reads in the data file if one is uploaded or loads the selected built-in dataset if one is chosen. It also converts the predictor column to a factor if the classification model type is selected.\n\nIn the server function, we first define a reactive expression `data()` that will read the data file uploaded by the user or one of the built-in datasets (mtcars or iris). If the user has uploaded a file, the function read.csv is used to read the data, and if it's a classification problem, the predictor column is converted to a factor variable. The `updateSelectInput` function is then called to update the predictor_col select input with the names of the columns in the data. If the user has chosen one of the built-in datasets, it is loaded using the get function, and the same preprocessing is performed.\n\nNext, we define an event reactive `recipe_obj()` that creates a recipes object based on the selected predictor column and normalizes the numeric variables in the data. The step_normalize function standardizes all numeric variables (except the outcome variable) to have mean 0 and standard deviation 1. This is a common preprocessing step in machine learning pipelines that can improve model performance.\n\nTwo reactive expressions, `model_engine()` and `model_fns()`, are then defined to generate the available model engines and functions based on the selected model type. For regression models, the `make_regression_base_tbl` functions are used, and for classification models, the `make_classification_base_tbl` functions are used. These functions return a table with information about the available model engines and functions for a given problem type. The pull function is used to extract the relevant columns from the table, and unique is used to remove duplicate values. The c function is used to concatenate the \"all\" choice with the available model engines or functions.\n\nFinally, an event reactive `model()` is defined that builds the model based on the selected parameters. If the model type is regression, the `fast_regression` function from the tidyAML package is used, and if the model type is classification, the `fast_classification` function is used. These functions take as inputs the data, the recipes object, the selected model engine and function, and any additional model parameters.\n\nThere are three output functions defined in the server: `output$recipe_output`, `output$model_table`, and `output$model_reactable`. The first output function `output$recipe_output` renders a summary of the recipes object created by `recipe_obj()` if the predictor_col input is not null. The second output function `output$model_table` prints the model object returned by `model()` if the `build_model` button has been clicked. The third output function `output$model_reactable` renders a reactive table using the `reactable` function from the `reactable` package if the `build_model` button has been clicked. This table displays the tidyaml_model_tbl.\n\nOverall, this code creates a Shiny web application that allows users to build machine learning models using the tidymodels framework via `{tidyAML}`. Users can upload their own data or use one of the built-in datasets, select a predictor column, choose a model type, select a model engine and function, and build the model. The output is displayed in a table that provides insights into the model's performance and coefficients. This code is useful for data scientists and analysts who want to quickly build and evaluate machine learning models without having to write code from scratch.\n\n# Full Application\n\nAs usual, steal this code and make it your own! See what you can do too!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tidyAML)\nlibrary(recipes)\nlibrary(DT)\nlibrary(glmnet)\nlibrary(rules)\nlibrary(tidymodels)\nlibrary(reactable)\n\ntidymodels_prefer()\n\nui <- fluidPage(\n  titlePanel(\"tidyAML Model Builder\"),\n  sidebarLayout(\n    sidebarPanel(\n      fileInput(\"file\", \"Upload your data file (csv or txt):\"),\n      selectInput(\"dataset\", \n                  \"Choose a built-in dataset:\", \n                  choices = c(\"mtcars\", \"iris\")\n      ),\n      selectInput(\"predictor_col\",\n                  \"Select the predictor column:\",\n                  choices = NULL\n      ),\n      selectInput(\"model_type\", \n                  \"Select a model type:\", \n                  choices = c(\"regression\", \"classification\")\n      ),\n      conditionalPanel(\n        condition = \"input.model_type == 'regression'\",\n        selectInput(\"model_engine\", \n                    \"Select a model engine:\", \n                    choices = c(\"all\", \n                                make_regression_base_tbl() %>% \n                                  pull(.parsnip_engine) %>% \n                                  unique())),\n        selectInput(\"model_fns\", \n                    \"Select a model function:\", \n                    choices = c(\"all\",\n                                make_regression_base_tbl() %>% \n                                  pull(.parsnip_fns) %>% \n                                  unique()))\n      ),\n      \n      conditionalPanel(\n        condition = \"input.model_type == 'classification'\",\n        selectInput(\"model_engine\", \n                    \"Select a model engine:\", \n                    choices = c(\"all\", \n                                make_classification_base_tbl() %>% \n                                  pull(.parsnip_engine) %>% \n                                  unique())),\n        selectInput(\"model_fns\", \n                    \"Select a model function:\", \n                    choices = c(\"all\",\n                                make_classification_base_tbl() %>% \n                                  pull(.parsnip_fns) %>% \n                                  unique())),\n        checkboxInput(\"predictor_factor\",\n                      \"Convert predictor column to factor?\",\n                      value = TRUE)\n      ),\n      actionButton(\"build_model\", \"Build Model\"),\n      verbatimTextOutput(\"recipe_output\")\n    ),\n    mainPanel(\n      verbatimTextOutput(\"model_table\"),\n      reactableOutput(\"model_reactable\")\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  data <- reactive({\n    if (!is.null(input$file)) {\n      df <- read.csv(\n        input$file$datapath, \n        header = TRUE, \n        stringsAsFactors = FALSE\n      )\n      if (input$model_type == \"classification\") {\n        df[[input$predictor_col]] <- as.factor(df[[input$predictor_col]])\n      }\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n      )\n      return(df)\n    } else if (!is.null(input$dataset)) {\n      df <- get(input$dataset)\n      if (input$model_type == \"classification\") {\n        df[[input$predictor_col]] <- as.factor(df[[input$predictor_col]])\n      }\n      updateSelectInput(\n        session, \n        \"predictor_col\", \n        choices = names(df)\n      )\n      return(df)\n    }\n  })\n  \n  recipe_obj <- eventReactive(input$predictor_col, {\n    rec <- recipe(as.formula(paste(input$predictor_col, \"~ .\")), \n                  data = data()\n    ) |>\n      step_normalize(all_numeric(), -all_outcomes())\n    return(rec)\n  })\n  \n  model_engine <- reactive({\n    if (input$model_type == \"regression\") {\n      c(\"all\", \n        make_regression_base_tbl() %>% \n          pull(.parsnip_engine) %>% \n          unique())\n    } else if (input$model_type == \"classification\") {\n      c(\"all\", \n        make_classification_base_tbl() %>% \n          pull(.parsnip_engine) %>% \n          unique())\n    }\n  })\n  \n  model_fns <- reactive({\n    if (input$model_type == \"regression\") {\n      c(\"all\", \n        make_regression_base_tbl() %>% \n          pull(.parsnip_fns) %>% \n          unique())\n    } else if (input$model_type == \"classification\") {\n      c(\"all\", \n        make_classification_base_tbl() %>% \n          pull(.parsnip_fns) %>% \n          unique())\n    }\n  })\n  \n  model <- eventReactive(input$build_model, {\n    if (input$model_type == \"regression\") {\n      mod <- fast_regression(.data = data(),\n                             .rec_obj = recipe_obj(),\n                             .parsnip_eng = model_engine(),\n                             .parsnip_fns = model_fns())\n    } else if (input$model_type == \"classification\") {\n      mod <- fast_classification(.data = data(),\n                                 .rec_obj = recipe_obj(),\n                                 .parsnip_eng = model_engine(),\n                                 .parsnip_fns = model_fns())\n    }\n    return(mod)\n  })\n  \n  output$recipe_output <- renderPrint({\n    if (!is.null(input$predictor_col)) {\n      summary(recipe_obj())\n    }\n  })\n  \n  output$model_table <- renderPrint({\n    if (input$build_model > 0) {\n      print(model())\n    }\n  })\n  \n  output$model_reactable <- renderReactable({\n    if (input$build_model > 0) {\n      reactable(model())\n    }\n  })\n  \n}\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}