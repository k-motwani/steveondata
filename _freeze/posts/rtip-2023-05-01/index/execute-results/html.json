{
  "hash": "92ab5240e51e0f0c5907fad30244b202",
  "result": {
    "markdown": "---\ntitle: \"Extracting a model call from a fitted workflow in {tidymodels}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-05-01\"\ncategories: [rtip, shiny, tidymodels]\n---\n\n\n# Introduction\n\nIn this post, we are using a package called `tidymodels`, which provides a suite of tools for modeling and machine learning.\n\nNow, let's take a closer look at the code itself and how we extract a model call from a fitted `workflow` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n\nrec_obj <- recipe(mpg ~ ., data = mtcars)\nrec_obj\n```\n:::\n\n\nThe first line loads the tidymodels package. Then, we create a \"recipe\" object called `rec_obj` using the `recipe()` function. A recipe is a set of instructions for preparing data for modeling. In this case, we are telling the recipe to use the mpg variable as the outcome or dependent variable, and all other variables in the mtcars dataset as the predictors or independent variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_spec <- linear_reg(mode = \"regression\", engine = \"lm\")\nmodel_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nNext, we create a \"model specification\" object called `model_spec` using the `linear_reg()` function. This specifies the type of model we want to use, which is a linear regression model in this case. We also specify that the model is a regression (i.e., we are predicting a continuous outcome variable) and that the model engine is \"lm\", which stands for \"linear model\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwflw <- workflow() |>\n  add_recipe(rec_obj) |>\n  add_model(model_spec)\nwflw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\nIn the next section of code, we create a \"workflow\" object called `wflw` using the `workflow()` function. A workflow is a way of organizing the steps involved in building a machine learning model. In this case, we are using a \"pipe\" (|>) to sequentially add the recipe and model specification to the workflow. This means that we first add the recipe to the workflow using the `add_recipe()` function, and then add the model specification using the `add_model()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwflw_fit <- fit(wflw, data = mtcars)\nwflw_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\n\nCall:\nstats::lm(formula = ..y ~ ., data = data)\n\nCoefficients:\n(Intercept)          cyl         disp           hp         drat           wt  \n   12.30337     -0.11144      0.01334     -0.02148      0.78711     -3.71530  \n       qsec           vs           am         gear         carb  \n    0.82104      0.31776      2.52023      0.65541     -0.19942  \n```\n:::\n:::\n\n\nFinally, we fit the workflow to the data using the fit() function, which takes the workflow object (wflw) and the data (mtcars) as input. This creates a new object called `wflw_fit`, which is the fitted model object. This object contains various pieces of information about the fitted model, such as the model coefficients and the R-squared value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwflw_fit$fit$fit$fit$call\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstats::lm(formula = ..y ~ ., data = data)\n```\n:::\n:::\n\n\nThe last line of code extracts the actual function call that was used to fit the model. This can be useful for reproducing the analysis later on.\n\nOverall, the code you shared shows how to build a simple linear regression model using the tidymodels package in R. We start by creating a recipe that specifies the outcome variable and predictor variables, then create a model specification for a linear regression model, and finally combine these into a workflow and fit the model to the data.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}