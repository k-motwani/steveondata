{
  "hash": "b3d6a4f869cea9251254c05b880538fa",
  "result": {
    "markdown": "---\ntitle: \"Maps with {shiny}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-05-04\"\ncategories: [rtip, shiny, mapping]\n---\n\n\n\n# Introduction\n\nThe code is used to create a Shiny app that allows the user to search for a type of amenity (such as a pharmacy) in a particular city, state, and country, and then display the results on a map. Here is a step-by-step explanation of how the code works.\n\n# Libraries\n\nThe code starts by loading four libraries - `shiny`, `osmdata`, `mapview`, and `leaflet`. These libraries contain functions that will be used later in the code.\n\n# User Interface\n\nThe user interface (UI) is defined using the `fluidPage` function from the shiny library. The UI consists of four text input boxes, a submit button, and a map output. The four text input boxes allow the user to enter the name of a city, state, and country, as well as the type of amenity they are looking for (e.g., pharmacy).\n\n# Server Function\n\nThe server function is where the \"backend\" of the app is defined. It is responsible for taking the user inputs, performing calculations or processing on them, and returning the output to the UI.\n\nThe server function is defined using the server function from the shiny library. Within the server function, we have an `observeEvent` function that listens for a click on the submit button. When the submit button is clicked, the function inside the `observeEvent` is executed.\n\n## Concatenating the Address\n\nThe first thing that the `observeEvent` function does is concatenate the user inputs for city, state, and country into a single string. This is done using the paste function. The `sep` argument specifies that the words should be separated by a comma and space. The resulting string is the address that will be used to search for the specified amenity.\n\n## Obtaining the Bounding Box\n\nNext, the code uses the `getbb` function from the `osmdata` library to obtain the bounding box for the specified address. A bounding box is a rectangle that contains the entire area of interest (in this case, the specified city, state, and country). The bounding box is necessary to limit the search for the specified amenity to only the specified area.\n\n## Creating the Query\n\nThe code then creates a query object using the opq function from the `osmdata` library. The `bbox` argument specifies the bounding box that was obtained in the previous step. The `add_osm_feature` function is then used to specify the amenity that the user is searching for. The key argument specifies that we are searching for an \"amenity\", and the value argument specifies the specific type of amenity that the user entered (e.g., pharmacy).\n\n## Obtaining the Results\n\nThe `osmdata_sf` function is used to retrieve the results of the query. This function returns a sf object that contains the spatial data for the points that match the specified amenity. The resulting sf object is then passed to the `mapview` function from the `mapview` library, which creates an interactive map of the results.\n\n## Displaying the Map\n\nFinally, the r`enderLeaflet` function is used to display the map in the UI. The `m@map` argument specifies that we want to display the map that was created by the `mapview` function. The resulting map is displayed in the `leafletOutput` that was defined in the UI.\n\n# Conclusion\n\nIn summary, this R code creates a Shiny app that allows the user to search for a specific type of amenity in a particular city, state, and country,\n\n# Full Application\n\nHere is the full script of the app. Please steal this code and modify for yourself, see what you can come up with (PS it needs work for sure).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(osmdata)\nlibrary(mapview)\nlibrary(leaflet)\n\nui <- fluidPage(\n  textInput(\"city\", \"City\", placeholder = \"e.g. Queens\"),\n  textInput(\"state\", \"State\", placeholder = \"e.g. New York\"),\n  textInput(\"country\", \"Country\", placeholder = \"e.g. USA\"),\n  textInput(\"amenity\", \"Amenity Type\", placeholder = \"e.g. pharmacy\"),\n  actionButton(\"submit\", \"Submit\"),\n  leafletOutput(\"map\")\n)\n\nserver <- function(input, output, session) {\n  \n  observeEvent(input$submit, {\n    # Concatenate city, state, and country inputs into a single string\n    address <- paste(input$city, input$state, input$country, sep = \", \")\n    bbox <- getbb(address)\n    query <- opq(bbox = bbox) |>\n      add_osm_feature(key = \"amenity\", value = input$amenity)\n    \n    assign(\"has_internet_via_proxy\", TRUE, environment(curl::has_internet))\n    sf_obj <- osmdata_sf(query)\n    m <- mapview(sf_obj$osm_points)\n    output$map <- renderLeaflet({\n      m@map\n    })\n  })\n  \n}\n\nshinyApp(ui, server)\n```\n:::\n\n\n![Maps with Shiny](Capture.PNG)\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}