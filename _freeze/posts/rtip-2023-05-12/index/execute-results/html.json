{
  "hash": "7f30a6effa4c710b7632103fa7207c41",
  "result": {
    "markdown": "---\ntitle: \"Working with Dates and Times Pt 1\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-05-12\"\ncategories: [rtip, datetime]\n---\n\n\n# Introduction\n\nIn this post, we will cover the basics of handling dates and times in R using the `as.Date`, `as.POSIXct`, and `as.POSIXlt` functions. We will use the example code below to explain each line in simple terms. Let's get started!\n\nHere is the script we are going to look at:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the date object\nSteve_online <- as.Date(\"1981-02-25\")\n\nstr(Steve_online) #Date[1:1], format: \"1981-02-25\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Date[1:1], format: \"1981-02-25\"\n```\n:::\n\n```{.r .cell-code}\nclass(Steve_online) #Date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nas.numeric(Steve_online) # stored as number of days since 1970-01-01\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4073\n```\n:::\n\n```{.r .cell-code}\nas.numeric(as.Date(\"1970-01-01\")) # equals zero\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nas.Date(as.Date(\"1970-01-01\") + 4073) # produces 1981-02-25 -- our original date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1981-02-25\"\n```\n:::\n\n```{.r .cell-code}\n# vectors can contain multiple dates\nSteve_online <- as.Date(c(\"1981-02-25\", \"1997-01-12\"))\nstr(Steve_online)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Date[1:2], format: \"1981-02-25\" \"1997-01-12\"\n```\n:::\n\n```{.r .cell-code}\nSteve_online[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1997-01-12\"\n```\n:::\n\n```{.r .cell-code}\n# what about POSIX?\n# POSIXct stores date time as integer == # seconds since 1970-01-01 UTC\nSteve_online <- as.POSIXct(\"1981-02-25 02:25:00\", tz = \"US/Mountain\")\nas.integer(`Steve_online`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 351941100\n```\n:::\n\n```{.r .cell-code}\n# POSIXlt stores date time as list:sec, min, hour, mday, mon, year, wday, yday, isdst, zone, gmtoff\nSteve_online <- as.POSIXlt(\"1981-02-25 02:25:00\", tz = \"US/Mountain\")\nas.integer(Steve_online) # no longer an integer\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0 25  2 25  1 81  3 55  0 NA NA\n```\n:::\n\n```{.r .cell-code}\nunclass(Steve_online) # this shows the components of the list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sec\n[1] 0\n\n$min\n[1] 25\n\n$hour\n[1] 2\n\n$mday\n[1] 25\n\n$mon\n[1] 1\n\n$year\n[1] 81\n\n$wday\n[1] 3\n\n$yday\n[1] 55\n\n$isdst\n[1] 0\n\n$zone\n[1] \"MST\"\n\n$gmtoff\n[1] NA\n\nattr(,\"tzone\")\n[1] \"US/Mountain\"\n```\n:::\n\n```{.r .cell-code}\nmonth.name[Steve_online$mon + 1] # equals February\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"February\"\n```\n:::\n:::\n\n\nThe first line of code creates a date object called `Steve_online` with the value of February 25, 1981, using the `as.Date` function. This function is used to convert a character string to a date object. The `str` function is then used to show the structure of the `Steve_online` object, which is of class Date.\n\nThe `as.numeric` function is used to convert the `Steve_online` object to the number of days since January 1, 1970 (known as the Unix epoch). This is a common way of representing dates in programming languages, and is useful for calculations involving dates. We also demonstrate that `as.numeric(as.Date(\"1970-01-01\"))` returns zero, since this is the starting point of the Unix epoch.\n\nWe then show how to add or subtract days from a date object by adding or subtracting the desired number of days (as an integer) to the as.Date function with the reference date of January 1, 1970. In this case, we add 4073 days to January 1, 1970, resulting in the date of February 25, 1981 (our original date).\n\nNext, we demonstrate how to create a vector of date objects by passing a character vector of dates to the as.Date function. The `str` function is used again to show the structure of the `Steve_online` object, which is now a vector of two date objects. We then show how to access the second element of the vector using indexing (`Steve_online[2]`).\n\nMoving on to POSIX objects, we introduce the `as.POSIXct` function, which creates a POSIXct object that stores date time as an integer equal to the number of seconds since January 1,",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}