{
  "hash": "83c94d86cb291c09566a9beb83626da9",
  "result": {
    "markdown": "---\ntitle: \"Working with Dates and Times Pt 3\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-05-16\"\ncategories: [rtip, datetime]\n---\n\n\n# Introduction\n\nDates and times are essential components in many programming tasks, and R provides various functions and packages to handle them effectively. In this post, we'll explore some common operations using both the base R functions and the lubridate package, comparing their simplicity and ease of understanding.\n\nLet's dive right in!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# What class does as.Date() produce?\nclass(as.Date(\"1881/10/25\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\n# be sure lubridate \n# install.packages(\"lubridate\")\nlibrary(lubridate)\n\n# Which do you find easier to understand? base or lubridate?\ntoday() # today() = Sys.Date()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-05-16\"\n```\n:::\n\n```{.r .cell-code}\nnow() # now() = Sys.time()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-05-16 08:27:52 EDT\"\n```\n:::\n\n```{.r .cell-code}\n# as_date and as.Date produce the same class\nclass(as_date(\"1881/10/25\")) # lubridate\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\nclass(as.Date(\"1881/10/25\")) # base\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n\n```{.r .cell-code}\n# simpler strptime\nstrptime(\"2014-07-13 16:00:00 -0300\", \"%Y-%m-%d %H:%M:%S %z\") # time zone is messed up\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2014-07-13 15:00:00\"\n```\n:::\n\n```{.r .cell-code}\nparse_date_time(\"2014-07-13 16:00:00 -0300\", \"ymd HMS z\") # time zone works\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2014-07-13 19:00:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\n# lubridate takes it one step further\nymd(\"2014-07-13 16:00:00 -0300\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nymd_hms(\"2014-07-13 16:00:00 -0300\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2014-07-13 19:00:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nmdy_hm(\"July 13, 2014 4:00 pm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2014-07-13 16:00:00 UTC\"\n```\n:::\n:::\n\n\n1️⃣ Determining the Class of a Date:\nThe first line of code checks the class produced by the `as.Date()` function when given the input \"1881/10/25.\" By using the `class()` function, we can identify that the output is of class \"Date.\" This means that the `as.Date()` function converts the input into a date format.\n\n2️⃣ Base R vs. lubridate:\nBefore we proceed further, we need to ensure that the lubridate package is installed. If not, the code installs it using the `install.packages()` function. We then load the package using the `library()` function.\n\nNext, we compare the ease of use between base R and lubridate for working with dates and times.\n\na) Today's Date and Current Time:\nThe `today()` function, equivalent to `Sys.Date()`, gives you the current date. Similarly, `now()` returns the current date and time using `Sys.time()`. These functions make it straightforward to obtain the current date or date and time in R.\n\nb) Class Comparison:\nWe compare the classes of dates produced by `as_date()` from lubridate and `as.Date()` from base R. Using the `class()` function on each result, we observe that both functions produce the same \"Date\" class output. Hence, both methods are equivalent in this regard.\n\n3️⃣ Simplifying Date and Time Parsing:\nParsing date and time strings can sometimes be tricky, especially when dealing with time zones. However, lubridate provides simplified functions to handle such scenarios.\n\na) Base R's `strptime()`:\nThe `strptime()` function is a base R function that parses a date and time string based on a given format. In this case, we try to parse \"2014-07-13 16:00:00 -0300\" with the format \"%Y-%m-%d %H:%M:%S %z.\" However, we encounter a problem with the time zone, as it does not parse correctly.\n\nb) lubridate's `parse_date_time()`:\nTo overcome the time zone issue, lubridate offers the `parse_date_time()` function. We provide the same date and time string along with the format \"ymd HMS z.\" This time, the time zone is parsed correctly, resulting in a valid date and time object.\n\n4️⃣ Going the Extra Mile with lubridate:\nlubridate takes date and time manipulation a step further with its intuitive functions.\n\na) `ymd()`:\nThe `ymd()` function converts a character string of the form \"2014-07-13 16:00:00 -0300\" into a date object. It handles various date formats and automatically infers the year, month, and day information.\n\nb) `ymd_hms()`:\nSimilar to `ymd()`, the `ymd_hms()` function converts a character string into a date-time object, considering the year, month, day, hour, minute, and second components.\n\nc) `mdy_hm()`:\nThe `mdy_hm()` function allows us to parse a character string like \"July 13, 2014 4:00 pm\" into\n\na date-time object. It handles different date formats and automatically extracts the month, day, year, hour, and minute information.\n\nBy leveraging these functions, lubridate simplifies the process of working with dates and times, offering a more intuitive and concise syntax compared to base R.\n\nIn conclusion, understanding how to handle dates and times in R is crucial for many programming tasks. While base R provides essential functions, the lubridate package offers additional capabilities and a more straightforward syntax, making it an attractive choice for working with dates and times in R.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}