{
  "hash": "1e775c2fc77c7365bbb46ed8ced01eb7",
  "result": {
    "markdown": "---\ntitle: \"Working with Dates and Times Pt 4\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-05-17\"\ncategories: [rtip, datetime]\n---\n\n\n# Introduction\n\nFormatting dates is an essential task in data analysis and programming. In R, there are various ways to manipulate and present dates according to specific requirements. In this blog post, we will explore the world of date formatting in R, uncovering the power of the `strftime()` function. We will walk through practical examples using the provided code snippet, demonstrating how to format dates in a clear and concise manner. So, let's dive in and uncover the secrets of date formatting in R!\n\n#Understanding the strftime() Function:\n\nIn R, the `strftime()` function allows us to format dates and times based on a set of predefined modifiers. These modifiers act as placeholders for different components of the date and time. By using these modifiers, we can customize the output format to suit our needs.\n\nLet's analyze the code snippet provided to gain a better understanding of the `strftime()` function and its capabilities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# all of the modifiers\nfor (formatter in sort(c(letters, LETTERS))) {\n  modifier <- paste0(\"%\", formatter)\n  print(\n    paste0(\n      modifier, \n      \" used on: \",\n      RightNow,\n      \" will give: \",\n      strftime(RightNow, modifier)\n    )\n  )\n}\n```\n:::\n\n\nThe code snippet above iterates through a set of modifiers, both lowercase and uppercase letters, and applies each modifier to the `RightNow` variable. It then prints the modifier, the original `RightNow` value, and the formatted output. This allows us to see the effect of each modifier on the date and time representation.\n\n# Modifier Showcase:\nLet's explore some commonly used modifiers and their corresponding output formats:\n\n    %a - Abbreviated weekday name (e.g., \"Mon\").\n    %A - Full weekday name (e.g., \"Monday\").\n    %b - Abbreviated month name (e.g., \"Jan\").\n    %B - Full month name (e.g., \"January\").\n    %d - Day of the month (01-31).\n    %H - Hour in 24-hour format (00-23).\n    %I - Hour in 12-hour format (01-12).\n    %m - Month (01-12).\n    %M - Minute (00-59).\n    %p - AM/PM indicator.\n    %S - Second (00-59).\n    %Y - Year with century (e.g., \"2023\").\n    %y - Year without century (e.g., \"23\").\n\nFeel free to experiment with different modifiers and observe the changes in the output format.\n\nHere is a full example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRightNow <- Sys.time()\n\n# all of the modifiers\nfor (formatter in sort(c(letters, LETTERS))) {\n  modifier <- paste0(\"%\", formatter)\n  print(\n    paste0(\n      modifier, \n      \" used on: \",\n      RightNow,\n      \" will give: \",\n      strftime(RightNow, modifier)\n    )\n  )\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"%a used on: 2023-05-17 09:34:47 will give: Wed\"\n[1] \"%A used on: 2023-05-17 09:34:47 will give: Wednesday\"\n[1] \"%b used on: 2023-05-17 09:34:47 will give: May\"\n[1] \"%B used on: 2023-05-17 09:34:47 will give: May\"\n[1] \"%c used on: 2023-05-17 09:34:47 will give: Wed May 17 09:34:47 2023\"\n[1] \"%C used on: 2023-05-17 09:34:47 will give: 20\"\n[1] \"%d used on: 2023-05-17 09:34:47 will give: 17\"\n[1] \"%D used on: 2023-05-17 09:34:47 will give: 05/17/23\"\n[1] \"%e used on: 2023-05-17 09:34:47 will give: 17\"\n[1] \"%E used on: 2023-05-17 09:34:47 will give: E\"\n[1] \"%f used on: 2023-05-17 09:34:47 will give: f\"\n[1] \"%F used on: 2023-05-17 09:34:47 will give: 2023-05-17\"\n[1] \"%g used on: 2023-05-17 09:34:47 will give: 23\"\n[1] \"%G used on: 2023-05-17 09:34:47 will give: 2023\"\n[1] \"%h used on: 2023-05-17 09:34:47 will give: May\"\n[1] \"%H used on: 2023-05-17 09:34:47 will give: 09\"\n[1] \"%i used on: 2023-05-17 09:34:47 will give: i\"\n[1] \"%I used on: 2023-05-17 09:34:47 will give: 09\"\n[1] \"%j used on: 2023-05-17 09:34:47 will give: 137\"\n[1] \"%J used on: 2023-05-17 09:34:47 will give: J\"\n[1] \"%k used on: 2023-05-17 09:34:47 will give:  9\"\n[1] \"%K used on: 2023-05-17 09:34:47 will give: K\"\n[1] \"%l used on: 2023-05-17 09:34:47 will give:  9\"\n[1] \"%L used on: 2023-05-17 09:34:47 will give: L\"\n[1] \"%m used on: 2023-05-17 09:34:47 will give: 05\"\n[1] \"%M used on: 2023-05-17 09:34:47 will give: 34\"\n[1] \"%n used on: 2023-05-17 09:34:47 will give: \\n\"\n[1] \"%N used on: 2023-05-17 09:34:47 will give: N\"\n[1] \"%o used on: 2023-05-17 09:34:47 will give: o\"\n[1] \"%O used on: 2023-05-17 09:34:47 will give: O\"\n[1] \"%p used on: 2023-05-17 09:34:47 will give: AM\"\n[1] \"%P used on: 2023-05-17 09:34:47 will give: am\"\n[1] \"%q used on: 2023-05-17 09:34:47 will give: q\"\n[1] \"%Q used on: 2023-05-17 09:34:47 will give: Q\"\n[1] \"%r used on: 2023-05-17 09:34:47 will give: 09:34:47 AM\"\n[1] \"%R used on: 2023-05-17 09:34:47 will give: 09:34\"\n[1] \"%s used on: 2023-05-17 09:34:47 will give: 1684330487\"\n[1] \"%S used on: 2023-05-17 09:34:47 will give: 47\"\n[1] \"%t used on: 2023-05-17 09:34:47 will give: \\t\"\n[1] \"%T used on: 2023-05-17 09:34:47 will give: 09:34:47\"\n[1] \"%u used on: 2023-05-17 09:34:47 will give: 3\"\n[1] \"%U used on: 2023-05-17 09:34:47 will give: 20\"\n[1] \"%v used on: 2023-05-17 09:34:47 will give: 17-May-2023\"\n[1] \"%V used on: 2023-05-17 09:34:47 will give: 20\"\n[1] \"%w used on: 2023-05-17 09:34:47 will give: 3\"\n[1] \"%W used on: 2023-05-17 09:34:47 will give: 20\"\n[1] \"%x used on: 2023-05-17 09:34:47 will give: 5/17/2023\"\n[1] \"%X used on: 2023-05-17 09:34:47 will give: 9:34:47 AM\"\n[1] \"%y used on: 2023-05-17 09:34:47 will give: 23\"\n[1] \"%Y used on: 2023-05-17 09:34:47 will give: 2023\"\n[1] \"%z used on: 2023-05-17 09:34:47 will give: -0400\"\n[1] \"%Z used on: 2023-05-17 09:34:47 will give: EDT\"\n```\n:::\n:::\n\n\n# Conclusion\n\nIn this blog post, we explored the `strftime()` function in R, which provides powerful capabilities for formatting dates. By using the various modifiers available, we can easily customize the representation of dates and times to meet our specific requirements. Understanding date formatting is crucial for effective data analysis, visualization, and reporting.\n\nRemember to refer to the R documentation for `strftime()` to discover additional modifiers and advanced formatting options. With the knowledge gained from this blog post, you are now equipped to master date formatting in R and handle dates with confidence in your programming endeavors.\n\nHappy coding with R and may your dates always be formatted to perfection!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}