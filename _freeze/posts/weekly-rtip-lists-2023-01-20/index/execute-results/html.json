{
  "hash": "132b590b75f33785284609ed94d7669c",
  "result": {
    "markdown": "---\ntitle: \"Another Post on Lists\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-20\"\ncategories: [code, rtip, lists]\n---\n\n\n# Introduction\n\nManipulating lists in R is a powerful tool for organizing and analyzing data. Here are a few common ways to manipulate lists:\n\n1. Indexing: Lists can be indexed using square brackets \"[ ]\" and numeric indices. For example, to access the first element of a list called \"mylist\", you would use the expression \"mylist[1]\".\n2. Subsetting: Lists can be subsetted using the same square bracket notation, but with a logical vector indicating which elements to keep. For example, to select all elements of \"mylist\" that are greater than 5, you would use the expression \"mylist[mylist > 5]\".\n3. Modifying elements: Elements of a list can be modified by assigning new values to them using the assignment operator \"<-\". For example, to change the third element of \"mylist\" to 10, you would use the expression \"mylist[3] <- 10\".\n4. Adding elements: New elements can be added to a list using the concatenation operator \"c()\" or the \"append()\" function. For example, to add the number 7 to the end of \"mylist\", you would use the expression \"mylist <- c(mylist, 7)\".\n5. Removing elements: Elements can be removed from a list using the \"-\" operator. For example, to remove the second element of \"mylist\", you would use the expression \"mylist <- mylist[-2]\".\n\n# Examples\n\nHere is an example of how these methods can be used to manipulate a list in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list\nmylist <- c(1, 2, 3, 4, 5)\n\n# Indexing\nmylist[1] # Returns 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\n# Subsetting\nmylist[mylist > 3] # Returns 4 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4 5\n```\n:::\n\n```{.r .cell-code}\n# Modifying elements\nmylist[3] <- 10\nmylist # Returns 1 2 10 4 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2 10  4  5\n```\n:::\n\n```{.r .cell-code}\n# Adding elements\nmylist <- c(mylist, 7)\nmylist # Returns 1 2 10 4 5 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2 10  4  5  7\n```\n:::\n\n```{.r .cell-code}\n# Removing elements\nmylist <- mylist[-3]\nmylist # Returns 1 2 4 5 7\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 4 5 7\n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}