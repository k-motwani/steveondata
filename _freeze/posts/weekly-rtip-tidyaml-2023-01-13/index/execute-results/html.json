{
  "hash": "832e5a7595abce8b444ee5b7d65e0f86",
  "result": {
    "markdown": "---\ntitle: \"The building of {tidyAML}\"\nauthor: \"Steven P. Sanderson II, MPH\"\ndate: \"2023-01-13\"\ncategories: [code, rtip, tidyaml, purrr]\n---\n\n\n# Introduction\n\nYesterday I posted on [An Update to `{tidyAML}`](https://www.spsanderson.com/steveondata/posts/rtip-2023-01-12/) where I was discussing some of my thought process and how things could potentially work for the package.\n\nToday I want to showcase how the function [`fast_regression_parsnip_spec_tbl()`](https://www.spsanderson.com/tidyAML/reference/fast_regression_parsnip_spec_tbl.html) and it's complimentary function [`fast_classification_parsnip_spec_tbl()`](https://www.spsanderson.com/tidyAML/reference/fast_classification_parsnip_spec_tbl.html) actually work or maybe don't work for that matter.\n\nWe are going to pick on `fast_regression_parsnip_spec_tbl()` in today's post. The point of it is that it creates a `tibble` of `parsnip` **regression model specifications**. This will create a `tibble` of 46 different regression model specifications which can be filtered. The model specs are created first and then filtered out. This will only create models for regression problems. To find all of the supported models in this package you can visit [the parsnip search page](https://www.tidymodels.org/find/parsnip/)\n\n# Function\n\nFirst let's take a look at the function call itself.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfast_regression_parsnip_spec_tbl(\n  .parsnip_fns = \"all\", \n  .parsnip_eng = \"all\"\n  )\n```\n:::\n\n\nNow let's take a look at the arguments:\n\n-   `.parsnip_fns` - The default for this is set to all. This means that all of the parsnip linear regression functions will be used, for example linear_reg(), or cubist_rules. You can also choose to pass a `c()` vector like `c(\"linear_reg\",\"cubist_rules\")`\n-   `.parsnip_eng` - The default for this is set to all. This means that all of the parsnip linear regression engines will be used, for example `lm`, or `glm`. You can also choose to pass a `c(`) vector like `c('lm', 'glm')`\n\nThe workhorse to this function is the [`internal_make_spec_tbl()`](https://www.spsanderson.com/tidyAML/reference/internal_make_spec_tbl.html) function. This is the one that will be the subject of the post. Let's take a look at it's inner workings, afterall this is open source.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninternal_make_spec_tbl <- function(.data){\n\n  # Checks ----\n  df <- dplyr::as_tibble(.data)\n\n  nms <- unique(names(df))\n\n  if (!\".parsnip_engine\" %in% nms | !\".parsnip_mode\" %in% nms | !\".parsnip_fns\" %in% nms){\n    rlang::abort(\n      message = \"The model tibble must come from the class/reg to parsnip function.\",\n      use_cli_format = TRUE\n    )\n  }\n\n  # Make tibble ----\n  mod_spec_tbl <- df %>%\n    dplyr::mutate(\n      model_spec = purrr::pmap(\n        dplyr::cur_data(),\n        ~ match.fun(..3)(mode = ..2, engine = ..1)\n      )\n    ) %>%\n    # add .model_id column\n    dplyr::mutate(.model_id = dplyr::row_number()) %>%\n    dplyr::select(.model_id, dplyr::everything())\n\n  # Return ----\n  return(mod_spec_tbl)\n\n}\n```\n:::\n\n\nLet's examine this (and it is currently changing form in a github issue). Firstly, we are taking in a data.frame/tibble that has to have certain names in it (this is going to change and look for a class instead). Once this determination is `TRUE` we then proceed to the meat and potatoes of it. The internal `mod_spec_tbl` is made using `mutate`, `pmap`, `cur_data` and `match.fun`. What this does essentially is the following:\n\n1.  `mutate` a column called `model_spec`\n2.  Use the `{purrr}` function `pmap` which maps over several columns in parallel to create the model spec.\n3.  Inside of the `pmap` we use `cur_data()` to get the current line where we match the function using `match.fun` (which takes a character string of the function, this means the library needs to be loaded) we supply the column it is in and then we supply the arguments we want.\n4.  We give it a numeric model id\n5.  We then ensure that the `.model_id` column is first.\n\n# Example\n\nLet's see it in action!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyAML) # Not yet available, you can install from GitHub though\n\nfast_regression_parsnip_spec_tbl()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 46 × 5\n   .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec\n       <int> <chr>           <chr>         <chr>        <list>    \n 1         1 lm              regression    linear_reg   <spec[+]> \n 2         2 brulee          regression    linear_reg   <spec[+]> \n 3         3 gee             regression    linear_reg   <spec[+]> \n 4         4 glm             regression    linear_reg   <spec[+]> \n 5         5 glmer           regression    linear_reg   <spec[+]> \n 6         6 glmnet          regression    linear_reg   <spec[+]> \n 7         7 gls             regression    linear_reg   <spec[+]> \n 8         8 lme             regression    linear_reg   <spec[+]> \n 9         9 lmer            regression    linear_reg   <spec[+]> \n10        10 stan            regression    linear_reg   <spec[+]> \n# … with 36 more rows\n```\n:::\n:::\n\n\nSo we see we get a nicely generated `tibble` of output that matchs a model spec to the `.model_id` and to the appropriate `parsnip engine` and `mode`\n\nWe can also choose the models we may want by giving either arguments to the `.parsnip_engine` parameter or `.parsnip_fns` or both.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nfast_regression_parsnip_spec_tbl(.parsnip_fns = \"linear_reg\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 5\n   .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec\n       <int> <chr>           <chr>         <chr>        <list>    \n 1         1 lm              regression    linear_reg   <spec[+]> \n 2         2 brulee          regression    linear_reg   <spec[+]> \n 3         3 gee             regression    linear_reg   <spec[+]> \n 4         4 glm             regression    linear_reg   <spec[+]> \n 5         5 glmer           regression    linear_reg   <spec[+]> \n 6         6 glmnet          regression    linear_reg   <spec[+]> \n 7         7 gls             regression    linear_reg   <spec[+]> \n 8         8 lme             regression    linear_reg   <spec[+]> \n 9         9 lmer            regression    linear_reg   <spec[+]> \n10        10 stan            regression    linear_reg   <spec[+]> \n11        11 stan_glmer      regression    linear_reg   <spec[+]> \n```\n:::\n\n```{.r .cell-code}\nfast_regression_parsnip_spec_tbl(.parsnip_eng = c(\"lm\",\"glm\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  .model_id .parsnip_engine .parsnip_mode .parsnip_fns model_spec\n      <int> <chr>           <chr>         <chr>        <list>    \n1         1 lm              regression    linear_reg   <spec[+]> \n2         2 glm             regression    linear_reg   <spec[+]> \n3         3 glm             regression    poisson_reg  <spec[+]> \n```\n:::\n\n```{.r .cell-code}\nfast_regression_parsnip_spec_tbl(.parsnip_eng = \"glm\") %>%\n  pull(model_spec)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nLinear Regression Model Specification (regression)\n\nComputational engine: glm \n\n\n[[2]]\nPoisson Regression Model Specification (regression)\n\nComputational engine: glm \n```\n:::\n:::\n\n\nVoila!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}