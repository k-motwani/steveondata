<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Tue, 11 Apr 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Styling Tables for Excel with {styledTables}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the analytics realm whether some like it or not, Excel is huge and maybe King. This is due to the fact of the shear volume of people using it. Microsoft has positioned Excel well in this situation, but, that does not mean we cannot extend Excel with R. In fact we can do just that. I will be focusing new posts on this topic as I gear up to collaborate on a new project focusing on this issue.</p>
<p>For this post we are going to discuss the <code>{styledTable}</code> R package that can be installed from <code>GitHub</code>. Here are a few ways in which the <strong>styledTable</strong> package can help.</p>
<ul>
<li><p>Creating visually appealing tables: Excel is a powerful tool for data analysis and visualization, but it can be limited in terms of formatting options. With the ‘styledtable’ package, users can create tables with a wide range of formatting options, such as bold text, colored cells, and borders. This can make the tables more visually appealing and easier to read, which can be helpful when presenting data to others.</p></li>
<li><p>Automating data analysis: The ‘styledtable’ package can be used in combination with other R packages to automate data analysis tasks. For example, users can use R to clean and transform data, and then use the ‘styledtable’ package to create formatted tables for reporting or sharing with others. This can save time and reduce errors associated with manual data entry and formatting.</p></li>
<li><p>Integrating with other R packages: R has a large ecosystem of packages for data analysis, visualization, and reporting. The ‘styledtable’ package can be used in conjunction with other R packages to extend the functionality of Excel. For example, users can use R to perform statistical analysis on data, and then use the ‘styledtable’ package to create formatted tables for reporting the results in Excel.</p></li>
<li><p>Facilitating collaboration: Sharing Excel files can be challenging when working with multiple users or teams. With the ‘styledtable’ package, users can export styled tables to Excel format, which can be shared with others. This can facilitate collaboration and streamline the process of sharing data and analysis results.</p></li>
</ul>
<p>The <code>styledtable</code> package in R, which allows users to create styled tables in R Markdown documents. The package can help to create tables with various formatting options such as bold text, colored cells, and borders. It also has functionality on how to port these to Excel itself.</p>
<p>The package offers a simple syntax that allows users to specify formatting options using HTML and CSS. The resulting table can be customized by changing the CSS file or by using the ‘styler’ function to apply custom styles to individual cells or rows.</p>
<p>Overall, the <code>styledtable</code> package provides a useful tool for creating visually appealing tables in R Markdown documents, and the ability to export these tables to Excel format makes it easier to share and analyze data with others.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Install development version from GitHub</span></span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">'R-package/styledTables'</span>, <span class="at" style="color: #657422;">build_vignettes =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(styledTables)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(xlsx)</span>
<span id="cb2-4"></span>
<span id="cb2-5">df <span class="ot" style="color: #003B4F;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, am)</span>
<span id="cb2-7"></span>
<span id="cb2-8">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                     mpg cyl am
Mazda RX4           21.0   6  1
Mazda RX4 Wag       21.0   6  1
Datsun 710          22.8   4  1
Hornet 4 Drive      21.4   6  0
Hornet Sportabout   18.7   8  0
Valiant             18.1   6  0
Duster 360          14.3   8  0
Merc 240D           24.4   4  0
Merc 230            22.8   4  0
Merc 280            19.2   6  0
Merc 280C           17.8   6  0
Merc 450SE          16.4   8  0
Merc 450SL          17.3   8  0
Merc 450SLC         15.2   8  0
Cadillac Fleetwood  10.4   8  0
Lincoln Continental 10.4   8  0
Chrysler Imperial   14.7   8  0
Fiat 128            32.4   4  1
Honda Civic         30.4   4  1
Toyota Corolla      33.9   4  1
Toyota Corona       21.5   4  0
Dodge Challenger    15.5   8  0
AMC Javelin         15.2   8  0
Camaro Z28          13.3   8  0
Pontiac Firebird    19.2   8  0
Fiat X1-9           27.3   4  1
Porsche 914-2       26.0   4  1
Lotus Europa        30.4   4  1
Ford Pantera L      15.8   8  1
Ferrari Dino        19.7   6  1
Maserati Bora       15.0   8  1
Volvo 142E          21.4   4  1</code></pre>
</div>
</div>
<p>Ok, now we have our data that we are going to work with, so let’s check out some features.</p>
<p>First we will just apply the <code>styled_table()</code> function and inspect the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">stl_df <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">styled_table</span>(<span class="at" style="color: #657422;">keep_header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">class</span>(stl_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "StyledTable"
attr(,"package")
[1] "styledTables"</code></pre>
</div>
</div>
<p>Now let’s apply some simple formatting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">stl_df <span class="ot" style="color: #003B4F;">&lt;-</span> stl_df <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">set_border_position</span>(<span class="st" style="color: #20794D;">"all"</span>, <span class="at" style="color: #657422;">row_id =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">set_bold</span>(<span class="at" style="color: #657422;">row_id =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">set_fill_color</span>(<span class="st" style="color: #20794D;">"#00FF00"</span>, <span class="at" style="color: #657422;">col_id =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">condition =</span> X <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"6"</span>)</span></code></pre></div>
</div>
<p>Write out to excel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">wb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createWorkbook</span>()</span>
<span id="cb7-2">sheet <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createSheet</span>(wb, <span class="st" style="color: #20794D;">"mtcars_tbl"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Insert table</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">write_excel</span>(sheet, stl_df)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># Save workbook</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">saveWorkbook</span>(wb, <span class="st" style="color: #20794D;">"test.xlsx"</span>)</span></code></pre></div>
</div>
<p>Here is the test output:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/example.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Test Output</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>rtip</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/index.html</guid>
  <pubDate>Tue, 11 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/example.JPG" medium="image"/>
</item>
<item>
  <title>Reading in Multiple Excel Sheets with lapply and {readxl}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-07/index.html</link>
  <description><![CDATA[ 




<section id="intruduction" class="level1">
<h1>Intruduction</h1>
<p>Reading in an Excel file with multiple sheets can be a daunting task, especially for users who are not familiar with the process. In this blog post, we will walk through a sample function that can be used to read in an Excel file with multiple sheets using the R programming language.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The function we will be using is called <code>excel_sheet_reader()</code>. This function takes one argument: <code>filename</code>, which is the name of the Excel file we want to read in. This function, since it is using the <code>{readxl}</code> package will automatically read that data to a tibble.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">excel_sheet_reader <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(filename) {</span>
<span id="cb1-2">  sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheets</span>(filename)</span>
<span id="cb1-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(sheets, <span class="cf" style="color: #003B4F;">function</span>(X) <span class="fu" style="color: #4758AB;">read_excel</span>(filename, <span class="at" style="color: #657422;">sheet =</span> X))</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">names</span>(x) <span class="ot" style="color: #003B4F;">&lt;-</span> sheets</span>
<span id="cb1-5">  x</span>
<span id="cb1-6">}</span></code></pre></div>
</div>
<p>The first thing the <code>excel_sheet_reader()</code> function does is to determine the names of all the sheets in the Excel file using the excel_sheets function from the readxl package. This function returns a character vector containing the names of all the sheets in the Excel file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheets</span>(filename)</span></code></pre></div>
</div>
<p>Next, the function uses the <code>lapply</code> function to loop through all the sheet names and read in each sheet using the <code>read_excel()</code> function, also from the <code>readxl</code> package. This function takes two arguments: filename, which is the name of the Excel file, and sheet, which is the name of the sheet we want to read in. The <code>lapply</code> function returns a list containing all the sheets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(sheets, <span class="cf" style="color: #003B4F;">function</span>(X) <span class="fu" style="color: #4758AB;">read_excel</span>(filename, <span class="at" style="color: #657422;">sheet =</span> X))</span></code></pre></div>
</div>
<p>Finally, the function uses the names function to assign the sheet names to the list of sheets and returns the list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">names</span>(x) <span class="ot" style="color: #003B4F;">&lt;-</span> sheets</span>
<span id="cb4-2">x</span></code></pre></div>
</div>
<p>Now that we have explained the <code>excel_sheet_reader()</code> function, let’s use it to read in the iris and mtcars datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">library</span>(writexl)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">library</span>(readxl)</span>
<span id="cb5-5"></span>
<span id="cb5-6">iris <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">named_item_list</span>(Species) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">write_xlsx</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"iris.xlsx"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10">mtcars <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;">named_item_list</span>(cyl) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;">write_xlsx</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"mtcars.xlsx"</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14">iris_sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheet_reader</span>(<span class="st" style="color: #20794D;">"iris.xlsx"</span>)</span>
<span id="cb5-15">mtcars_sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheet_reader</span>(<span class="st" style="color: #20794D;">"mtcars.xlsx"</span>)</span></code></pre></div>
</div>
<p>Now lets see the structure of each file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">iris_sheets</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$setosa
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# ℹ 40 more rows

$versicolor
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     
 1          7           3.2          4.7         1.4 versicolor
 2          6.4         3.2          4.5         1.5 versicolor
 3          6.9         3.1          4.9         1.5 versicolor
 4          5.5         2.3          4           1.3 versicolor
 5          6.5         2.8          4.6         1.5 versicolor
 6          5.7         2.8          4.5         1.3 versicolor
 7          6.3         3.3          4.7         1.6 versicolor
 8          4.9         2.4          3.3         1   versicolor
 9          6.6         2.9          4.6         1.3 versicolor
10          5.2         2.7          3.9         1.4 versicolor
# ℹ 40 more rows

$virginica
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    
 1          6.3         3.3          6           2.5 virginica
 2          5.8         2.7          5.1         1.9 virginica
 3          7.1         3            5.9         2.1 virginica
 4          6.3         2.9          5.6         1.8 virginica
 5          6.5         3            5.8         2.2 virginica
 6          7.6         3            6.6         2.1 virginica
 7          4.9         2.5          4.5         1.7 virginica
 8          7.3         2.9          6.3         1.8 virginica
 9          6.7         2.5          5.8         1.8 virginica
10          7.2         3.6          6.1         2.5 virginica
# ℹ 40 more rows</code></pre>
</div>
</div>
<p>Now <code>mtcars_sheets</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mtcars_sheets</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`4`
# A tibble: 11 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
11  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2

$`6`
# A tibble: 7 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4
7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6

$`8`
# A tibble: 14 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
 4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
 5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 7  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
11  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
12  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2
13  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
14  15       8  301    335  3.54  3.57  14.6     0     1     5     8</code></pre>
</div>
</div>
<p>And that’s it! Hope this has been helpful!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>readxl</category>
  <category>lapply</category>
  <category>healthyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-07/index.html</guid>
  <pubDate>Fri, 07 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A New Package for the African Stock Market {BRVM}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/brvm-logo.png" class="img-fluid figure-img" width="147"></p>
<p></p><figcaption class="figure-caption">BRVM</figcaption><p></p>
</figure>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This R package provides a user-friendly interface for accessing data from the <a href="https://github.com/Koffi-Fredysessie/BRVM"><code>{BRVM}</code></a>, which is a regional stock exchange serving multiple West African countries. With this package, users can easily retrieve historical stock price data, trading volumes, and other financial indicators for a variety of stocks traded on the BRVM.</p>
<p>The package is designed to simplify the process of gathering and analyzing financial data, making it easier for researchers, investors, and other users to extract insights and make informed decisions based on the information available. Overall, BRVM library is a valuable tool for anyone looking to gain a better understanding of the BRVM and the financial markets in West Africa.</p>
<p>For now, you can install from <strong>GitHub</strong> until it is on CRAN (It is on the way)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># github dev version</span></span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## We can use devtools</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># install.packages("devtools")</span></span>
<span id="cb1-4">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"Koffi-Fredysessie/BRVM"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Or use remotes</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># install.packages("remotes")</span></span>
<span id="cb1-8">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"Koffi-Fredysessie/BRVM"</span>)</span></code></pre></div>
</div>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>First, let’s load in the <em>BRVM</em> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(BRVM)</span></code></pre></div>
</div>
<section id="the-brvm_ticker_desc-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_ticker_desc-function">The <strong>BRVM_ticker_desc()</strong> function</h2>
<p>It receives no argument and returns BRVM tickers information such as its full name, sector and country.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Display tickers of BRVM</span></span>
<span id="cb3-2">tickers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_ticker_desc</span>()</span>
<span id="cb3-3">tickers</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: package 'kableExtra' was built under R version 4.2.3</code></pre>
</div>
<div class="cell-output-display">

<table class="table table-striped" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> Ticker </th>
   <th style="text-align:left;"> Company name </th>
   <th style="text-align:left;"> Sector </th>
   <th style="text-align:left;"> Country </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> ABJC </td>
   <td style="text-align:left;"> SERVAIR ABIDJAN  COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BICC </td>
   <td style="text-align:left;"> BICI COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BNBC </td>
   <td style="text-align:left;"> BERNABE COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAB </td>
   <td style="text-align:left;"> BANK OF AFRICA BENIN </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BENIN </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOABF </td>
   <td style="text-align:left;"> BANK OF AFRICA BURKINA FASO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAC </td>
   <td style="text-align:left;"> BANK OF AFRICA COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAM </td>
   <td style="text-align:left;"> BANK OF AFRICA MALI </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> MALI </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAN </td>
   <td style="text-align:left;"> BANK OF AFRICA NIGER </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> NIGER </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAS </td>
   <td style="text-align:left;"> BANK OF AFRICA SENEGAL </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CABC </td>
   <td style="text-align:left;"> SICABLE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CBIBF </td>
   <td style="text-align:left;"> CORIS BANK INTERNATIONAL BURKINA FASO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CFAC </td>
   <td style="text-align:left;"> CFAO MOTORS COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CIEC </td>
   <td style="text-align:left;"> CIE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ECOC </td>
   <td style="text-align:left;"> ECOBANK COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ETIT </td>
   <td style="text-align:left;"> Ecobank Transnational Incorporated TOGO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> TOGO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> FTSC </td>
   <td style="text-align:left;"> FILTISAC COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NEIC </td>
   <td style="text-align:left;"> NEI-CEDA COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NSBC </td>
   <td style="text-align:left;"> NSIA BANQUE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NTLC </td>
   <td style="text-align:left;"> NESTLE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ONTBF </td>
   <td style="text-align:left;"> ONATEL BURKINA FASO </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ORAC </td>
   <td style="text-align:left;"> ORANGE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ORGT </td>
   <td style="text-align:left;"> ORAGROUP TOGO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> TOGO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> PALC </td>
   <td style="text-align:left;"> PALM COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> PRSC </td>
   <td style="text-align:left;"> TRACTAFRIC MOTORS COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SAFC </td>
   <td style="text-align:left;"> SAFCA COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SCRC </td>
   <td style="text-align:left;"> SUCRIVOIRE COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SDCC </td>
   <td style="text-align:left;"> SODE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SDSC </td>
   <td style="text-align:left;"> BOLLORE TRANSPORT &amp; LOGISTICS COTE D'IVOIRE </td>
   <td style="text-align:left;"> TRANSPORT </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SEMC </td>
   <td style="text-align:left;"> CROWN SIEM COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SGBC </td>
   <td style="text-align:left;"> SOCIETE GENERALE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SHEC </td>
   <td style="text-align:left;"> VIVO ENERGY COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SIBC </td>
   <td style="text-align:left;"> SOCIETE IVOIRIENNE DE BANQUE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SICC </td>
   <td style="text-align:left;"> SICOR COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SIVC </td>
   <td style="text-align:left;"> AIR LIQUIDE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SLBC </td>
   <td style="text-align:left;"> SOLIBRA COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SMBC </td>
   <td style="text-align:left;"> SMB COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SNTS </td>
   <td style="text-align:left;"> SONATEL SENEGAL </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SOGC </td>
   <td style="text-align:left;"> SOGB COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SPHC </td>
   <td style="text-align:left;"> SAPH COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> STAC </td>
   <td style="text-align:left;"> SETAO COTE D'IVOIRE </td>
   <td style="text-align:left;"> OTHER </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> STBC </td>
   <td style="text-align:left;"> SITAB COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SVOC </td>
   <td style="text-align:left;"> MOVIS COTE D'IVOIRE </td>
   <td style="text-align:left;"> TRANSPORT </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTLC </td>
   <td style="text-align:left;"> TOTAL COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTLS </td>
   <td style="text-align:left;"> TOTAL SENEGAL </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTRC </td>
   <td style="text-align:left;"> TRITURAF Ste en Liquid </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> UNLC </td>
   <td style="text-align:left;"> UNILEVER COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> UNXC </td>
   <td style="text-align:left;"> UNIWAX COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
</tbody>
</table>

</div>
</div>
</section>
<section id="the-brvm_index-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_index-function">The <strong>BRVM_index()</strong> function :</h2>
<p>It receives no argument and returns a table of updated data (with as table header: indexes, previous closing, closing, change (%), Year to Date Change) on all the indices available on the BRVM exchange.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table table-striped" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> Indexes </th>
   <th style="text-align:right;"> Previous closing </th>
   <th style="text-align:right;"> Closing </th>
   <th style="text-align:right;"> Change (%) </th>
   <th style="text-align:right;"> Year to Date Change </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> BRVM-30 </td>
   <td style="text-align:right;"> 99.71 </td>
   <td style="text-align:right;"> 99.75 </td>
   <td style="text-align:right;"> 0.04 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - AGRICULTURE </td>
   <td style="text-align:right;"> 281.76 </td>
   <td style="text-align:right;"> 281.25 </td>
   <td style="text-align:right;"> -0.18 </td>
   <td style="text-align:right;"> -0.66 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - OTHER SECTOR </td>
   <td style="text-align:right;"> 1295.58 </td>
   <td style="text-align:right;"> 1357.27 </td>
   <td style="text-align:right;"> 4.76 </td>
   <td style="text-align:right;"> -7.32 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - COMPOSITE </td>
   <td style="text-align:right;"> 199.37 </td>
   <td style="text-align:right;"> 199.46 </td>
   <td style="text-align:right;"> 0.05 </td>
   <td style="text-align:right;"> 0.85 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - DISTRIBUTION </td>
   <td style="text-align:right;"> 346.02 </td>
   <td style="text-align:right;"> 345.33 </td>
   <td style="text-align:right;"> -0.20 </td>
   <td style="text-align:right;"> 0.69 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - FINANCE </td>
   <td style="text-align:right;"> 74.53 </td>
   <td style="text-align:right;"> 75.03 </td>
   <td style="text-align:right;"> 0.67 </td>
   <td style="text-align:right;"> -0.66 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - INDUSTRY </td>
   <td style="text-align:right;"> 98.33 </td>
   <td style="text-align:right;"> 98.10 </td>
   <td style="text-align:right;"> -0.23 </td>
   <td style="text-align:right;"> 0.92 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PRESTIGE </td>
   <td style="text-align:right;"> 102.61 </td>
   <td style="text-align:right;"> 102.56 </td>
   <td style="text-align:right;"> -0.05 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PRINCIPAL </td>
   <td style="text-align:right;"> 94.56 </td>
   <td style="text-align:right;"> 94.62 </td>
   <td style="text-align:right;"> 0.06 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PUBLIC SERVICES </td>
   <td style="text-align:right;"> 480.97 </td>
   <td style="text-align:right;"> 479.60 </td>
   <td style="text-align:right;"> -0.28 </td>
   <td style="text-align:right;"> 2.23 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - TRANSPORT </td>
   <td style="text-align:right;"> 345.28 </td>
   <td style="text-align:right;"> 341.70 </td>
   <td style="text-align:right;"> -1.04 </td>
   <td style="text-align:right;"> 0.35 </td>
  </tr>
</tbody>
</table>

</div>
</div>
</section>
<section id="the-brvm_get.symbol-.from-.to-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_get.symbol-.from-.to-function">The <strong>BRVM_get(“.symbol”, “.from”, “.to”)</strong> function</h2>
<p>This function will get the data of the companies listed on the BVRM stock exchange in Rich Bourse website. The function takes a single parameter, <code>.symbol</code> (which represents the “Ticker”). The function will automatically format tickers you enter in uppercase using toupper() and then ensure that the passed ticker is in a Google spreadsheet of allowed tickers.</p>
<ul>
<li>.symbol : A vector of symbols, like: c(“BICC”,“XOM”,“SlbC”) ;</li>
<li>.from : A quoted start date, ie. “2020-01-01” or “2020/01/01”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD” ;</li>
<li>.to : A quoted end date, ie. “2022-01-31” or “2022/01/31”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#' Displaying data of SONATEL Senegal stock</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">BRVM_get</span>(<span class="at" style="color: #657422;">.symbol =</span> <span class="st" style="color: #20794D;">"snts"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "SNTS"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 251 × 6
   Date        Open  High   Low Close Volume
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 2022-04-06 15800 15895 15750 15800   7436
 2 2022-04-07 15800 15900 15750 15900   1265
 3 2022-04-08 15900 15995 15800 15900   1164
 4 2022-04-11 15895 15900 15800 15800   4252
 5 2022-04-12 15800 15800 15780 15800   6561
 6 2022-04-13 15800 15865 15795 15850   5409
 7 2022-04-14 15855 15900 15850 15900  16957
 8 2022-04-15 15995 15995 15900 15900    791
 9 2022-04-19 15900 15995 15895 15900  31217
10 2022-04-20 15900 15995 15895 15990  32322
# ℹ 241 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">symbols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"BiCc"</span>,<span class="st" style="color: #20794D;">"XOM"</span>,<span class="st" style="color: #20794D;">"SlbC"</span>)   <span class="co" style="color: #5E5E5E;"># We use here three tickers</span></span>
<span id="cb8-2">data_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get</span>(<span class="at" style="color: #657422;">.symbol =</span> symbols, <span class="at" style="color: #657422;">.from =</span> <span class="st" style="color: #20794D;">"2020-01-01"</span>, <span class="at" style="color: #657422;">.to =</span> <span class="fu" style="color: #4758AB;">Sys.Date</span>() <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "BICC" "SLBC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Display the first twenty observations of the table</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">head</span>(data_tbl, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2020-01-10  6500  6500  6500  6500     24 BICC  
 2 2020-01-13  6370  6500  6370  6500     29 BICC  
 3 2020-01-14  6495  6495  6495  6495     10 BICC  
 4 2020-01-29  6010  6010  6010  6010     24 BICC  
 5 2020-01-30  6000  6000  6000  6000     50 BICC  
 6 2020-02-04  5800  5800  5800  5800     12 BICC  
 7 2020-02-07  5650  5650  5650  5650      5 BICC  
 8 2020-02-10  5500  5500  5500  5500      5 BICC  
 9 2020-02-14  5300  5300  5300  5300      9 BICC  
10 2020-02-17  4910  4910  4910  4910    210 BICC  
11 2020-02-18  4910  4910  4910  4910     50 BICC  
12 2020-02-20  4895  4895  4895  4895      5 BICC  
13 2020-02-21  4895  4895  4890  4890     13 BICC  
14 2020-02-25  4525  4525  4525  4525     16 BICC  
15 2020-02-26  4435  4435  4430  4430     21 BICC  
16 2020-02-27  4345  4760  4335  4760   1809 BICC  
17 2020-03-03  4745  4750  4745  4750     11 BICC  
18 2020-03-05  4700  4700  4700  4700      5 BICC  
19 2020-03-06  4695  4695  4695  4695      6 BICC  
20 2020-03-11  4345  4450  4345  4450    135 BICC  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Display the last twenty elements of the table</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">tail</span>(data_tbl, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2023-02-15 80000 80000 79000 79000      2 SLBC  
 2 2023-02-17 78000 78000 78000 78000      5 SLBC  
 3 2023-02-21 80000 80000 80000 80000      5 SLBC  
 4 2023-02-23 80000 80000 80000 80000     18 SLBC  
 5 2023-02-24 80000 80000 80000 80000      6 SLBC  
 6 2023-02-27 80000 80000 80000 80000     98 SLBC  
 7 2023-02-28 80000 80000 80000 80000     11 SLBC  
 8 2023-03-02 80000 80000 80000 80000     11 SLBC  
 9 2023-03-08 80000 80000 80000 80000      2 SLBC  
10 2023-03-09 80000 80000 80000 80000      2 SLBC  
11 2023-03-13 80005 80005 80000 80000     12 SLBC  
12 2023-03-14 80000 80000 80000 80000      1 SLBC  
13 2023-03-20 80000 80000 80000 80000      3 SLBC  
14 2023-03-21 80000 80000 80000 80000      4 SLBC  
15 2023-03-27 78000 80000 78000 80000    169 SLBC  
16 2023-03-28 80000 80000 80000 80000    435 SLBC  
17 2023-03-30 80000 80000 80000 80000      3 SLBC  
18 2023-03-31 80000 80000 80000 80000      1 SLBC  
19 2023-04-04 80000 86000 80000 86000      3 SLBC  
20 2023-04-05 85950 86000 85950 86000      6 SLBC  </code></pre>
</div>
</div>
</section>
<section id="the-brvm_get1ticker-period-from-to-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_get1ticker-period-from-to-function">The <strong>BRVM_get1(“ticker”, “Period”, “from”, “to”)</strong> function</h2>
<p>This function will get data of the companies listed on the BVRM stock exchange through the sikafinance site. The function takes in a single parameter of ticker and will auto-format the tickers you input into all upper case by using <code>toupper()</code></p>
<ul>
<li>ticker : A vector of ticker, like: c(“BICC”,“XOM”,“SlbC”, “BRvm10”);</li>
<li>Period : Numeric number indicating time period. Valid entries are 0, 1, 5, 30, 91, and 365 representing respectively ‘daily’, ‘one year’, ‘weekly’, ‘monthly’, ‘quarterly’ and ‘yearly’;</li>
<li>from : A quoted start date, ie. “2020-01-01” or “2020/01/01”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”;</li>
<li>to : A quoted end date, ie. “2022-01-31” or “2022/01/31”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”</li>
</ul>
<p>** NB : There is a small difference between the BRVM_get and BRVM_get1 functions. * With BRVM_get it is only possible to download tickers’ daily data. * But with BRVM_get1, you can download daily, weekly, monthly, annual tickers’ data, indices and even market capitalization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#' Displaying data of SONATEL Senegal stock</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="st" style="color: #20794D;">"snts"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Make sure you have an active internet connection"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Get daily data of all indexes</span></span>
<span id="cb16-2">all_ind <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="st" style="color: #20794D;">"ALL INDEXES"</span>, <span class="at" style="color: #657422;">Period =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">from =</span> <span class="st" style="color: #20794D;">"2020-01-04"</span>, <span class="at" style="color: #657422;">to =</span> <span class="st" style="color: #20794D;">"2023-03-24"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "We obtained BRVM10 data from 2019-12-26 to 2023-01-04"
[1] "We obtained BRVMAG data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMC data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMAS data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMDI data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMFI data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMIN data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMSP data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMTR data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMPR data from 2023-01-01 to 2023-03-24"
[1] "We obtained BRVMPA data from 2023-01-04 to 2023-03-24"
[1] "We obtained BRVM30 data from 2023-01-01 to 2023-03-24"
[1] "We obtained CAPIB data from 2020-01-02 to 2023-03-24"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># display the first two tens elements of the table</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">head</span>(all_ind, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2022-12-26  169.  169.  169.  169.      0 BRVM10
 2 2022-12-27  169.  169.  169.  169.      0 BRVM10
 3 2022-12-28  167.  167.  167.  167.      0 BRVM10
 4 2022-12-29  167.  167.  167.  167.      0 BRVM10
 5 2022-12-30  166.  166.  166.  166.      0 BRVM10
 6 2023-01-02  166.  166.  166.  166.      0 BRVM10
 7 2023-01-03  166.  166.  166.  166.      0 BRVM10
 8 2023-01-04  166.  166.  166.  166.      0 BRVM10
 9 2022-09-26  163.  163.  163.  163.      0 BRVM10
10 2022-09-27  162.  162.  162.  162.      0 BRVM10
11 2022-09-28  162.  162.  162.  162.      0 BRVM10
12 2022-09-29  163.  163.  163.  163.      0 BRVM10
13 2022-09-30  164.  164.  164.  164.      0 BRVM10
14 2022-10-03  162.  162.  162.  162.      0 BRVM10
15 2022-10-04  162.  162.  162.  162.      0 BRVM10
16 2022-10-05  161.  161.  161.  161.      0 BRVM10
17 2022-10-06  161.  161.  161.  161.      0 BRVM10
18 2022-10-07  161.  161.  161.  161.      0 BRVM10
19 2022-10-10  160.  160.  160.  160.      0 BRVM10
20 2022-10-11  160.  160.  160.  160.      0 BRVM10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># display the two tens of the last elements of the table</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;">tail</span>(all_ind, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date          Open    High     Low   Close Volume Ticker
   &lt;date&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2020-02-26 4281311 4281311 4281311 4281311      0 CAPIB 
 2 2020-02-27 4314933 4314933 4314933 4314933      0 CAPIB 
 3 2020-02-28 4346515 4346515 4346515 4346515      0 CAPIB 
 4 2020-03-02 4424073 4424073 4424073 4424073      0 CAPIB 
 5 2020-03-03 4379647 4379647 4379647 4379647      0 CAPIB 
 6 2020-03-04 4369550 4369550 4369550 4369550      0 CAPIB 
 7 2020-03-05 4342229 4342229 4342229 4342229      0 CAPIB 
 8 2020-03-06 4359879 4359879 4359879 4359879      0 CAPIB 
 9 2020-03-09 4338293 4338293 4338293 4338293      0 CAPIB 
10 2020-03-10 4357221 4357221 4357221 4357221      0 CAPIB 
11 2020-03-11 4332656 4332656 4332656 4332656      0 CAPIB 
12 2020-03-12 4318096 4318096 4318096 4318096      0 CAPIB 
13 2020-03-13 4318112 4318112 4318112 4318112      0 CAPIB 
14 2020-03-16 4285184 4285184 4285184 4285184      0 CAPIB 
15 2020-03-17 4301727 4301727 4301727 4301727      0 CAPIB 
16 2020-03-18 4288582 4288582 4288582 4288582      0 CAPIB 
17 2020-03-19 4207231 4207231 4207231 4207231      0 CAPIB 
18 2020-03-20 4209788 4209788 4209788 4209788      0 CAPIB 
19 2020-03-23 4154445 4154445 4154445 4154445      0 CAPIB 
20 2020-03-24 4144325 4144325 4144325 4144325      0 CAPIB </code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># To get yearly data</span></span>
<span id="cb22-2">yearly_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"brvmtr"</span>, <span class="st" style="color: #20794D;">"BiCc"</span>, <span class="st" style="color: #20794D;">"BOAS"</span>), <span class="at" style="color: #657422;">Period =</span> <span class="dv" style="color: #AD0000;">365</span> ) </span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;"># display the first two tens elements of the table</span></span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;">head</span>(yearly_data, <span class="dv" style="color: #AD0000;">20</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   Date         Open   High    Low  Close Ticker
   &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2003-04-11   74.0   88.6   73.6   88.6 BRVMTR
 2 2004-01-02   88.6   89.2   72.9   89.2 BRVMTR
 3 2005-01-03   89.2  107.    70.7  104.  BRVMTR
 4 2006-01-02  104.   158.   104.   153.  BRVMTR
 5 2007-01-02  153.   275.   149.   249.  BRVMTR
 6 2008-01-02  249.   386.   226.   296.  BRVMTR
 7 2009-01-02  275.   296.   227.   236.  BRVMTR
 8 2010-01-04  236.   259.   224.   238.  BRVMTR
 9 2011-01-03  238.   249.   204.   239   BRVMTR
10 2012-01-02  239    349.   201.   349.  BRVMTR
11 2013-01-02  349.   794.   339.   789.  BRVMTR
12 2014-01-02  789.  1213.   601.  1213.  BRVMTR
13 2015-01-02 1213.  1525.   653.  1525.  BRVMTR
14 2016-01-04 1525.  1525.  1216.  1432.  BRVMTR
15 2017-01-02 1432.  1433.   764.  1203.  BRVMTR
16 2018-01-02 1114.  1193.   966.   966.  BRVMTR
17 2019-06-03  403.   429.   311.   367.  BRVMTR
18 2020-01-01  367.   475.   292.   379.  BRVMTR
19 2021-01-04  376.   622.   325    622.  BRVMTR
20 2022-01-03  667.   667.   295.   342.  BRVMTR</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># display the two tens of the last elements of the table</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">tail</span>(yearly_data, <span class="dv" style="color: #AD0000;">20</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   Date        Open  High   Low Close Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 
 1 2014-01-02  5650  7848  5650  7800 BICC  
 2 2015-01-02  8385 10750  7800 10100 BICC  
 3 2016-01-04 10000 10700  8566  9890 BICC  
 4 2017-01-05  9750 10000  6440  8490 BICC  
 5 2018-01-02  8700  8750  3795  7900 BICC  
 6 2019-01-04  7550  7550  3710  6800 BICC  
 7 2020-01-01  6800  6890  2855  6680 BICC  
 8 2021-01-04  6680  7525  4280  7400 BICC  
 9 2022-01-03  7250  7250  5550  6850 BICC  
10 2023-01-02  6500  6850  5785  6275 BICC  
11 2014-12-10  1613  3225  1613  3225 BOAS  
12 2015-01-02  3370  4300  2900  3950 BOAS  
13 2016-01-04  3700  4101  2000  2350 BOAS  
14 2017-01-02  2325  3875  2035  2500 BOAS  
15 2018-01-02  2400  3250  1700  2020 BOAS  
16 2019-01-02  1900  2000  1500  1545 BOAS  
17 2020-01-01  1550  1700  1295  1495 BOAS  
18 2021-01-04  1480  2750  1340  2350 BOAS  
19 2022-01-03  2350  2780  2200  2450 BOAS  
20 2023-01-02  2580  2585  2175  2265 BOAS  </code></pre>
</div>
</div>
</section>
<section id="the-brvm.index-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm.index-function">The <strong>BRVM.index()</strong> function :</h2>
<p>It receives no argument and returns the name of all indexes available on BRVM Stock Exchange.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">BRVM.index</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "BRVMAG" "BRVMC"  "BRVMAS" "BRVMDI" "BRVMFI" "BRVMIN" "BRVMSP" "BRVMTR"
 [9] "BRVMPR" "BRVMPA" "BRVM30"</code></pre>
</div>
</div>
<p><strong>Authors</strong> : <br></p>
<ul>
<li><p><a href="https://github.com/Koffi-Fredysessie">Koffi Frederic Sessie</a> (<a href="mailto:koffisessie@gmail.com" class="email">koffisessie@gmail.com</a>),</p></li>
<li><p><a href="https://github.com/AODiakite">Abdoul Oudouss Diakité</a> (<a href="mailto:abdouloudoussdiakite@gmail.com" class="email">abdouloudoussdiakite@gmail.com</a>),</p></li>
<li><p><a href="https://github.com/spsanderson">Sanderson Steven</a>(<a href="mailto:spsanderson@gmail.com" class="email">spsanderson@gmail.com</a>)<br></p></li>
</ul>
<p><strong>Creator</strong> : Koffi Frederic Sessie <br></p>
<p><strong>cph (Copyright Holder)</strong> : Koffi Frederic Sessie <br></p>
<p><strong>License</strong> : MIT 2023, BRVM authors. All rights reserved.</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>brvm</category>
  <category>markets</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/index.html</guid>
  <pubDate>Thu, 06 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/brvm-logo.png" medium="image" type="image/png" height="132" width="144"/>
</item>
<item>
  <title>Looking at Daily Log Returns with tidyquant, TidyDensity, and Shiny</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this blog post, we’ll walk through how to create a shiny application that allows users to analyze the weekly returns of FAANG stocks (AAPL, AMZN, FB, GOOGL, and NFLX) using the <a href="https://business-science.github.io/tidyquant/"><code>{tidyquant}</code></a> and <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> packages in R.</p>
<section id="section-1-package-and-ui-setup" class="level2">
<h2 class="anchored" data-anchor-id="section-1-package-and-ui-setup">Section 1: Package and UI Setup</h2>
<p>The first section of the code sets up the necessary R packages and creates the UI for the shiny app. The packages we’ll be using are:</p>
<ul>
<li><strong>shiny</strong>: for creating interactive web applications in R</li>
<li><strong>tidyquant</strong>: for easily getting and analyzing financial data in R</li>
<li><strong>TidyDensity</strong>: for computing and visualizing probability distributions in a tidy way</li>
<li><strong>dplyr</strong>: for manipulating data in a tidy way</li>
<li><strong>DT</strong>: for creating interactive and scrollable data tables</li>
</ul>
<p>Analysts assemble your packages!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyquant)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(DT)</span></code></pre></div>
</div>
<p>The UI consists of a title panel, a sidebar panel, and a main panel. The sidebar panel contains a select input that allows users to choose which FAANG stock to analyze, as well as a numeric input for the number of simulations to run. The main panel contains two sections: one for the <code>tidy_autoplot()</code> output (a plot of the stock returns), and one for the <code>tidy_empirical()</code> output (a table of the log returns).</p>
</section>
<section id="section-2-server-setup" class="level2">
<h2 class="anchored" data-anchor-id="section-2-server-setup">Section 2: Server Setup</h2>
<p>The second section of the code defines the server function for the shiny app. The server function takes the input values from the UI (i.e.&nbsp;the selected stock and number of simulations) and uses them to get and analyze the stock data.</p>
<p>To get the stock data, we use the <code>tq_get()</code> function from the <code>tidyquant</code> package to retrieve the adjusted stock prices for the selected security from January 1, 2010 to the present. We then use the <code>tq_transmute()</code> function to compute the weekly log returns of the stock and rename the resulting column to “log_return”.</p>
<p>The <code>tidy_empirical()</code> function from the <code>TidyDensity</code> package is used to compute the empirical distribution of the log returns. The resulting table is displayed using the <code>renderDT()</code> function from the <code>DT</code> package, which creates a scrollable data table that can be sorted and filtered.</p>
<p>The <code>tidy_autoplot()</code> function is used to create a plot of the log returns, which is displayed using the <code>renderPlot()</code> function.</p>
</section>
<section id="section-3-running-the-app" class="level2">
<h2 class="anchored" data-anchor-id="section-3-running-the-app">Section 3: Running the App</h2>
<p>The final section of the code runs the shiny app using the ui and server functions.</p>
<p>Overall, this shiny app provides a simple and interactive way for users to analyze the weekly returns of FAANG stocks using <code>tidyquant</code> and <code>TidyDensity</code> in R. By allowing users to choose which stock to analyze and how many simulations to run, the app provides a customizable way to explore the empirical distributions of the log returns.</p>
</section>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is a full working example, except for FB for some reason that symbol errors out for me, go figure:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(tidyquant)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># define UI</span></span>
<span id="cb2-8">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"FAANG Stock Analysis"</span>),</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-12">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"ticker"</span>, <span class="st" style="color: #20794D;">"Select a security:"</span>, <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"AAPL"</span>, <span class="st" style="color: #20794D;">"AMZN"</span>, <span class="st" style="color: #20794D;">"FB"</span>, <span class="st" style="color: #20794D;">"GOOGL"</span>, <span class="st" style="color: #20794D;">"NFLX"</span>), <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"AAPL"</span>),</span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="st" style="color: #20794D;">"num_sims"</span>, <span class="st" style="color: #20794D;">"Enter the number of simulations:"</span>, <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">25</span>, <span class="at" style="color: #657422;">step =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-14">    ),</span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">"Tidy Autoplot Output"</span>),</span>
<span id="cb2-17">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"autoplot_output"</span>),</span>
<span id="cb2-18">      <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">"Tidy Empirical Output"</span>),</span>
<span id="cb2-19">      <span class="fu" style="color: #4758AB;">DTOutput</span>(<span class="st" style="color: #20794D;">"empirical_output"</span>)</span>
<span id="cb2-20">    )</span>
<span id="cb2-21">  )</span>
<span id="cb2-22">)</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;"># define server</span></span>
<span id="cb2-25">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;"># get stock data using tq_get and tq_transmute</span></span>
<span id="cb2-28">  stock_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;">tq_get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>ticker, <span class="at" style="color: #657422;">get =</span> <span class="st" style="color: #20794D;">"stock.prices"</span>, <span class="at" style="color: #657422;">from =</span> <span class="st" style="color: #20794D;">"2010-01-01"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-30">      <span class="fu" style="color: #4758AB;">tq_transmute</span>(<span class="at" style="color: #657422;">select =</span> adjusted, <span class="at" style="color: #657422;">mutate_fun =</span> periodReturn, <span class="at" style="color: #657422;">period =</span> <span class="st" style="color: #20794D;">"weekly"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"log"</span>, <span class="at" style="color: #657422;">col_rename =</span> <span class="st" style="color: #20794D;">"log_return"</span>)</span>
<span id="cb2-31">  })</span>
<span id="cb2-32">  </span>
<span id="cb2-33">  <span class="co" style="color: #5E5E5E;"># output tidy_empirical results</span></span>
<span id="cb2-34">  output<span class="sc" style="color: #5E5E5E;">$</span>empirical_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderDT</span>({</span>
<span id="cb2-35">    <span class="fu" style="color: #4758AB;">datatable</span>(</span>
<span id="cb2-36">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(<span class="fu" style="color: #4758AB;">stock_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>log_return, <span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims),</span>
<span id="cb2-37">      <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">scrollY =</span> <span class="st" style="color: #20794D;">"250px"</span>)</span>
<span id="cb2-38">    )</span>
<span id="cb2-39">  })</span>
<span id="cb2-40">  </span>
<span id="cb2-41">  <span class="co" style="color: #5E5E5E;"># output tidy_autoplot results</span></span>
<span id="cb2-42">  output<span class="sc" style="color: #5E5E5E;">$</span>autoplot_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-43">    <span class="fu" style="color: #4758AB;">stock_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>log_return <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-44">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-45">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>()</span>
<span id="cb2-46">  })</span>
<span id="cb2-47">  </span>
<span id="cb2-48">}</span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;"># run the app</span></span>
<span id="cb2-51"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <category>tidyquant</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-05/index.html</guid>
  <pubDate>Wed, 05 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A sample Shiny App to view Forecasts on the AirPassengers Data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-04/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello! In this code, we are making a program that will help us predict the number of air passengers in the future. Let me explain what each part of the code does, step by step.</p>
<p>First, we need to load some tools that will help us create the program. These tools are called “packages.” We use the library() function to load them. The packages we need are called <code>shiny</code>, <code>forecast</code>, and <code>ggplot2</code>.</p>
<section id="load-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-libraries">Load Libraries</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span></code></pre></div>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Next, we need some data to work with. We will use a dataset of the number of air passengers each month from 1949 to 1960. We load this dataset using the data() function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span></code></pre></div>
</div>
</section>
<section id="user-interface" class="level2">
<h2 class="anchored" data-anchor-id="user-interface">User Interface</h2>
<p>Now, we need to create the user interface, or UI. This is what the user will see and interact with. In this case, we will create a simple app with a title, a <strong>dropdown</strong> menu to choose a forecasting model, and a plot and table to display the forecast results. We use the <code>fluidPage()</code> function to create the UI, and we define the UI elements inside it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"AirPassengers Forecast"</span>),</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-5">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"model"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Choose a model:"</span>,</span>
<span id="cb3-6">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"auto.arima"</span>, <span class="st" style="color: #20794D;">"ets"</span>, <span class="st" style="color: #20794D;">"holtwinters"</span>))</span>
<span id="cb3-7">    ),</span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-9">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_plot"</span>),</span>
<span id="cb3-10">      <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_table"</span>)</span>
<span id="cb3-11">    )</span>
<span id="cb3-12">  )</span>
<span id="cb3-13">)</span></code></pre></div>
</div>
</section>
<section id="server" class="level2">
<h2 class="anchored" data-anchor-id="server">Server</h2>
<p>Now, we need to define the server. The server is where the program does the calculations and generates the output based on what the user selects in the UI. We define the server inside the function(input, output) argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span></code></pre></div>
</div>
<p>Inside the server, we need to create a reactive expression that generates the forecast based on the model the user selects. We use an if statement to check which model the user selected, and then we use the corresponding function to generate the forecast.</p>
<section id="forecast-the-data" class="level3">
<h3 class="anchored" data-anchor-id="forecast-the-data">Forecast the Data</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">forecast_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"auto.arima"</span>) {</span>
<span id="cb5-3">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(AirPassengers)</span>
<span id="cb5-4">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-5">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ets"</span>) {</span>
<span id="cb5-6">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ets</span>(AirPassengers)</span>
<span id="cb5-7">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-8">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-9">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hw</span>(AirPassengers)</span>
<span id="cb5-10">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-11">    }</span>
<span id="cb5-12">  })</span></code></pre></div>
</div>
</section>
<section id="render-plot" class="level3">
<h3 class="anchored" data-anchor-id="render-plot">Render Plot</h3>
<p>The <code>renderPlot()</code> function tells the program to create a plot based on the reactive expression we defined earlier. We use the <code>plotOutput()</code> function in the UI to display the plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">output<span class="sc" style="color: #5E5E5E;">$</span>forecast_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">forecast_data</span>())</span>
<span id="cb6-3">  })</span></code></pre></div>
</div>
<p>Similarly, the <code>renderTable()</code> function tells the program to create a table based on the reactive expression we defined earlier. We use the <code>tableOutput()</code> function in the UI to display the table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">output<span class="sc" style="color: #5E5E5E;">$</span>forecast_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">forecast_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>mean</span>
<span id="cb7-3">  })</span></code></pre></div>
</div>
<p>Finally, we run the app using the <code>shinyApp()</code> function, with the UI and server arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>And that’s it! This program allows the user to choose a forecasting model, and then generates a plot and table with the predicted number of air passengers based on that model.</p>
<p>Here is the Full code block”</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Load required packages</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;"># Load AirPassengers dataset</span></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb9-10">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb9-11">  </span>
<span id="cb9-12">  <span class="co" style="color: #5E5E5E;"># Title of the app</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"AirPassengers Forecast"</span>),</span>
<span id="cb9-14">  </span>
<span id="cb9-15">  <span class="co" style="color: #5E5E5E;"># Sidebar with input controls</span></span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb9-17">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb9-18">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"model"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Choose a model:"</span>,</span>
<span id="cb9-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"auto.arima"</span>, <span class="st" style="color: #20794D;">"ets"</span>, <span class="st" style="color: #20794D;">"holtwinters"</span>))</span>
<span id="cb9-20">    ),</span>
<span id="cb9-21">    </span>
<span id="cb9-22">    <span class="co" style="color: #5E5E5E;"># Output plot and table</span></span>
<span id="cb9-23">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-24">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_plot"</span>),</span>
<span id="cb9-25">      <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_table"</span>)</span>
<span id="cb9-26">    )</span>
<span id="cb9-27">  )</span>
<span id="cb9-28">)</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb9-31">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb9-32">  </span>
<span id="cb9-33">  <span class="co" style="color: #5E5E5E;"># Reactive expression to create forecast based on selected model</span></span>
<span id="cb9-34">  forecast_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb9-35">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"auto.arima"</span>) {</span>
<span id="cb9-36">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(AirPassengers)</span>
<span id="cb9-37">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-38">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ets"</span>) {</span>
<span id="cb9-39">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ets</span>(AirPassengers)</span>
<span id="cb9-40">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-41">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-42">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hw</span>(AirPassengers)</span>
<span id="cb9-43">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-44">    }</span>
<span id="cb9-45">  })</span>
<span id="cb9-46">  </span>
<span id="cb9-47">  <span class="co" style="color: #5E5E5E;"># Output plot</span></span>
<span id="cb9-48">  output<span class="sc" style="color: #5E5E5E;">$</span>forecast_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb9-49">    <span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">forecast_data</span>())</span>
<span id="cb9-50">    <span class="co" style="color: #5E5E5E;">#checkresiduals(forecast_data())</span></span>
<span id="cb9-51">  })</span>
<span id="cb9-52">  </span>
<span id="cb9-53">  <span class="co" style="color: #5E5E5E;"># Output table</span></span>
<span id="cb9-54">  output<span class="sc" style="color: #5E5E5E;">$</span>forecast_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb9-55">    <span class="fu" style="color: #4758AB;">forecast_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>mean</span>
<span id="cb9-56">  })</span>
<span id="cb9-57">}</span>
<span id="cb9-58"></span>
<span id="cb9-59"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb9-60"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>
</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>data</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-04/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A sample Shiny App to view CMS Healthcare Data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this blog post, we will be discussing how to create a Shiny application in R that will download and extract data from a zip file and allow users to choose which data they would like to see presented to them in the app from a selection drop-down menu. We will be using the <code>current_hosp_data()</code> function to obtain and read in the data. This function is in the upcoming release for the <a href="https://www.spsanderson.com/healthyR.data/"><code>{healthyR.data}</code></a> package.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="install" class="level2">
<h2 class="anchored" data-anchor-id="install">Install</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"shiny"</span>,<span class="st" style="color: #20794D;">"shinythemes"</span>))</span></code></pre></div>
</div>
</section>
<section id="current-hospital-data" class="level2">
<h2 class="anchored" data-anchor-id="current-hospital-data">Current Hospital Data</h2>
<p>Here is the <code>current_hospital_data()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">current_hosp_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-2"></span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;"># URL for file</span></span>
<span id="cb2-4">  url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://data.cms.gov/provider-data/sites/default/files/archive/Hospitals/current/hospitals_current_data.zip"</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;"># Create a temporary directory to process the zip file</span></span>
<span id="cb2-7">  tmp_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempdir</span>()</span>
<span id="cb2-8">  download_location <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(tmp_dir, <span class="st" style="color: #20794D;">"download.zip"</span>)</span>
<span id="cb2-9">  extract_location <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(tmp_dir, <span class="st" style="color: #20794D;">"extract"</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;"># Download the zip file to the temporary location</span></span>
<span id="cb2-12">  utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">download.file</span>(</span>
<span id="cb2-13">    <span class="at" style="color: #657422;">url =</span> url,</span>
<span id="cb2-14">    <span class="at" style="color: #657422;">destfile =</span> download_location</span>
<span id="cb2-15">  )</span>
<span id="cb2-16"></span>
<span id="cb2-17">  <span class="co" style="color: #5E5E5E;"># Unzip the file</span></span>
<span id="cb2-18">  utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unzip</span>(download_location, <span class="at" style="color: #657422;">exdir =</span> extract_location)</span>
<span id="cb2-19"></span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;"># Read the csv files into a list</span></span>
<span id="cb2-21">  csv_file_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(</span>
<span id="cb2-22">    <span class="at" style="color: #657422;">path =</span> extract_location,</span>
<span id="cb2-23">    <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.csv$"</span>,</span>
<span id="cb2-24">    <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb2-25">  )</span>
<span id="cb2-26"></span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;"># make named list</span></span>
<span id="cb2-28">  csv_names <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-29">    stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">setNames</span>(</span>
<span id="cb2-30">      <span class="at" style="color: #657422;">object =</span> csv_file_list,</span>
<span id="cb2-31">      <span class="at" style="color: #657422;">nm =</span></span>
<span id="cb2-32">        csv_file_list <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-33">        <span class="fu" style="color: #4758AB;">basename</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-34">        <span class="fu" style="color: #4758AB;">gsub</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.csv$"</span>, <span class="at" style="color: #657422;">replacement =</span> <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-35">        janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">make_clean_names</span>()</span>
<span id="cb2-36">    )</span>
<span id="cb2-37"></span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># Process CSV Files</span></span>
<span id="cb2-39">  parse_csv_file <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-40">    <span class="co" style="color: #5E5E5E;"># Normalize the path to use C:/path/to/file structure</span></span>
<span id="cb2-41">    <span class="fu" style="color: #4758AB;">normalizePath</span>(file, <span class="st" style="color: #20794D;">"/"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-42">      <span class="co" style="color: #5E5E5E;"># read in the csv file and use check.names = FALSE because some of</span></span>
<span id="cb2-43">      <span class="co" style="color: #5E5E5E;"># the names are very long</span></span>
<span id="cb2-44">      utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read.csv</span>(<span class="at" style="color: #657422;">check.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-45">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-46">      <span class="co" style="color: #5E5E5E;"># clean the field names</span></span>
<span id="cb2-47">      janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>()</span>
<span id="cb2-48">  }</span>
<span id="cb2-49"></span>
<span id="cb2-50">  list_of_tables <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(csv_names, parse_csv_file)</span>
<span id="cb2-51"></span>
<span id="cb2-52">  <span class="fu" style="color: #4758AB;">unlink</span>(tmp_dir, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-53"></span>
<span id="cb2-54">  <span class="co" style="color: #5E5E5E;"># Return the tibbles</span></span>
<span id="cb2-55">  <span class="co" style="color: #5E5E5E;"># Add and attribute and a class type to the object</span></span>
<span id="cb2-56">  <span class="fu" style="color: #4758AB;">attr</span>(list_of_tables, <span class="st" style="color: #20794D;">".list_type"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"current_hosp_data"</span></span>
<span id="cb2-57">  <span class="fu" style="color: #4758AB;">class</span>(list_of_tables) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"current_hosp_data"</span>, <span class="fu" style="color: #4758AB;">class</span>(list_of_tables))</span>
<span id="cb2-58"></span>
<span id="cb2-59">  list_of_tables</span>
<span id="cb2-60">}</span></code></pre></div>
</div>
</section>
<section id="app-file" class="level2">
<h2 class="anchored" data-anchor-id="app-file">App File</h2>
<p>Next, let’s create a new file called <code>app.R</code>. In this file, we will create the Shiny app. The app will have a user interface (UI) and a server.</p>
<p>The UI is responsible for creating the layout of the app, while the server is responsible for processing the data and responding to user input.</p>
<p>First, let’s create the UI. The UI will consist of a drop-down menu that will allow users to choose which data they would like to see presented to them in the app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(shinythemes)</span>
<span id="cb3-3"></span>
<span id="cb3-4">hosp_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">current_hosp_data</span>()</span>
<span id="cb3-5"></span>
<span id="cb3-6">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(<span class="at" style="color: #657422;">theme =</span> <span class="fu" style="color: #4758AB;">shinytheme</span>(<span class="st" style="color: #20794D;">"cerulean"</span>),</span>
<span id="cb3-7">                </span>
<span id="cb3-8">                <span class="co" style="color: #5E5E5E;"># Set up the dropdown menu</span></span>
<span id="cb3-9">                <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"table"</span>, </span>
<span id="cb3-10">                            <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select a table:"</span>, </span>
<span id="cb3-11">                            <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(hosp_data), </span>
<span id="cb3-12">                            <span class="at" style="color: #657422;">selected =</span> <span class="cn" style="color: #8f5902;">NULL</span>),</span>
<span id="cb3-13">                </span>
<span id="cb3-14">                <span class="co" style="color: #5E5E5E;"># Set up the table output</span></span>
<span id="cb3-15">                <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"table_output"</span>)</span>
<span id="cb3-16">)</span></code></pre></div>
</div>
<p>The <code>fluidPage()</code> function creates a new Shiny app page. We also specify the theme using the <code>{shinythemes}</code> package. The <code>selectInput()</code> function creates the drop-down menu, which allows users to select which data they would like to see presented to them in the app. The choices argument is set to the names of the tables in the <a href="https://www.spsanderson.com/healthyR.data/reference/current_hosp_data.html"><code>current_hosp_data()</code></a> object. The <code>tableOutput()</code> function creates the output for the selected table.</p>
</section>
<section id="server" class="level2">
<h2 class="anchored" data-anchor-id="server">Server</h2>
<p>Next, let’s create the server. The server will be responsible for processing the data and generating the output based on user input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;"># Load the data into a reactive object</span></span>
<span id="cb4-4">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(hosp_data)</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># Set up the table output</span></span>
<span id="cb4-7">    output<span class="sc" style="color: #5E5E5E;">$</span>table_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;"># Get the selected table</span></span>
<span id="cb4-9">        table_selected <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>table</span>
<span id="cb4-10">        </span>
<span id="cb4-11">        <span class="co" style="color: #5E5E5E;"># Get the table from the data object</span></span>
<span id="cb4-12">        table_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>()[[table_selected]]</span>
<span id="cb4-13">        </span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;"># Return the table data</span></span>
<span id="cb4-15">        table_data</span>
<span id="cb4-16">    })</span>
<span id="cb4-17">}</span></code></pre></div>
</div>
<p>The reactive() function is used to create a reactive object that will load the data when the app starts. The <code>renderTable()</code> function generates the output for the selected table. It does this by getting the selected table from the drop-down menu, getting the table data from the reactive data object, and returning the table data.</p>
</section>
<section id="shiny-app" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app">Shiny App</h2>
<p>Finally, we need to run the appl using the <code>shinyApp()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
</section>
<section id="pros-and-cons" class="level2">
<h2 class="anchored" data-anchor-id="pros-and-cons">Pros and Cons</h2>
<p>Pros:</p>
<ul>
<li>The app is easy to use, and users can quickly select which data they would like to see presented to them in the app.</li>
<li>The <code>current_hosp_data()</code> function is only called once when the app starts, which can save time and resources if the function is time-consuming or resource-intensive.</li>
</ul>
<p>Cons:</p>
<ul>
<li>The app will not update if the data in the zip file changes. Users will need to restart the app to see the updated data.</li>
<li>The app loads all the data into memory when it starts, which can be an issue if the data is large and memory-intensive.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>data</category>
  <category>healthcare</category>
  <category>cms</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-03/index.html</guid>
  <pubDate>Mon, 03 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Bootstrapped Time Series Model with auto.arima() from {forecast}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Time series analysis is a powerful tool for understanding and predicting patterns in data that vary over time. In this tutorial, we will use the AirPassengers dataset to create a bootstrapped timeseries model in R.</p>
<p>The AirPassengers dataset The AirPassengers dataset contains data on the number of passengers traveling on international flights per month from 1949 to 1960. To begin, we will load the dataset into R and plot it to get an idea of the data’s structure and any underlying patterns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">plot</span>(AirPassengers, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"International Airline Passengers 1949-1960"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>From the plot, we can see that there is a clear upward trend in the data, as well as some seasonality.</p>
</section>
<section id="creating-a-bootstrapped-timeseries-model" class="level1">
<h1>Creating a bootstrapped timeseries model</h1>
<p>Now that we have an idea of the structure of the data, we can create a bootstrapped timeseries model using the <code>auto.arima()</code> function from the <code>{forecast}</code> package. The <code>auto.arima()</code> function uses an automated algorithm to determine the best model for a given timeseries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb2-2">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(AirPassengers)</span>
<span id="cb2-3">n_boot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># create bootstrap sample indices</span></span>
<span id="cb2-6">boot_indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replicate</span>(n_boot, <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># create list to store models</span></span>
<span id="cb2-9">models <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># create bootstrapped models</span></span>
<span id="cb2-12"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_boot) {</span>
<span id="cb2-13">  boot_data <span class="ot" style="color: #003B4F;">&lt;-</span> AirPassengers[boot_indices[, i]]</span>
<span id="cb2-14">  models[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(boot_data)</span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17">models[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Series: boot_data 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
          mean
      275.5347
s.e.    9.5443

sigma^2 = 13209:  log likelihood = -887.01
AIC=1778.02   AICc=1778.1   BIC=1783.96</code></pre>
</div>
</div>
<p>In the code above, we first set a seed to ensure reproducibility of our results. We then specify the length of the timeseries and the number of bootstrap iterations we want to run. We create a list to store the models and a set of bootstrap sample indices.</p>
<p>We then loop through each bootstrap iteration, creating a new dataset from the original timeseries by sampling with replacement using the boot_indices. We use the <code>auto.arima()</code> function to create a timeseries model for each bootstrap sample and store it in our models list.</p>
</section>
<section id="summarizing-and-plotting-residuals" class="level1">
<h1>Summarizing and plotting residuals</h1>
<p>Now that we have created our bootstrapped timeseries models, we can summarize and plot the residuals of each model to get an idea of how well our models fit the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># create list to store residuals</span></span>
<span id="cb4-2">residuals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># create residuals for each model</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_boot) {</span>
<span id="cb4-6">  boot_data <span class="ot" style="color: #003B4F;">&lt;-</span> AirPassengers[boot_indices[, i]]</span>
<span id="cb4-7">  residuals[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">residuals</span>(models[[i]])</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;"># summarize residuals</span></span>
<span id="cb4-11">residual_means <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(residuals, mean)</span>
<span id="cb4-12">residual_sd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(residuals, sd)</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;"># plot residuals</span></span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="fu" style="color: #4758AB;">hist</span>(</span>
<span id="cb4-18">  residual_means, </span>
<span id="cb4-19">  <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"Bootstrapped Model Residuals"</span>, </span>
<span id="cb4-20">  <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"Mean Residuals"</span></span>
<span id="cb4-21">  )</span>
<span id="cb4-22"><span class="fu" style="color: #4758AB;">hist</span>(</span>
<span id="cb4-23">  residual_sd, </span>
<span id="cb4-24">  <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"red"</span>, </span>
<span id="cb4-25">  <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">""</span>, </span>
<span id="cb4-26">  <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"SD Residuals"</span></span>
<span id="cb4-27">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>In the code above, we create a list to store the residuals for each model, loop through each model to create residuals using the residuals() function, and summarize the residuals by taking the mean and standard deviation of each set of residuals.</p>
<p>We then plot the mean residuals and standard deviations for each model using the plot() function and add a legend to indicate the meaning of the two lines.</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>timeseries</category>
  <category>bootstrap</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast does a compressed file in Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-28/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I posted on performing a benchmark on reading in a compressed <code>.csv.gz</code> file of a 2,000 by 2,000 <code>data.frame</code>. It was brought to my attention by someone on Mastadon (<span class="citation" data-cites="mariviere">@mariviere</span><span class="citation" data-cites="fediscience.org">@fediscience.org</span> - <a href="https://fediscience.org/@mariviere" class="uri">https://fediscience.org/@mariviere</a>) that I should also use <code>{duckdb}</code> and <code>{arrow}</code> so I will perform the same analysis as yesterday but I will also add in the two aforementioned packages.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The functions that we will be using this time around are as follows:</p>
<ul>
<li><code>fread()</code> - data.table</li>
<li><code>duckdb_read_csv()</code> - duckdb</li>
<li><code>read_csv()</code> - readr</li>
<li><code>read.csv()</code> - base</li>
<li><code>read.table()</code> - base</li>
<li><code>vroom()</code> with altrep = <code>FALSE</code> - vroom</li>
<li><code>vroom()</code> with altrep = <code>TRUE</code> - vroom</li>
<li><code>oprn_csv_dataset()</code> - arrow</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="make-the-data" class="level2">
<h2 class="anchored" data-anchor-id="make-the-data">Make the Data</h2>
<p>Let’s make that dataset again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(R.utils)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># create a 1000 x 1000 matrix of random numbers</span></span>
<span id="cb1-4">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">2000000</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2000</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2000</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Make and save gzipped file</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">write.csv</span>(df, <span class="st" style="color: #20794D;">"df.csv"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">gzip</span>(</span>
<span id="cb1-10">  <span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"df.csv"</span>, </span>
<span id="cb1-11">  <span class="at" style="color: #657422;">destname =</span> <span class="st" style="color: #20794D;">"df.csv.gz"</span>,</span>
<span id="cb1-12">  <span class="at" style="color: #657422;">overwrite =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, </span>
<span id="cb1-13">  <span class="at" style="color: #657422;">remove =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb1-14">)</span></code></pre></div>
</div>
</section>
<section id="benchmarking" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking">Benchmarking</h2>
<p>Time to benchmark</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(duckdb)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;">library</span>(DBI)</span>
<span id="cb2-9"></span>
<span id="cb2-10">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;"># Base R</span></span>
<span id="cb2-14">  <span class="st" style="color: #20794D;">"read.table"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-15">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(</span>
<span id="cb2-16">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-17">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-18">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-19">    )</span>
<span id="cb2-20">  },</span>
<span id="cb2-21">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-22">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb2-23">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-24">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-25">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-26">    )</span>
<span id="cb2-27">  },</span>
<span id="cb2-28">  </span>
<span id="cb2-29">  <span class="co" style="color: #5E5E5E;"># data.table</span></span>
<span id="cb2-30">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-31">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(</span>
<span id="cb2-32">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-33">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-34">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-35">    )</span>
<span id="cb2-36">  },</span>
<span id="cb2-37">  </span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># vroom</span></span>
<span id="cb2-39">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-40">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-41">  },</span>
<span id="cb2-42">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-43">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-44">  },</span>
<span id="cb2-45">  </span>
<span id="cb2-46">  <span class="co" style="color: #5E5E5E;"># readr</span></span>
<span id="cb2-47">  <span class="st" style="color: #20794D;">"readr"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-48">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-49">  },</span>
<span id="cb2-50">  </span>
<span id="cb2-51">  <span class="co" style="color: #5E5E5E;"># Arrow</span></span>
<span id="cb2-52">  <span class="st" style="color: #20794D;">"arrow"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-53">    g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_csv_dataset</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>)</span>
<span id="cb2-54">  },</span>
<span id="cb2-55">  </span>
<span id="cb2-56">  <span class="co" style="color: #5E5E5E;"># DuckDB</span></span>
<span id="cb2-57">  <span class="st" style="color: #20794D;">"duckdb"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-58">    con <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dbConnect</span>(<span class="fu" style="color: #4758AB;">duckdb</span>())</span>
<span id="cb2-59">    h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">duckdb_read_csv</span>(</span>
<span id="cb2-60">      <span class="at" style="color: #657422;">conn =</span> con,</span>
<span id="cb2-61">      <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"df"</span>,</span>
<span id="cb2-62">      <span class="at" style="color: #657422;">files =</span> <span class="st" style="color: #20794D;">"C:</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Users</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">ssanders</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Documents</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">GitHub</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">steveondata</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">posts</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">rtip-2023-03-28</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">df.csv.gz"</span></span>
<span id="cb2-63">    )</span>
<span id="cb2-64">    <span class="fu" style="color: #4758AB;">dbDisconnect</span>(con)</span>
<span id="cb2-65">  },</span>
<span id="cb2-66">  </span>
<span id="cb2-67">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb2-68">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb2-69">  </span>
<span id="cb2-70">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb2-71">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-72">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb2-73">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-74">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               arrow           30    3.01    1.000      5.04     0.25
2               fread           30   28.28    9.395     19.56     4.30
3 vroom alltrep false           30   31.89   10.595     26.25    10.75
4  vroom alltrep true           30   33.72   11.203     25.75    10.67
5              duckdb           30   94.09   31.259     90.70     2.77
6               readr           30   98.28   32.651    113.05    45.12
7          read.table           30  109.97   36.535    107.78     1.24
8            read.csv           30  153.79   51.093    152.44     0.56</code></pre>
</div>
</div>
<p>Important note is the session info on the pc I am using to write this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">sessionInfo</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8 
[2] LC_CTYPE=English_United States.utf8   
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.utf8    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] dplyr_1.1.1       vroom_1.6.1       arrow_11.0.0.3    duckdb_0.7.1-1   
 [5] DBI_1.1.3         readr_2.1.4       data.table_1.14.8 rbenchmark_1.0.0 
 [9] R.utils_2.12.2    R.oo_1.25.0       R.methodsS3_1.8.2

loaded via a namespace (and not attached):
 [1] pillar_1.9.0      compiler_4.2.3    tools_4.2.3       digest_0.6.31    
 [5] bit_4.0.5         jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3  
 [9] tibble_3.2.1      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        
[13] rstudioapi_0.14   parallel_4.2.3    yaml_2.3.7        xfun_0.38        
[17] fastmap_1.1.1     knitr_1.42        generics_0.1.3    vctrs_0.6.1      
[21] htmlwidgets_1.6.2 hms_1.1.3         bit64_4.0.5       tidyselect_1.2.0 
[25] glue_1.6.2        R6_2.5.1          fansi_1.0.4       rmarkdown_2.21   
[29] tzdb_0.3.0        purrr_1.0.1       magrittr_2.0.3    htmltools_0.5.5  
[33] assertthat_0.2.1  utf8_1.2.3        crayon_1.5.2     </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"> <span class="fu" style="color: #4758AB;">Sys.info</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-2">   <span class="fu" style="color: #4758AB;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-3">   tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-4">   <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-5">   <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  rowname `Sys.info()`
  &lt;chr&gt;   &lt;chr&gt;       
1 sysname Windows     
2 release 10 x64      
3 version build 19045 
4 machine x86-64      </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"> <span class="fu" style="color: #4758AB;">memory.profile</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb8-2">   <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            memory.profile()
NULL                       1
symbol                 24303
pairlist              642504
closure                11189
environment             4009
promise                22963
language              189766
special                   47
builtin                  701
char                 2039073
logical                18866
integer               108132
double                 20060
complex                    5
character             160381
...                       21
any                        0
list                   58500
expression                 5
bytecode               41555
externalptr            12382
weakref                13860
raw                    10113
S4                      1362</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"> <span class="fu" style="color: #4758AB;">gc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  3363479 179.7    5830931 311.5  5830931 311.5
Vcells 32950395 251.4   81254422 620.0 81254324 620.0</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <category>arrow</category>
  <category>duckdb</category>
  <category>datatable</category>
  <category>readr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-28/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast does a compressed file in?</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I received an email over the weekend in regards to my last post not containing the reading in of <code>gz</code> compressed file(s) for the benchmarking. While this was not an over site per-se it was a good reminder that people would probably be interested in seeing this as well.</p>
<p>Benchmarking is the process of measuring and comparing the performance of different programs, tools, or configurations in order to identify which one is the most efficient for a specific task. It is a critical step in software development that can help developers identify performance bottlenecks and improve the overall performance of their applications.</p>
<p>In this post I create a square matrix and then convert it to a data.frame (2,000 rows by 2,000 columns) and then saved it as a gz compressed csv file. The benchmark compares different R packages and functions, including base <code>R</code>, <code>data.table</code>, <code>vroom</code>, and <code>readr</code>, and measures their relative speeds based on the time it takes to read in the <code>.csv.gz</code> file.</p>
<p>Here are some pro’s of trying things different ways and properly benchmarking them:</p>
<ul>
<li><p>Identify the most efficient solution: Benchmarking can help you identify the most efficient solution for a specific task. By measuring the relative speeds of different programs or tools, you can determine which one is the fastest and use it to improve the performance of your application.</p></li>
<li><p>Optimize resource utilization: Benchmarking can help you optimize resource utilization by identifying programs or tools that consume more resources than others. By choosing the most resource-efficient solution, you can reduce the cost of running your application and improve its scalability.</p></li>
<li><p>Avoid premature optimization: Benchmarking can help you avoid premature optimization by measuring the performance of different programs or tools before you start optimizing them. By identifying the slowest parts of your application, you can focus your optimization efforts on the most critical areas and avoid wasting time optimizing code that doesn’t need it.</p></li>
<li><p>Keep up with technology: Benchmarking can help you keep up with technology by comparing the performance of different tools and libraries. By staying up to date with the latest technologies, you can improve the performance of your application and stay ahead of your competitors.</p></li>
<li><p>Improve code quality: Benchmarking can help you improve the quality of your code by identifying performance bottlenecks and areas for optimization. By optimizing your code, you can improve its maintainability, reliability, and readability.</p></li>
</ul>
<p>In conclusion, benchmarking is an essential tool for software developers that can help them identify the most efficient solutions for their applications. By measuring the relative speeds of different programs or tools, developers can optimize resource utilization, avoid premature optimization, keep up with technology, and improve the quality of their code.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The different functions I use in the benchmarking are as follows:</p>
<section id="base-r" class="level2">
<h2 class="anchored" data-anchor-id="base-r">Base R</h2>
<ul>
<li><code>read.csv()</code></li>
<li><code>read.table()</code></li>
</ul>
</section>
<section id="data.table" class="level2">
<h2 class="anchored" data-anchor-id="data.table">data.table</h2>
<ul>
<li><code>fread</code></li>
</ul>
</section>
<section id="vroom" class="level2">
<h2 class="anchored" data-anchor-id="vroom">vroom</h2>
<ul>
<li><code>vroom()</code> with altrep = FALSE</li>
<li><code>vroom()</code> with altrep = TRUE</li>
</ul>
</section>
<section id="readr" class="level2">
<h2 class="anchored" data-anchor-id="readr">readr</h2>
<ul>
<li><code>read_csv()</code></li>
</ul>
</section>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s make a 2,000 by 2,000 matrix, covert to a <code>data.frame</code> and then save it out as a <code>.csv</code> file and then convert to a <code>.gz</code> file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(R.utils)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># create a 1000 x 1000 matrix of random numbers</span></span>
<span id="cb1-4">my_matrix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">2000000</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2000</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2000</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Make and save gzipped file</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">write.csv</span>(my_matrix, <span class="st" style="color: #20794D;">"my_matrix.csv"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">gzip</span>(<span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"my_matrix.csv"</span>, <span class="at" style="color: #657422;">destname =</span> <span class="st" style="color: #20794D;">"matrix.csv.gz"</span>,</span>
<span id="cb1-10">     <span class="at" style="color: #657422;">overwrite =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">remove =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
<p>Ok now that the data is written we can benchmark the read in times from various packages.</p>
<section id="benchmarking" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking">Benchmarking</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-6"></span>
<span id="cb2-7">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Base R</span></span>
<span id="cb2-11">  <span class="st" style="color: #20794D;">"read.table"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-12">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-13">  },</span>
<span id="cb2-14">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-15">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-16">  },</span>
<span id="cb2-17">  </span>
<span id="cb2-18">  <span class="co" style="color: #5E5E5E;"># data.table</span></span>
<span id="cb2-19">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-20">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-21">  },</span>
<span id="cb2-22">  </span>
<span id="cb2-23">  <span class="co" style="color: #5E5E5E;"># vroom</span></span>
<span id="cb2-24">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-25">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-26">  },</span>
<span id="cb2-27">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-28">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-29">  },</span>
<span id="cb2-30">  </span>
<span id="cb2-31">  <span class="co" style="color: #5E5E5E;"># readr</span></span>
<span id="cb2-32">  <span class="st" style="color: #20794D;">"readr"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-33">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>)</span>
<span id="cb2-34">  },</span>
<span id="cb2-35">  </span>
<span id="cb2-36">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb2-37">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb2-38">  </span>
<span id="cb2-39">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb2-40">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-41">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb2-42">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-43">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               fread           30   19.44    1.000     13.56     1.59
2  vroom alltrep true           30   22.06    1.135     10.54     2.63
3 vroom alltrep false           30   24.75    1.273     10.22     2.84
4          read.table           30   94.34    4.853     79.02     0.64
5            read.csv           30  143.28    7.370    115.64     0.74
6               readr           30  177.61    9.136     50.37    10.05</code></pre>
</div>
</div>
<p>Voila!</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-27/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast do the files read in?</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I will demonstrate how to generate a 1,000 row and column matrix with random numbers in R, and then save it in different file formats. I will also show how to get the file size of each saved object and benchmark how long it takes to read in each file using different functions.</p>
<section id="generating-a-large-matrix" class="level2">
<h2 class="anchored" data-anchor-id="generating-a-large-matrix">Generating a large matrix</h2>
<p>To generate a 1,000 row and column matrix with random numbers, we can use the matrix() function and the runif() function in R. Here’s the code to generate the matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># set seed for reproducibility</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># number of rows/columns in matrix</span></span>
<span id="cb1-5">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># generate matrix with random normal values</span></span>
<span id="cb1-8">mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">runif</span>(n<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">nrow =</span> n) </span></code></pre></div>
</div>
<p>This code sets the random number generator seed to ensure that the same random numbers are generated every time the code is run. It then generates a vector of 1,000^2 random numbers using the runif() function, and creates a matrix with 1,000 columns using the matrix() function.</p>
</section>
<section id="saving-the-matrix-in-different-file-formats" class="level2">
<h2 class="anchored" data-anchor-id="saving-the-matrix-in-different-file-formats">Saving the matrix in different file formats</h2>
<p>We can save the generated matrix in different file formats using different functions in R. Here are the functions we will use for each file format:</p>
<ul>
<li>CSV: write.csv()</li>
<li>RDS: saveRDS()</li>
<li>FST: write_fst()</li>
<li>Arrow: write_feather()</li>
</ul>
<p>Here’s the code to save the matrix in each file format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(fst)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Save matrix in different file formats</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">write.csv</span>(mat, <span class="st" style="color: #20794D;">"matrix.csv"</span>, <span class="at" style="color: #657422;">row.names=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">saveRDS</span>(mat, <span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">write_fst</span>(<span class="fu" style="color: #4758AB;">as.data.frame</span>(mat), <span class="st" style="color: #20794D;">"matrix.fst"</span>)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;">write_feather</span>(<span class="fu" style="color: #4758AB;">as_arrow_table</span>(<span class="fu" style="color: #4758AB;">as.data.frame</span>(mat)), <span class="st" style="color: #20794D;">"matrix.arrow"</span>)</span></code></pre></div>
</div>
<p>This code saves the matrix in each file format using the corresponding function, with the file name specified as the second argument. Getting the file size of each saved object</p>
<p>To get the file size of each saved object, we can use the file.size() function in R. Here’s the code to get the file size of each saved object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Get file size of each saved object</span></span>
<span id="cb3-2">csv_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)  <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-3">rds_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-4">fst_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.fst"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-5">arrow_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.arrow"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># Print file size in human-readable format</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"CSV file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(csv_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "CSV file size in MB: 17.17339"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"RDS file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(rds_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "RDS file size in MB: 5.079627"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"FST file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(fst_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "FST file size in MB: 7.700841"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Arrow file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(arrow_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Arrow file size in MB: 6.705355"</code></pre>
</div>
</div>
<p>This code uses the file.size() function to get the file size of each object, and stores the file size of each object in a separate variable.</p>
<p>Finally, it prints the file size of each object in a human-readable format using the format() function with the units=“auto” argument. The units=“auto” argument automatically chooses the most appropriate unit (e.g., KB, MB, GB) based on the file size.</p>
</section>
<section id="benchmarking-file-read-times" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking-file-read-times">Benchmarking file read times</h2>
<p>To benchmark how long it takes to read in each file, we can use the <code>{rbenchmark}</code> package in R. In this example, we will compare the read times for the CSV file using four different functions: <code>read.csv()</code>, <code>read_csv()</code> from the <code>{readr}</code> package, <code>fread()</code> from the <code>{data.table}</code> package, and <code>vroom()</code> from the <code>{vroom}</code> package. We will also benchmark the read times for the RDS file using <code>readRDS()</code>, the FST file using <code>read_fst()</code>, and the Arrow file using <code>read_feather()</code>.</p>
<p>Here’s the code to benchmark the read times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load rbenchmark package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb11-7"></span>
<span id="cb11-8">n <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;"># Benchmark read times for CSV file</span></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb11-12">  <span class="co" style="color: #5E5E5E;"># CSV File</span></span>
<span id="cb11-13">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-14">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-15">  },</span>
<span id="cb11-16">  <span class="st" style="color: #20794D;">"read_csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-17">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-18">  },</span>
<span id="cb11-19">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-20">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-21">  },</span>
<span id="cb11-22">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-23">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-24">  },</span>
<span id="cb11-25">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-26">    dd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-27">  },</span>
<span id="cb11-28">  </span>
<span id="cb11-29">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb11-30">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb11-31">  </span>
<span id="cb11-32">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb11-33">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb11-34">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb11-35">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb11-36">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               fread           30    1.35    1.000      0.90     0.20
2  vroom alltrep true           30    6.59    4.881      3.58     1.71
3 vroom alltrep false           30    6.62    4.904      3.43     1.62
4            read.csv           30   33.86   25.081     26.15     0.22
5            read_csv           30   82.39   61.030     20.39     3.47</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># RDS File</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;"># RDS File</span></span>
<span id="cb13-4">  <span class="st" style="color: #20794D;">"readRDS"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb13-5">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb13-6">  },</span>
<span id="cb13-7">  <span class="st" style="color: #20794D;">"read_rds"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb13-8">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_rds</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb13-9">  },</span>
<span id="cb13-10">  </span>
<span id="cb13-11">  <span class="co" style="color: #5E5E5E;"># Repications</span></span>
<span id="cb13-12">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb13-13">  </span>
<span id="cb13-14">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb13-15">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb13-17">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb13-18">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      test replications elapsed relative user.self sys.self
1 read_rds           30    0.95    1.000      0.74     0.01
2  readRDS           30    0.97    1.021      0.74     0.02</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># FST / Arrow</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb15-3">  <span class="co" style="color: #5E5E5E;"># FST</span></span>
<span id="cb15-4">  <span class="st" style="color: #20794D;">"read_fst"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb15-5">    g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_fst</span>(<span class="st" style="color: #20794D;">"matrix.fst"</span>)</span>
<span id="cb15-6">  },</span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;"># Arrow</span></span>
<span id="cb15-9">  <span class="st" style="color: #20794D;">"arrow"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb15-10">    h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_feather</span>(<span class="st" style="color: #20794D;">"matrix.arrow"</span>)</span>
<span id="cb15-11">  },</span>
<span id="cb15-12">  </span>
<span id="cb15-13">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb15-14">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb15-15">  </span>
<span id="cb15-16">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb15-17">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb15-18">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb15-19">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb15-20">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      test replications elapsed relative user.self sys.self
1 read_fst           30    0.21    1.000      0.05     0.12
2    arrow           30    3.00   14.286      1.60     0.11</code></pre>
</div>
</div>
<p>This code loads the <code>{rbenchmark}</code> package, and uses the <code>benchmark()</code> function to compare the read times for each file format. We specify the function to use for each file format, and set the number of replications to 10. Conclusion</p>
<p>In this blog post, we demonstrated how to generate a large matrix with random numbers in R, and how to save it in different file formats. We also showed how to get the file size of each saved object, and benchmarked the read times for each file format using different functions.</p>
<p>This example demonstrates the importance of choosing the appropriate file format and read function for your data. Depending on the size of your data and the requirements of your analysis, some file formats and functions may be more efficient than others.</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-24/index.html</guid>
  <pubDate>Fri, 24 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Some Examples of Cumulative Mean with {TidyDensity}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Cumulative mean is a statistical measure that calculates the mean of a set of numbers up to a certain point in time or after a certain number of observations. It is also known as a running average or moving average.</p>
<p>Cumulative mean can be useful in a variety of contexts. For example:</p>
<ul>
<li><p>Tracking progress: Cumulative mean can be used to track progress over time. For instance, a teacher might use it to track the average test scores of her students throughout the school year.</p></li>
<li><p>Analyzing trends: Cumulative mean can help identify trends in data. For example, a business might use it to track the average revenue generated by a new product over the course of several months.</p></li>
<li><p>Smoothing data: Cumulative mean can be used to smooth out fluctuations in data. For instance, a meteorologist might use it to calculate the average temperature over the course of a year, which would help to smooth out the effects of daily temperature fluctuations.</p></li>
</ul>
<p>In summary, cumulative mean is a useful statistical measure that can help track progress, analyze trends, and smooth out fluctuations in data.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The function we will review is <code>cmean()</code> from the <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> R package. Let’s take a look at it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">cmean</span>()</span></code></pre></div>
</div>
<p>The only argument is <code>.x</code> which is a numeric vector as this is a vectorized function. Let’s see it in use.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>First let’s load in <strong>TidyDensity</strong></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span></code></pre></div>
</div>
<p>Ok now let’s make some data. For this we are going to use the simple <code>rnorm()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">head</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.8293250 -1.2983499  2.2782337 -0.1521549  0.6859169  0.3809020</code></pre>
</div>
</div>
<p>Ok, now that we have our vector, let’s run it through the function and see what it outputs and then we will graph it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">cmx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cmean</span>(x)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">head</span>(cmx)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -0.8293249774 -1.0638374319  0.0501862766 -0.0003990095  0.1368641726
[6]  0.1775371452</code></pre>
</div>
</div>
<p>Now let’s graph it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">plot</span>(cmx, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Ok nice, so can we do this on grouped data or lists of data? Of course! First let’s use a for loop to generate a list of <strong>rnorm()</strong> values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Initialize an empty list to store the generated values</span></span>
<span id="cb8-2">my_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;"># Generate values using rnorm(5) in a for loop and store them in the list</span></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>) {</span>
<span id="cb8-6">  my_list[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;"># Print the generated list</span></span>
<span id="cb8-10">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map</span>(my_list, head)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] -0.8054353 -0.4596541 -0.2362475  1.1486398 -0.7242154  0.5184610

[[2]]
[1]  0.3243327  0.7170802 -0.5963424 -1.0307104  0.3388504  0.5717486

[[3]]
[1]  1.7360816 -1.0359467 -0.3206138 -1.2157684 -0.8841356  0.1856481

[[4]]
[1] -1.1401642 -0.4437817 -0.2555245 -0.1809040 -0.2131763 -0.1251750

[[5]]
[1]  0.08835903 -1.79153379 -2.15010900  0.67344844  1.06125849  0.99848796</code></pre>
</div>
</div>
<p>Now that we have our list object let’s go ahead and plot the values out after we pass the data through <code>cmean()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb10-2"></span>
<span id="cb10-3">my_list <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">map</span>(\(x) x <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">cmean</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">plot</span>(<span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-7-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-7-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-7-4.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index_files/figure-html/unnamed-chunk-7-5.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL</code></pre>
</div>
</div>
<p>From here I think it is easy to see how one could do this on gruoped data as well with dplyr’s <strong>group_by()</strong>.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-22/index.html</guid>
  <pubDate>Wed, 22 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting the CCI30 Index Current Makeup</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-21/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <a href="https://cci30.com/">CCI30</a> Crypto Index is a cryptocurrency index that tracks the performance of the top 30 cryptocurrencies by market capitalization. It was created in 2017 by a team of researchers and analysts from the CryptoCompare and MVIS indices.</p>
<p>The CCI30 Crypto Index is designed to provide a broad-based and representative measure of the cryptocurrency market’s overall performance. It includes a diverse range of cryptocurrencies, such as Bitcoin, Ethereum, Litecoin, Ripple, and many others. The index is weighted by market capitalization, with each cryptocurrency’s weight determined by its market capitalization relative to the total market capitalization of all 30 cryptocurrencies.</p>
<p>The CCI30 Crypto Index has become a popular benchmark for the cryptocurrency market, as it offers a comprehensive view of the market’s performance, rather than just focusing on one particular cryptocurrency. It is often used by investors, traders, and researchers to analyze trends and make investment decisions.</p>
<p>One notable feature of the CCI30 Crypto Index is that it is rebalanced every quarter. This means that the composition of the index is adjusted to reflect changes in the market capitalization of the constituent cryptocurrencies. This helps to ensure that the index remains representative of the overall cryptocurrency market.</p>
<p>Overall, the CCI30 Crypto Index provides a useful tool for tracking the performance of the cryptocurrency market. It is a valuable resource for investors, traders, and researchers who are interested in this exciting and rapidly evolving field.</p>
</section>
<section id="code-explanation" class="level1">
<h1>Code Explanation</h1>
<p>Let’s break it down step by step:</p>
<ul>
<li>The first line of the code loads the “dplyr” package, which provides a set of functions for data manipulation.</li>
<li>The second line of the code reads the HTML code from the website “https://cci30.com/” using the “read_html” function from the “xml2” package.</li>
<li>The next two blocks of code extract two tables from the HTML document using the “html_node” function from the “rvest” package. The tables are located at two different XPaths in the HTML document.</li>
<li>The extracted tables are then converted into tibbles using the “as_tibble” function from the “tibble” package. The tibbles are further transformed by selecting only the columns from the second to the fifth column using the “select” function from the “dplyr” package.</li>
<li>The column names of the tibbles are then set using the “set_names” function from the “purrr” package.</li>
<li>Finally, the two tibbles are combined using the “union” function from the “dplyr” package, and the resulting tibble is printed to the console.</li>
</ul>
<p>In summary, the code is extracting two tables from a website, transforming them into tibbles, selecting a subset of columns, renaming the columns, and combining them into a single tibble.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">cci30 <span class="ot" style="color: #003B4F;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(<span class="st" style="color: #20794D;">"https://cci30.com/"</span>)</span>
<span id="cb1-2"></span>
<span id="cb1-3">tbl1 <span class="ot" style="color: #003B4F;">&lt;-</span> cci30 <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-4">    rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_node</span>(<span class="at" style="color: #657422;">xpath =</span> <span class="st" style="color: #20794D;">"/html/body/div[2]/div/div/div/div[2]/div[1]/table"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">    rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_table</span>(<span class="at" style="color: #657422;">header =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-6">    tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-7">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-8">    purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">set_names</span>(</span>
<span id="cb1-9">        <span class="st" style="color: #20794D;">"Coin"</span>,<span class="st" style="color: #20794D;">"Price"</span>,<span class="st" style="color: #20794D;">"Mkt Cap"</span>,<span class="st" style="color: #20794D;">"Daily Change"</span></span>
<span id="cb1-10">    )</span>
<span id="cb1-11"></span>
<span id="cb1-12">tbl2 <span class="ot" style="color: #003B4F;">&lt;-</span> cci30 <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-13">    rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_node</span>(<span class="at" style="color: #657422;">xpath =</span> <span class="st" style="color: #20794D;">"/html/body/div[2]/div/div/div/div[2]/div[2]/table"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-14">    rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_table</span>(<span class="at" style="color: #657422;">header =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-15">    tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-16">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-17">    purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">set_names</span>(</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;">"Coin"</span>,<span class="st" style="color: #20794D;">"Price"</span>,<span class="st" style="color: #20794D;">"Mkt Cap"</span>,<span class="st" style="color: #20794D;">"Daily Change"</span></span>
<span id="cb1-19">    )</span>
<span id="cb1-20"></span>
<span id="cb1-21">tbl <span class="ot" style="color: #003B4F;">&lt;-</span> tbl1 <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-22">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">union</span>(tbl2) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-23">  knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span>
<span id="cb1-24"></span>
<span id="cb1-25">tbl</span></code></pre></div>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<thead>
<tr class="header">
<th style="text-align: left;">Coin</th>
<th style="text-align: left;">Price</th>
<th style="text-align: left;">Mkt Cap</th>
<th style="text-align: left;">Daily Change</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Bitcoin</td>
<td style="text-align: left;">$27,767.24</td>
<td style="text-align: left;">$536,553,055,078</td>
<td style="text-align: left;">0.17%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ethereum</td>
<td style="text-align: left;">$1,735.32</td>
<td style="text-align: left;">$212,357,972,798</td>
<td style="text-align: left;">0.04%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BNB</td>
<td style="text-align: left;">$332.92</td>
<td style="text-align: left;">$52,565,516,823</td>
<td style="text-align: left;">0.13%</td>
</tr>
<tr class="even">
<td style="text-align: left;">XRP</td>
<td style="text-align: left;">$0.37</td>
<td style="text-align: left;">$19,087,613,742</td>
<td style="text-align: left;">0.13%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Cardano</td>
<td style="text-align: left;">$0.33</td>
<td style="text-align: left;">$11,547,419,916</td>
<td style="text-align: left;">0.05%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Polygon</td>
<td style="text-align: left;">$1.10</td>
<td style="text-align: left;">$9,643,536,324</td>
<td style="text-align: left;">0.17%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Dogecoin</td>
<td style="text-align: left;">$0.07</td>
<td style="text-align: left;">$9,484,198,878</td>
<td style="text-align: left;">0.34%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Solana</td>
<td style="text-align: left;">$22.18</td>
<td style="text-align: left;">$8,507,167,040</td>
<td style="text-align: left;">0.12%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Polkadot</td>
<td style="text-align: left;">$6.10</td>
<td style="text-align: left;">$7,119,808,610</td>
<td style="text-align: left;">0.08%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Shiba Inu</td>
<td style="text-align: left;">$0.00</td>
<td style="text-align: left;">$6,169,390,592</td>
<td style="text-align: left;">0.24%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">TRON</td>
<td style="text-align: left;">$0.07</td>
<td style="text-align: left;">$5,936,468,687</td>
<td style="text-align: left;">0.14%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Litecoin</td>
<td style="text-align: left;">$78.42</td>
<td style="text-align: left;">$5,685,409,727</td>
<td style="text-align: left;">0.40%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Avalanche</td>
<td style="text-align: left;">$16.64</td>
<td style="text-align: left;">$5,418,625,875</td>
<td style="text-align: left;">0.06%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Uniswap</td>
<td style="text-align: left;">$6.19</td>
<td style="text-align: left;">$4,716,487,304</td>
<td style="text-align: left;">0.19%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Chainlink</td>
<td style="text-align: left;">$7.06</td>
<td style="text-align: left;">$3,649,558,739</td>
<td style="text-align: left;">0.06%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Cosmos</td>
<td style="text-align: left;">$11.56</td>
<td style="text-align: left;">$3,309,216,299</td>
<td style="text-align: left;">0.03%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">UNUS SED LEO</td>
<td style="text-align: left;">$3.35</td>
<td style="text-align: left;">$3,195,413,769</td>
<td style="text-align: left;">-0.55%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Toncoin</td>
<td style="text-align: left;">$2.38</td>
<td style="text-align: left;">$2,907,590,168</td>
<td style="text-align: left;">-0.62%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Monero</td>
<td style="text-align: left;">$151.58</td>
<td style="text-align: left;">$2,767,118,876</td>
<td style="text-align: left;">-0.01%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ethereum Classic</td>
<td style="text-align: left;">$19.58</td>
<td style="text-align: left;">$2,741,016,944</td>
<td style="text-align: left;">-6.84%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">OKB</td>
<td style="text-align: left;">$44.34</td>
<td style="text-align: left;">$2,660,455,327</td>
<td style="text-align: left;">0.56%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Bitcoin Cash</td>
<td style="text-align: left;">$130.60</td>
<td style="text-align: left;">$2,526,173,508</td>
<td style="text-align: left;">-0.48%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Stellar</td>
<td style="text-align: left;">$0.09</td>
<td style="text-align: left;">$2,293,156,708</td>
<td style="text-align: left;">-0.04%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Cronos</td>
<td style="text-align: left;">$0.07</td>
<td style="text-align: left;">$1,787,408,658</td>
<td style="text-align: left;">1.05%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">NEAR Protocol</td>
<td style="text-align: left;">$2.00</td>
<td style="text-align: left;">$1,728,135,015</td>
<td style="text-align: left;">0.26%</td>
</tr>
<tr class="even">
<td style="text-align: left;">VeChain</td>
<td style="text-align: left;">$0.02</td>
<td style="text-align: left;">$1,665,251,562</td>
<td style="text-align: left;">0.33%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Quant</td>
<td style="text-align: left;">$126.33</td>
<td style="text-align: left;">$1,525,183,149</td>
<td style="text-align: left;">0.31%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Internet Computer</td>
<td style="text-align: left;">$5.11</td>
<td style="text-align: left;">$1,516,076,264</td>
<td style="text-align: left;">0.19%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Algorand</td>
<td style="text-align: left;">$0.21</td>
<td style="text-align: left;">$1,498,361,340</td>
<td style="text-align: left;">0.41%</td>
</tr>
<tr class="even">
<td style="text-align: left;">ApeCoin</td>
<td style="text-align: left;">$4.06</td>
<td style="text-align: left;">$1,496,070,125</td>
<td style="text-align: left;">0.12%</td>
</tr>
</tbody>
</table>
</div>
</div>


</section>

 ]]></description>
  <category>crypto</category>
  <category>cci30</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-21/index.html</guid>
  <pubDate>Tue, 21 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Use of the apply family of functions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-17/index.html</link>
  <description><![CDATA[ 




<p>I am thrilled to announce that the R universe of packages <a href="https://www.spsanderson.com/healthyverse/"><code>{healthyverse}</code></a> has surpassed 60,000 downloads! Thank you to everyone who has downloaded and used these packages, your support is greatly appreciated.</p>
<p>For those who are not familiar, the {healthyverse} package is a collection of R packages focused on data science and analysis with an emphasis on healthcare. These packages are ever evolving and for the most part still in an experimental stage, but are maturing. These packages are:</p>
<ul>
<li><a href="https://www.spsanderson.com/healthyR/"><code>{healthyR}</code></a></li>
<li><a href="https://www.spsanderson.com/healthyR.ts/"><code>{healthyR.ts}</code></a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/"><code>{healthyR.ai}</code></a></li>
<li><a href="https://www.spsanderson.com/healthyR.data/"><code>{healthyR.data}</code></a></li>
<li><a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a></li>
<li><a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a></li>
</ul>
<p>I am continuously working on updates and improvements to the {healthyverse} package, and I hope to release them soon. Some of the updates include bug fixes, new functionality, and enhancements to existing functions.</p>
<p>Additionally, I want to encourage users who are interested in contributing to the {healthyverse} package to submit pull requests. Contributions can be in the form of bug fixes, new functions, or enhancements to existing ones. I am always open to feedback and suggestions on how to improve these packages.</p>
<p>Once again, thank you to everyone who has downloaded and used the {healthyverse} package. Your support motivates me to continue working on this project and making it the best it can be.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-17/60k.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">60k</figcaption><p></p>
</figure>
</div>



 ]]></description>
  <category>thanks</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-17/index.html</guid>
  <pubDate>Fri, 17 Mar 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-17/60k.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Use of the apply family of functions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-10/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post I will talk about the use of the R functions <code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, <code>tapply()</code>, and <code>vapply()</code> with examples.</p>
<p>These functions are all designed to help users apply a function to a set of data in R, but they differ in their input and output types, as well as in the way they handle missing values and other complexities. By using the right function for your particular problem, you can make your code more efficient and easier to read.</p>
<p>Let’s start with the basics.</p>
<section id="the-basics" class="level2">
<h2 class="anchored" data-anchor-id="the-basics">The Basics</h2>
<p>Before we dive into the details of each function, let’s define some terms:</p>
<ul>
<li>A vector is a one-dimensional array of data, like a list of numbers or strings.</li>
<li>A matrix is a two-dimensional array of data, like a table of numbers.</li>
<li>A data frame is a two-dimensional object that can hold different types of data, like a spreadsheet.</li>
<li>A list is a collection of objects, which can be of different types, like a shopping bag full of different items.</li>
</ul>
<p>Each of the five functions we’ll discuss here takes a list as input (although some can also take vectors or matrices). Let’s create a list object to use in our examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">my_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">a =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">b =</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">c =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>)),</span>
<span id="cb1-5">  <span class="at" style="color: #657422;">d =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">e =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="st" style="color: #20794D;">"foo"</span>, <span class="st" style="color: #20794D;">"bar"</span>, <span class="st" style="color: #20794D;">"baz"</span>)</span>
<span id="cb1-7">)</span></code></pre></div>
</div>
<p>This list contains five elements:</p>
<ul>
<li>A vector of numbers (a)</li>
<li>A matrix of numbers (b)</li>
<li>A data frame with two columns (c)</li>
<li>A vector of numbers with a missing value (d)</li>
<li>A list of character strings (e)</li>
</ul>
<p>Now that we have our data, let’s look at each of the functions in turn.</p>
</section>
<section id="the-functions" class="level2">
<h2 class="anchored" data-anchor-id="the-functions">The Functions</h2>
<p><strong>apply()</strong></p>
<p>The <code>apply()</code> function applies a function to the rows or columns of a matrix or array. It is most commonly used with matrices, but can also be used with higher-dimensional arrays. The function takes three arguments:</p>
<ul>
<li>The matrix or array to apply the function to</li>
<li>The margin (1 for rows, 2 for columns, or a vector of dimensions)</li>
<li>The function to apply</li>
</ul>
<p>Let’s apply the <code>mean()</code> function to the columns of our matrix in <code>my_list$b</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">apply</span>(my_list<span class="sc" style="color: #5E5E5E;">$</span>b, <span class="dv" style="color: #AD0000;">2</span>, mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.5 3.5 5.5</code></pre>
</div>
</div>
<p>This will return a vector of means for each column of the matrix</p>
<p><strong>lapply()</strong></p>
<p>The <code>lapply()</code> function applies a function to each element of a list and returns a list of the results. It takes two arguments:</p>
<ul>
<li>The list to apply the function to</li>
<li>The function to apply</li>
</ul>
<p>Let’s apply the <code>class()</code> function to each element of our list:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">lapply</span>(my_list, class)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$a
[1] "numeric"

$b
[1] "matrix" "array" 

$c
[1] "data.frame"

$d
[1] "numeric"

$e
[1] "list"</code></pre>
</div>
</div>
<p>This will return a list of the classes of each element.</p>
<p><strong>sapply()</strong></p>
<p>The <code>sapply()</code> function is similar to <code>lapply()</code>, but it simplifies the output to a vector or matrix if possible. It takes the same two arguments as <code>lapply()</code>:</p>
<ul>
<li>The list to apply the function</li>
<li>The function to apply</li>
</ul>
<p>Let’s apply the <code>length()</code> function to each element of our list using sapply():</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">sapply</span>(my_list, length)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a b c d e 
3 6 2 3 3 </code></pre>
</div>
</div>
<p>This will return a vector of lengths for each element.</p>
<p><strong>tapply()</strong></p>
<p>The <code>tapply()</code> function applies a function to subsets of a vector or data frame, grouped by one or more factors. It takes three arguments:</p>
<ul>
<li>The vector or data frame to apply the function to</li>
<li>The factor(s) to group the data by</li>
<li>The function to apply</li>
</ul>
<p>Let’s apply the <code>mean()</code> function to the elements of our vector <code>my_list$d</code>, grouped by whether they are missing or not:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">tapply</span>(my_list<span class="sc" style="color: #5E5E5E;">$</span>d, <span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(my_list<span class="sc" style="color: #5E5E5E;">$</span>d), mean)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FALSE  TRUE 
   NA     5 </code></pre>
</div>
</div>
<p>This will return a vector of means for each group where they are NOT NA.</p>
<p><strong>vapply()</strong></p>
<p>The <code>vapply()</code> function is similar to sapply(), but allows the user to specify the output type and length, making it more efficient and less prone to errors. It takes four arguments:</p>
<ul>
<li>The list to apply the function to</li>
<li>The function to apply</li>
<li>The output type of the function</li>
<li>The length of the output vector or matrix</li>
</ul>
<p>Let’s apply the <code>length()</code> function to each element of our list, specifying that the output type is an integer and the length is 1:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">vapply</span>(my_list, length, <span class="fu" style="color: #4758AB;">integer</span>(<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>a b c d e 
3 6 2 3 3 </code></pre>
</div>
</div>
<p>This will return a matrix of lengths for each element, with 1 row:</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we have covered the basics of the <code>apply()</code>, <code>lapply()</code>, <code>sapply()</code>, <code>tapply()</code>, and <code>vapply()</code> functions in R. These functions are all useful for applying a function to a set of data in R, but they differ in their input and output types, as well as in the way they handle missing values and other complexities. By using the right function for your particular problem, you can make your code more efficient and easier to read.</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>apply</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-10/index.html</guid>
  <pubDate>Fri, 10 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Multiple Solutions to speedup tidy_bernoulli() with {data.table}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I had just recently posted on making an attempt to speedup computations with my package <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> using a purely data.table solution, yes of course I can use <code>{dtplyr}</code> or <code>{tidytable}</code> but that not the challenge put to me.</p>
<p>My original attempt was worse than the original solution of <code>tidy_bernoulli()</code>. After I posted on Mastadon, LinkedIn and Reddit, I recieved potential solutions from each site by users. Let’s check them out below.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>First let’s load in the necessary libraries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span></code></pre></div>
</div>
<p>Now let’s look at the different solutions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># My original new function</span></span>
<span id="cb2-2">new_func <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_sims, n, pr) {</span>
<span id="cb2-3"></span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create a data.table with one row per simulation</span></span>
<span id="cb2-5">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(<span class="at" style="color: #657422;">sim_number =</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, num_sims, <span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb2-6"></span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;"># Group the data by sim_number and add columns for x and y</span></span>
<span id="cb2-8">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb2-9">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n),</span>
<span id="cb2-10">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rbinom</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb2-11">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-12"></span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;"># Compute the density of the y values and add columns for dx and dy</span></span>
<span id="cb2-14">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb2-15">    <span class="at" style="color: #657422;">d =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">density</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">n =</span> n)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)] <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-16">               <span class="fu" style="color: #4758AB;">set_names</span>(<span class="st" style="color: #20794D;">"dx"</span>, <span class="st" style="color: #20794D;">"dy"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-17">               <span class="fu" style="color: #4758AB;">as_tibble</span>())</span>
<span id="cb2-18">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-19"></span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;"># Compute the p-values for the y values and add a column for p</span></span>
<span id="cb2-21">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb2-22">    <span class="at" style="color: #657422;">p =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb2-23">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-24"></span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;"># Compute the q-values for the p-values and add a column for q</span></span>
<span id="cb2-26">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb2-27">    <span class="at" style="color: #657422;">q =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">qbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(p), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb2-28">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-29"></span>
<span id="cb2-30">  <span class="co" style="color: #5E5E5E;"># Unnest the columns for x, y, d, p, and q</span></span>
<span id="cb2-31">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> sim_data[,</span>
<span id="cb2-32">                       <span class="fu" style="color: #4758AB;">unnest</span>(</span>
<span id="cb2-33">                         .SD,</span>
<span id="cb2-34">                         <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>, <span class="st" style="color: #20794D;">"d"</span>, <span class="st" style="color: #20794D;">"p"</span>, <span class="st" style="color: #20794D;">"q"</span>)</span>
<span id="cb2-35">                       ),</span>
<span id="cb2-36">                       by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-37"></span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># Remove the grouping</span></span>
<span id="cb2-39">  sim_data[, sim_number <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">as.factor</span>(sim_number)]</span>
<span id="cb2-40"></span>
<span id="cb2-41">  <span class="fu" style="color: #4758AB;">return</span>(sim_data)</span>
<span id="cb2-42">}</span>
<span id="cb2-43"></span>
<span id="cb2-44">reddit_func <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_sims, n, pr) {</span>
<span id="cb2-45">  sim_dat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(<span class="at" style="color: #657422;">sim_number =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_sims,<span class="at" style="color: #657422;">each=</span>n),</span>
<span id="cb2-46">                        <span class="at" style="color: #657422;">x          =</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n,num_sims))</span>
<span id="cb2-47"></span>
<span id="cb2-48">  sim_dat[, y <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rbinom</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr), by<span class="ot" style="color: #003B4F;">=</span>sim_number]</span>
<span id="cb2-49">  sim_dat[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"dx"</span>,<span class="st" style="color: #20794D;">"dy"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">density</span>(y,<span class="at" style="color: #657422;">n=</span>n)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>,<span class="st" style="color: #20794D;">"y"</span>)]    , by<span class="ot" style="color: #003B4F;">=</span>sim_number]</span>
<span id="cb2-50">  sim_dat[, p <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pbinom</span>(y, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr)    , by<span class="ot" style="color: #003B4F;">=</span>sim_number]</span>
<span id="cb2-51">  sim_dat[, q <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">qbinom</span>(p, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr)    , by<span class="ot" style="color: #003B4F;">=</span>sim_number]</span>
<span id="cb2-52">  </span>
<span id="cb2-53">  <span class="fu" style="color: #4758AB;">return</span>(sim_dat)</span>
<span id="cb2-54">}</span>
<span id="cb2-55"></span>
<span id="cb2-56">mastadon_func <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_sims, n, pr){</span>
<span id="cb2-57">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(<span class="at" style="color: #657422;">sim_number =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_sims</span>
<span id="cb2-58">  )[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span>( <span class="at" style="color: #657422;">x =</span> .(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n), <span class="at" style="color: #657422;">y=</span> .(<span class="fu" style="color: #4758AB;">rbinom</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))), sim_number</span>
<span id="cb2-59">  ][, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span>( <span class="at" style="color: #657422;">d =</span> .(<span class="fu" style="color: #4758AB;">density</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">n =</span> n)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'x'</span>,<span class="st" style="color: #20794D;">'y'</span>)] <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-60">                    <span class="fu" style="color: #4758AB;">as.data.table</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-61">                    <span class="fu" style="color: #4758AB;">setnames</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'dx'</span>,<span class="st" style="color: #20794D;">'dy'</span>))</span>
<span id="cb2-62">                  )</span>
<span id="cb2-63">            ), sim_number</span>
<span id="cb2-64">  ][, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span>( <span class="at" style="color: #657422;">p =</span> .(<span class="fu" style="color: #4758AB;">pbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))), sim_number</span>
<span id="cb2-65">  ][, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span>( <span class="at" style="color: #657422;">q =</span> .(<span class="fu" style="color: #4758AB;">qbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(p), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))), sim_number]</span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="fu" style="color: #4758AB;">cbind</span>(</span>
<span id="cb2-68">      sim_data[, <span class="fu" style="color: #4758AB;">lapply</span>(.SD, unlist), <span class="at" style="color: #657422;">by =</span> sim_number, <span class="at" style="color: #657422;">.SDcol =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'x'</span>,<span class="st" style="color: #20794D;">'y'</span>,<span class="st" style="color: #20794D;">'p'</span>,<span class="st" style="color: #20794D;">'q'</span>)],</span>
<span id="cb2-69">      <span class="fu" style="color: #4758AB;">rbindlist</span>(sim_data<span class="sc" style="color: #5E5E5E;">$</span>d)</span>
<span id="cb2-70">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-71">    <span class="fu" style="color: #4758AB;">setcolorder</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'sim_number'</span>,<span class="st" style="color: #20794D;">'x'</span>,<span class="st" style="color: #20794D;">'y'</span>,<span class="st" style="color: #20794D;">'dx'</span>,<span class="st" style="color: #20794D;">'dy'</span>))</span>
<span id="cb2-72">    </span>
<span id="cb2-73">    <span class="fu" style="color: #4758AB;">return</span>(sim_data)</span>
<span id="cb2-74">}</span>
<span id="cb2-75"></span>
<span id="cb2-76">linkedin_func <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_sims, n, pr) {</span>
<span id="cb2-77"></span>
<span id="cb2-78">  <span class="co" style="color: #5E5E5E;"># Create a data.table with one row per simulation</span></span>
<span id="cb2-79">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">CJ</span>(<span class="at" style="color: #657422;">sim_number =</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_sims), <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n)</span>
<span id="cb2-80"></span>
<span id="cb2-81">  <span class="co" style="color: #5E5E5E;"># Group the data by sim_number and add columns for x and y</span></span>
<span id="cb2-82">  sim_data[, y <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rbinom</span>(<span class="at" style="color: #657422;">n =</span> .N, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr)]</span>
<span id="cb2-83"></span>
<span id="cb2-84"></span>
<span id="cb2-85">  <span class="co" style="color: #5E5E5E;"># Compute the density of the y values and add columns for dx and dy</span></span>
<span id="cb2-86">  sim_data[, <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"dx"</span>, <span class="st" style="color: #20794D;">"dy"</span>) <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">density</span>(y, <span class="at" style="color: #657422;">n =</span> n)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)], by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb2-87"></span>
<span id="cb2-88">  <span class="co" style="color: #5E5E5E;"># Compute the p-values for the y values and add a column for p</span></span>
<span id="cb2-89">  sim_data[, p <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pbinom</span>(y, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr)]</span>
<span id="cb2-90"></span>
<span id="cb2-91">  <span class="co" style="color: #5E5E5E;"># Compute the q-values for the p-values and add a column for q</span></span>
<span id="cb2-92">  sim_data[, q <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">qbinom</span>(p, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr)]</span>
<span id="cb2-93">  <span class="fu" style="color: #4758AB;">setkey</span>(sim_data, <span class="cn" style="color: #8f5902;">NULL</span>) <span class="co" style="color: #5E5E5E;"># needed only to compare with new_func</span></span>
<span id="cb2-94">  <span class="fu" style="color: #4758AB;">return</span>(sim_data)</span>
<span id="cb2-95">}</span></code></pre></div>
</div>
<p>All of the functions work in the same set of three arguments as input: * <code>num_sims</code>: an integer value that specifies the number of simulations to run * <code>n</code>: an integer value that specifies the sample size * <code>pr</code>: a numeric value that specifies the probability of success</p>
<p>The functions use the <code>data.table</code> package to create a data table named sim_dat/sim_data. The data table has two columns: sim_number and x. The sim_number column represents the simulation number, and x column represents the observation number.</p>
<p>The functions then generate random binary data using the <code>rbinom</code> function from the <code>stats</code> package. The function generates n binary data points for each simulation number (sim_number) using the input parameter pr as the probability of success. The resulting binary data points are stored in the y column of sim_dat/data.</p>
<p>Next, the function calculates the density of y using the density function from the stats package. The function calculates the density separately for each simulation number (sim_number) and stores the resulting values in the dx and dy columns of sim_dat/data.</p>
<p>The functions then calculate the cumulative probability (p) of each binary data point using the pbinom function from the stats package. The function calculates the cumulative probability separately for each simulation number (sim_number) and stores the resulting values in the p column of sim_dat.</p>
<p>Finally, the functions calculate the inverse of the cumulative probability (q) using the qbinom function from the stats package. The function calculates the inverse of the cumulative probability separately for each simulation number (sim_number) and stores the resulting values in the q column of sim_dat.</p>
<p>The functions then return the data table containing the results of the simulations.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>How do they stack up to each other? Lets see!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb3-2">pr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb3-3">num_sims <span class="ot" style="color: #003B4F;">&lt;-</span> sims <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb3-6">  <span class="st" style="color: #20794D;">"tidy_bernoulli()"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">tidy_bernoulli</span>(<span class="at" style="color: #657422;">.n =</span> n, <span class="at" style="color: #657422;">.prob =</span> pr, <span class="at" style="color: #657422;">.num_sims =</span> sims)</span>
<span id="cb3-8">  },</span>
<span id="cb3-9">  <span class="st" style="color: #20794D;">"my.first.attempt"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">new_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">pr =</span> pr, <span class="at" style="color: #657422;">num_sims =</span> sims)</span>
<span id="cb3-11">  },</span>
<span id="cb3-12">  <span class="st" style="color: #20794D;">"linkedin.attempt"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;">linkedin_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">pr =</span> pr, <span class="at" style="color: #657422;">num_sims =</span> sims)</span>
<span id="cb3-14">  },</span>
<span id="cb3-15">  <span class="st" style="color: #20794D;">"mastadon.attempt"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;">mastadon_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">pr =</span> pr, <span class="at" style="color: #657422;">num_sims =</span> sims)</span>
<span id="cb3-17">  },</span>
<span id="cb3-18">  <span class="st" style="color: #20794D;">"reddit.attempt"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-19">    <span class="fu" style="color: #4758AB;">reddit_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">pr =</span> pr, <span class="at" style="color: #657422;">num_sims =</span> sims)</span>
<span id="cb3-20">  },</span>
<span id="cb3-21">  <span class="at" style="color: #657422;">replications =</span> <span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb3-22">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>  )</span>
<span id="cb3-23">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-24">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              test replications elapsed relative user.self sys.self
1 linkedin.attempt          200    0.84    1.000      0.64     0.00
2   reddit.attempt          200    0.86    1.024      0.69     0.03
3 mastadon.attempt          200    1.57    1.869      1.17     0.08
4 tidy_bernoulli()          200    6.47    7.702      4.68     0.11
5 my.first.attempt          200    8.82   10.500      6.67     0.01</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <category>data.table</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-09/index.html</guid>
  <pubDate>Thu, 09 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Getting NYS Home Heating Oil Prices with {rvest}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you live in New York and rely on heating oil to keep your home warm during the colder months, you know how important it is to keep track of heating oil prices. Fortunately, with a bit of R code, you can easily access the latest heating oil prices in New York.</p>
<p>The code uses the <code>{dplyr}</code> package to clean and manipulate the data, as well as the <code>{timetk}</code> package to plot the time series. Here’s a breakdown of what the code does:</p>
<ul>
<li>First, it loads the necessary packages and sets the URL for the data source.</li>
<li>Next, it reads the HTML from the URL using the <code>read_html</code> function from the <code>xml2</code> package.</li>
<li>It then uses the <code>html_node</code> function from the <code>rvest</code> package to extract the HTML node that contains the data table.</li>
</ul>
<p>The resulting data table is then cleaned and transformed using <code>dplyr</code> functions such as <code>html_table</code>, <code>as_tibble</code>, <code>set_names</code>, <code>select</code>, <code>mutate</code>, and <code>arrange</code>.</p>
<p>Finally, the resulting time series data is plotted using <code>plot_time_series</code> from the <code>timetk</code> package.</p>
<p>To run this code, you will need to have these packages installed on your machine. You can install them using the install.packages function in R. Here’s how you can install the packages:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"dplyr"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"xml2"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"rvest"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"tibble"</span>)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"purrr"</span>)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"lubridate"</span>)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"timetk"</span>)</span></code></pre></div>
</div>
<p>Once you have installed the packages, you can copy and paste the code into your R console or RStudio and run it to get the latest heating oil prices in New York.</p>
<p>In conclusion, the code above provides a simple and efficient way to access and visualize heating oil prices in New York using R. By keeping track of these prices, you can make informed decisions about when to buy heating oil and how much to purchase, ultimately saving you money on your heating bills.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Now let’s run it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">url  <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://www.eia.gov/opendata/qb.php?sdid=PET.W_EPD2F_PRS_SNY_DPG.W"</span></span>
<span id="cb2-2">page <span class="ot" style="color: #003B4F;">&lt;-</span> xml2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_html</span>(url)</span>
<span id="cb2-3">node <span class="ot" style="color: #003B4F;">&lt;-</span> rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_node</span>(</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">x =</span> page</span>
<span id="cb2-5">    , <span class="at" style="color: #657422;">xpath =</span> <span class="st" style="color: #20794D;">"/html/body/div[1]/section/div/div/div[2]/div[1]/table"</span></span>
<span id="cb2-6">)</span>
<span id="cb2-7">ny_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> node <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-8">    rvest<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">html_table</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-9">    tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-10">    purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">set_names</span>(<span class="st" style="color: #20794D;">'series_name'</span>,<span class="st" style="color: #20794D;">'period'</span>,<span class="st" style="color: #20794D;">'frequency'</span>,<span class="st" style="color: #20794D;">'value'</span>,<span class="st" style="color: #20794D;">'units'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-11">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(period, frequency, value, units, series_name) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-12">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">period =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ymd</span>(period)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-13">    dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">arrange</span>(period)</span>
<span id="cb2-14"></span>
<span id="cb2-15">ny_tbl <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-16">    timetk<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_time_series</span>(<span class="at" style="color: #657422;">.date_var =</span> period, <span class="at" style="color: #657422;">.value =</span> value)</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item-overflow-hidden html-fill-item" id="htmlwidget-c7ccb9aefae8486dd3d4" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-c7ccb9aefae8486dd3d4">{"x":{"data":[{"x":["1990-10-01","1990-10-15","1990-11-05","1990-11-19","1990-12-03","1990-12-17","1991-01-07","1991-01-21","1991-02-04","1991-02-18","1991-03-04","1991-03-18","1991-10-07","1991-10-21","1991-11-04","1991-11-18","1991-12-02","1991-12-16","1992-01-06","1992-01-20","1992-02-03","1992-02-17","1992-03-02","1992-03-16","1992-10-05","1992-10-19","1992-11-02","1992-11-16","1992-12-07","1992-12-21","1993-01-04","1993-01-18","1993-02-01","1993-02-15","1993-03-01","1993-03-15","1993-10-04","1993-10-18","1993-11-01","1993-11-15","1993-12-06","1993-12-20","1994-01-03","1994-01-17","1994-01-31","1994-02-07","1994-02-14","1994-02-21","1994-02-28","1994-03-07","1994-03-21","1994-10-03","1994-10-17","1994-11-07","1994-11-21","1994-12-05","1994-12-19","1995-01-02","1995-01-16","1995-02-06","1995-02-20","1995-03-06","1995-03-20","1995-10-02","1995-10-16","1995-11-06","1995-11-20","1995-12-04","1995-12-18","1996-01-01","1996-01-15","1996-02-05","1996-02-19","1996-03-04","1996-03-18","1996-10-07","1996-10-21","1996-10-28","1996-11-04","1996-11-11","1996-11-18","1996-11-25","1996-12-02","1996-12-09","1996-12-16","1996-12-23","1996-12-30","1997-01-06","1997-01-13","1997-01-20","1997-01-27","1997-02-03","1997-02-17","1997-03-03","1997-03-17","1997-10-06","1997-10-20","1997-11-03","1997-11-17","1997-12-01","1997-12-15","1998-01-05","1998-01-19","1998-02-02","1998-02-16","1998-03-02","1998-03-16","1998-10-05","1998-10-19","1998-11-02","1998-11-16","1998-12-07","1998-12-21","1999-01-04","1999-01-18","1999-02-01","1999-02-15","1999-03-01","1999-03-15","1999-10-04","1999-10-18","1999-11-01","1999-11-15","1999-12-06","1999-12-20","2000-01-03","2000-01-17","2000-01-24","2000-01-31","2000-02-07","2000-02-14","2000-02-21","2000-02-28","2000-03-06","2000-03-13","2000-03-20","2000-10-02","2000-10-09","2000-10-16","2000-10-23","2000-10-30","2000-11-06","2000-11-13","2000-11-20","2000-11-27","2000-12-04","2000-12-11","2000-12-18","2000-12-25","2001-01-01","2001-01-08","2001-01-15","2001-01-22","2001-01-29","2001-02-05","2001-02-12","2001-02-19","2001-02-26","2001-03-05","2001-03-12","2001-03-19","2001-10-01","2001-10-08","2001-10-15","2001-10-22","2001-10-29","2001-11-05","2001-11-12","2001-11-19","2001-11-26","2001-12-03","2001-12-10","2001-12-17","2001-12-24","2001-12-31","2002-01-07","2002-01-14","2002-01-21","2002-01-28","2002-02-04","2002-02-11","2002-02-18","2002-02-25","2002-03-04","2002-03-11","2002-03-18","2002-10-07","2002-10-14","2002-10-21","2002-10-28","2002-11-04","2002-11-11","2002-11-18","2002-11-25","2002-12-02","2002-12-09","2002-12-16","2002-12-23","2002-12-30","2003-01-06","2003-01-13","2003-01-20","2003-01-27","2003-02-03","2003-02-10","2003-02-17","2003-02-24","2003-03-03","2003-03-10","2003-03-17","2003-10-06","2003-10-13","2003-10-20","2003-10-27","2003-11-03","2003-11-10","2003-11-17","2003-11-24","2003-12-01","2003-12-08","2003-12-15","2003-12-22","2003-12-29","2004-01-05","2004-01-12","2004-01-19","2004-01-26","2004-02-02","2004-02-09","2004-02-16","2004-02-23","2004-03-01","2004-03-08","2004-03-15","2004-10-04","2004-10-11","2004-10-18","2004-10-25","2004-11-01","2004-11-08","2004-11-15","2004-11-22","2004-11-29","2004-12-06","2004-12-13","2004-12-20","2004-12-27","2005-01-03","2005-01-10","2005-01-17","2005-01-24","2005-01-31","2005-02-07","2005-02-14","2005-02-21","2005-02-28","2005-03-07","2005-03-14","2005-10-03","2005-10-10","2005-10-17","2005-10-24","2005-10-31","2005-11-07","2005-11-14","2005-11-21","2005-11-28","2005-12-05","2005-12-12","2005-12-19","2005-12-26","2006-01-02","2006-01-09","2006-01-16","2006-01-23","2006-01-30","2006-02-06","2006-02-13","2006-02-20","2006-02-27","2006-03-06","2006-03-13","2006-10-02","2006-10-09","2006-10-16","2006-10-23","2006-10-30","2006-11-06","2006-11-13","2006-11-20","2006-11-27","2006-12-04","2006-12-11","2006-12-18","2006-12-25","2007-01-01","2007-01-08","2007-01-15","2007-01-22","2007-01-29","2007-02-05","2007-02-12","2007-02-19","2007-02-26","2007-03-05","2007-03-12","2007-10-08","2007-10-15","2007-10-22","2007-10-29","2007-11-05","2007-11-12","2007-11-19","2007-11-26","2007-12-03","2007-12-10","2007-12-17","2007-12-24","2007-12-31","2008-01-07","2008-01-14","2008-01-21","2008-01-28","2008-02-04","2008-02-11","2008-02-18","2008-02-25","2008-03-03","2008-03-10","2008-03-17","2008-10-06","2008-10-13","2008-10-20","2008-10-27","2008-11-03","2008-11-10","2008-11-17","2008-11-24","2008-12-01","2008-12-08","2008-12-15","2008-12-22","2008-12-29","2009-01-05","2009-01-12","2009-01-19","2009-01-26","2009-02-02","2009-02-09","2009-02-16","2009-02-23","2009-03-02","2009-03-09","2009-03-16","2009-10-05","2009-10-12","2009-10-19","2009-10-26","2009-11-02","2009-11-09","2009-11-16","2009-11-23","2009-11-30","2009-12-07","2009-12-14","2009-12-21","2009-12-28","2010-01-04","2010-01-11","2010-01-18","2010-01-25","2010-02-01","2010-02-08","2010-02-15","2010-02-22","2010-03-01","2010-03-08","2010-03-15","2010-10-04","2010-10-11","2010-10-18","2010-10-25","2010-11-01","2010-11-08","2010-11-15","2010-11-22","2010-11-29","2010-12-06","2010-12-13","2010-12-20","2010-12-27","2011-01-03","2011-01-10","2011-01-17","2011-01-24","2011-01-31","2011-02-07","2011-02-14","2011-02-21","2011-02-28","2011-03-07","2011-03-14","2011-10-03","2011-10-10","2011-10-17","2011-10-24","2011-10-31","2011-11-07","2011-11-14","2011-11-21","2011-11-28","2011-12-05","2011-12-12","2011-12-19","2011-12-26","2012-01-02","2012-01-09","2012-01-16","2012-01-23","2012-01-30","2012-02-06","2012-02-13","2012-02-20","2012-02-27","2012-03-05","2012-03-12","2012-03-19","2012-10-01","2012-10-08","2012-10-15","2012-10-22","2012-10-29","2012-11-05","2012-11-12","2012-11-19","2012-11-26","2012-12-03","2012-12-10","2012-12-17","2012-12-24","2012-12-31","2013-01-07","2013-01-14","2013-01-21","2013-01-28","2013-02-04","2013-02-11","2013-02-18","2013-02-25","2013-03-04","2013-03-11","2013-03-18","2013-10-07","2013-10-14","2013-10-21","2013-10-28","2013-11-04","2013-11-11","2013-11-18","2013-11-25","2013-12-02","2013-12-09","2013-12-16","2013-12-23","2013-12-30","2014-01-06","2014-01-13","2014-01-20","2014-01-27","2014-02-03","2014-02-10","2014-02-17","2014-02-24","2014-03-03","2014-03-10","2014-03-17","2014-10-13","2014-10-20","2014-10-27","2014-11-03","2014-11-10","2014-11-17","2014-11-24","2014-12-01","2014-12-08","2014-12-15","2014-12-22","2014-12-29","2015-01-05","2015-01-12","2015-01-19","2015-01-26","2015-02-02","2015-02-09","2015-02-16","2015-02-23","2015-03-02","2015-03-09","2015-03-16","2015-03-23","2015-03-30","2015-10-05","2015-10-12","2015-10-19","2015-10-26","2015-11-02","2015-11-09","2015-11-16","2015-11-23","2015-11-30","2015-12-07","2015-12-14","2015-12-21","2015-12-28","2016-01-04","2016-01-11","2016-01-18","2016-01-25","2016-02-01","2016-02-08","2016-02-15","2016-02-22","2016-02-29","2016-03-07","2016-03-14","2016-03-21","2016-03-28","2016-10-03","2016-10-10","2016-10-17","2016-10-24","2016-10-31","2016-11-07","2016-11-14","2016-11-21","2016-11-28","2016-12-05","2016-12-12","2016-12-19","2016-12-26","2017-01-02","2017-01-09","2017-01-16","2017-01-23","2017-01-30","2017-02-06","2017-02-13","2017-02-20","2017-02-27","2017-03-06","2017-03-13","2017-03-20","2017-03-27","2017-10-02","2017-10-09","2017-10-16","2017-10-23","2017-10-30","2017-11-06","2017-11-13","2017-11-20","2017-11-27","2017-12-04","2017-12-11","2017-12-18","2017-12-25","2018-01-01","2018-01-08","2018-01-15","2018-01-22","2018-01-29","2018-02-05","2018-02-12","2018-02-19","2018-02-26","2018-03-05","2018-03-12","2018-03-19","2018-03-26","2018-10-01","2018-10-08","2018-10-15","2018-10-22","2018-10-29","2018-11-05","2018-11-12","2018-11-19","2018-11-26","2018-12-03","2018-12-10","2018-12-17","2018-12-24","2018-12-31","2019-01-07","2019-01-14","2019-01-21","2019-01-28","2019-02-04","2019-02-11","2019-02-18","2019-02-25","2019-03-04","2019-03-11","2019-03-18","2019-03-25","2019-10-07","2019-10-14","2019-10-21","2019-10-28","2019-11-04","2019-11-11","2019-11-18","2019-11-25","2019-12-02","2019-12-09","2019-12-16","2019-12-23","2019-12-30","2020-01-06","2020-01-13","2020-01-20","2020-01-27","2020-02-03","2020-02-10","2020-02-17","2020-02-24","2020-03-02","2020-03-09","2020-03-16","2020-03-23","2020-03-30","2020-10-05","2020-10-12","2020-10-19","2020-10-26","2020-11-02","2020-11-09","2020-11-16","2020-11-23","2020-11-30","2020-12-07","2020-12-14","2020-12-21","2020-12-28","2021-01-04","2021-01-11","2021-01-18","2021-01-25","2021-02-01","2021-02-08","2021-02-15","2021-02-22","2021-03-01","2021-03-08","2021-03-15","2021-03-22","2021-03-29","2021-10-04","2021-10-11","2021-10-18","2021-10-25","2021-11-01","2021-11-08","2021-11-15","2021-11-22","2021-11-29","2021-12-06","2021-12-13","2021-12-20","2021-12-27","2022-01-03","2022-01-10","2022-01-17","2022-01-24","2022-01-31","2022-02-07","2022-02-14","2022-02-21","2022-02-28","2022-03-07","2022-03-14","2022-03-21","2022-03-28","2022-10-03","2022-10-10","2022-10-17","2022-10-24","2022-10-31","2022-11-07","2022-11-14","2022-11-21","2022-11-28","2022-12-05","2022-12-12","2022-12-19","2022-12-26","2023-01-02","2023-01-09","2023-01-16","2023-01-23","2023-01-30","2023-02-06","2023-02-13","2023-02-20","2023-02-27"],"y":[1.342,1.4,1.392,1.385,1.366,1.366,1.32,1.339,1.294,1.265,1.237,1.186,1.044,1.081,1.099,1.122,1.118,1.11,1.091,1.088,1.088,1.086,1.081,1.076,1.033,1.058,1.069,1.071,1.07,1.071,1.073,1.073,1.074,1.074,1.077,1.077,1.034,1.038,1.044,1.047,1.047,1.039,1.038,1.053,1.065,1.088,1.093,1.094,1.09,1.09,1.081,1.049,1.051,1.054,1.055,1.068,1.071,1.079,1.083,1.086,1.089,1.086,1.082,1.051,1.057,1.068,1.072,1.086,1.113,1.155,1.18,1.165,1.191,1.203,1.2,1.255,1.291,1.289,1.276,1.272,1.275,1.282,1.282,1.302,1.295,1.306,1.299,1.296,1.303,1.297,1.298,1.291,1.274,1.268,1.238,1.133,1.141,1.145,1.152,1.155,1.154,1.155,1.153,1.15,1.143,1.129,1.118,1.021,1.029,1.029,1.028,1.023,1.022,1.021,1.029,1.031,1.025,1.02,1.017,1.137,1.143,1.157,1.197,1.249,1.26,1.282,1.331,1.775,1.852,2.123,1.777,1.636,1.579,1.558,1.555,1.53,1.608,1.614,1.674,1.652,1.65,1.648,1.65,1.69,1.715,1.727,1.733,1.715,1.711,1.71,1.702,1.686,1.682,1.674,1.644,1.64,1.625,1.611,1.601,1.586,1.565,1.366,1.352,1.348,1.34,1.343,1.313,1.303,1.283,1.28,1.276,1.274,1.272,1.277,1.289,1.296,1.282,1.264,1.264,1.27,1.262,1.263,1.264,1.267,1.318,1.335,1.388,1.403,1.405,1.407,1.413,1.407,1.403,1.413,1.418,1.43,1.464,1.498,1.539,1.557,1.571,1.589,1.623,1.65,1.811,1.833,1.871,1.966,1.991,1.933,1.493,1.519,1.504,1.509,1.495,1.504,1.524,1.535,1.535,1.552,1.58,1.619,1.626,1.628,1.703,1.723,1.746,1.746,1.737,1.73,1.72,1.719,1.715,1.706,1.944,2.049,2.129,2.199,2.205,2.181,2.207,2.206,2.214,2.144,2.157,2.177,2.16,2.145,2.149,2.147,2.167,2.211,2.173,2.147,2.137,2.195,2.222,2.25,2.809,2.75,2.767,2.728,2.712,2.649,2.615,2.604,2.58,2.585,2.591,2.603,2.601,2.6,2.598,2.581,2.597,2.6,2.586,2.582,2.55,2.56,2.581,2.554,2.541,2.534,2.516,2.509,2.497,2.478,2.489,2.482,2.49,2.566,2.572,2.558,2.56,2.534,2.517,2.484,2.46,2.5,2.53,2.576,2.568,2.579,2.594,2.586,2.869,2.889,2.968,3.051,3.224,3.322,3.328,3.407,3.402,3.398,3.416,3.418,3.465,3.524,3.495,3.476,3.476,3.461,3.461,3.54,3.563,3.655,3.753,3.942,3.797,3.503,3.347,3.242,3.168,3.101,3.025,2.908,2.899,2.716,2.712,2.597,2.484,2.532,2.624,2.587,2.58,2.576,2.554,2.525,2.449,2.447,2.425,2.393,2.709,2.742,2.839,2.885,2.913,2.926,2.91,2.917,2.916,2.947,2.931,2.938,2.973,3.046,3.154,3.109,3.068,3.051,3.018,3.037,3.099,3.066,3.08,3.086,3.099,3.13,3.149,3.159,3.164,3.281,3.318,3.302,3.309,3.392,3.429,3.441,3.489,3.51,3.562,3.638,3.667,3.702,3.748,3.764,3.791,3.951,4.021,4.025,3.876,3.895,4.015,4.014,4.063,4.079,4.133,4.14,4.096,4.102,4.076,4.059,4.067,4.083,4.144,4.152,4.153,4.169,4.18,4.232,4.238,4.273,4.255,4.266,4.276,4.237,4.264,4.308,4.281,4.266,4.276,4.299,4.308,4.338,4.326,4.28,4.231,4.237,4.232,4.259,4.25,4.274,4.302,4.342,4.392,4.402,4.38,4.312,4.314,4.289,4.103,4.121,4.119,4.089,4.077,4.05,4.06,4.113,4.141,4.171,4.165,4.181,4.228,4.197,4.192,4.27,4.438,4.482,4.525,4.46,4.491,4.469,4.417,4.338,3.736,3.714,3.701,3.69,3.674,3.647,3.62,3.573,3.453,3.373,3.323,3.298,3.203,3.134,3.054,3.036,3.014,3.123,3.296,3.423,3.507,3.43,3.273,3.152,3.131,2.707,2.718,2.704,2.713,2.709,2.718,2.668,2.663,2.625,2.6,2.543,2.492,2.405,2.454,2.455,2.424,2.352,2.394,2.416,2.399,2.378,2.365,2.369,2.405,2.411,2.407,2.604,2.688,2.684,2.707,2.706,2.678,2.667,2.678,2.689,2.792,2.82,2.842,2.835,2.896,2.903,2.887,2.88,2.892,2.929,2.924,2.924,2.922,2.891,2.883,2.863,2.863,2.976,2.951,2.973,2.982,3.013,3.022,3.076,3.083,3.105,3.113,3.142,3.163,3.21,3.39,3.432,3.477,3.464,3.492,3.48,3.405,3.384,3.385,3.379,3.378,3.37,3.409,3.67,3.715,3.725,3.715,3.72,3.695,3.676,3.637,3.564,3.444,3.458,3.444,3.359,3.357,3.358,3.43,3.467,3.456,3.469,3.456,3.535,3.528,3.536,3.539,3.521,3.536,3.137,3.148,3.15,3.141,3.144,3.156,3.17,3.172,3.173,3.194,3.213,3.237,3.246,3.289,3.274,3.236,3.175,3.126,3.095,3.104,3.087,3.007,2.943,2.806,2.606,2.583,2.315,2.307,2.34,2.334,2.335,2.347,2.369,2.398,2.452,2.482,2.503,2.581,2.591,2.611,2.649,2.705,2.714,2.742,2.817,2.888,2.96,3,3.032,3.038,3.011,3.004,3.408,3.517,3.612,3.641,3.622,3.614,3.619,3.582,3.549,3.491,3.55,3.546,3.587,3.62,3.676,3.814,3.876,3.982,4.076,4.154,4.141,4.256,5.017,5.001,5.004,5.315,4.915,5.529,5.865,5.799,5.989,6.06,5.91,5.584,5.289,5.073,4.765,4.815,4.895,4.884,4.733,4.825,4.941,4.825,4.636,4.6,4.501,4.478],"text":["period: 1990-10-01<br />.value: 1.342","period: 1990-10-15<br />.value: 1.400","period: 1990-11-05<br />.value: 1.392","period: 1990-11-19<br />.value: 1.385","period: 1990-12-03<br />.value: 1.366","period: 1990-12-17<br />.value: 1.366","period: 1991-01-07<br />.value: 1.320","period: 1991-01-21<br />.value: 1.339","period: 1991-02-04<br />.value: 1.294","period: 1991-02-18<br />.value: 1.265","period: 1991-03-04<br />.value: 1.237","period: 1991-03-18<br />.value: 1.186","period: 1991-10-07<br />.value: 1.044","period: 1991-10-21<br />.value: 1.081","period: 1991-11-04<br />.value: 1.099","period: 1991-11-18<br />.value: 1.122","period: 1991-12-02<br />.value: 1.118","period: 1991-12-16<br />.value: 1.110","period: 1992-01-06<br />.value: 1.091","period: 1992-01-20<br />.value: 1.088","period: 1992-02-03<br />.value: 1.088","period: 1992-02-17<br />.value: 1.086","period: 1992-03-02<br />.value: 1.081","period: 1992-03-16<br />.value: 1.076","period: 1992-10-05<br />.value: 1.033","period: 1992-10-19<br />.value: 1.058","period: 1992-11-02<br />.value: 1.069","period: 1992-11-16<br />.value: 1.071","period: 1992-12-07<br />.value: 1.070","period: 1992-12-21<br />.value: 1.071","period: 1993-01-04<br />.value: 1.073","period: 1993-01-18<br />.value: 1.073","period: 1993-02-01<br />.value: 1.074","period: 1993-02-15<br />.value: 1.074","period: 1993-03-01<br />.value: 1.077","period: 1993-03-15<br />.value: 1.077","period: 1993-10-04<br />.value: 1.034","period: 1993-10-18<br />.value: 1.038","period: 1993-11-01<br />.value: 1.044","period: 1993-11-15<br />.value: 1.047","period: 1993-12-06<br />.value: 1.047","period: 1993-12-20<br />.value: 1.039","period: 1994-01-03<br />.value: 1.038","period: 1994-01-17<br />.value: 1.053","period: 1994-01-31<br />.value: 1.065","period: 1994-02-07<br />.value: 1.088","period: 1994-02-14<br />.value: 1.093","period: 1994-02-21<br />.value: 1.094","period: 1994-02-28<br />.value: 1.090","period: 1994-03-07<br />.value: 1.090","period: 1994-03-21<br />.value: 1.081","period: 1994-10-03<br />.value: 1.049","period: 1994-10-17<br />.value: 1.051","period: 1994-11-07<br />.value: 1.054","period: 1994-11-21<br />.value: 1.055","period: 1994-12-05<br />.value: 1.068","period: 1994-12-19<br />.value: 1.071","period: 1995-01-02<br />.value: 1.079","period: 1995-01-16<br />.value: 1.083","period: 1995-02-06<br />.value: 1.086","period: 1995-02-20<br />.value: 1.089","period: 1995-03-06<br />.value: 1.086","period: 1995-03-20<br />.value: 1.082","period: 1995-10-02<br />.value: 1.051","period: 1995-10-16<br />.value: 1.057","period: 1995-11-06<br />.value: 1.068","period: 1995-11-20<br />.value: 1.072","period: 1995-12-04<br />.value: 1.086","period: 1995-12-18<br />.value: 1.113","period: 1996-01-01<br />.value: 1.155","period: 1996-01-15<br />.value: 1.180","period: 1996-02-05<br />.value: 1.165","period: 1996-02-19<br />.value: 1.191","period: 1996-03-04<br />.value: 1.203","period: 1996-03-18<br />.value: 1.200","period: 1996-10-07<br />.value: 1.255","period: 1996-10-21<br />.value: 1.291","period: 1996-10-28<br />.value: 1.289","period: 1996-11-04<br />.value: 1.276","period: 1996-11-11<br />.value: 1.272","period: 1996-11-18<br />.value: 1.275","period: 1996-11-25<br />.value: 1.282","period: 1996-12-02<br />.value: 1.282","period: 1996-12-09<br />.value: 1.302","period: 1996-12-16<br />.value: 1.295","period: 1996-12-23<br />.value: 1.306","period: 1996-12-30<br />.value: 1.299","period: 1997-01-06<br />.value: 1.296","period: 1997-01-13<br />.value: 1.303","period: 1997-01-20<br />.value: 1.297","period: 1997-01-27<br />.value: 1.298","period: 1997-02-03<br />.value: 1.291","period: 1997-02-17<br />.value: 1.274","period: 1997-03-03<br />.value: 1.268","period: 1997-03-17<br />.value: 1.238","period: 1997-10-06<br />.value: 1.133","period: 1997-10-20<br />.value: 1.141","period: 1997-11-03<br />.value: 1.145","period: 1997-11-17<br />.value: 1.152","period: 1997-12-01<br />.value: 1.155","period: 1997-12-15<br />.value: 1.154","period: 1998-01-05<br />.value: 1.155","period: 1998-01-19<br />.value: 1.153","period: 1998-02-02<br />.value: 1.150","period: 1998-02-16<br />.value: 1.143","period: 1998-03-02<br />.value: 1.129","period: 1998-03-16<br />.value: 1.118","period: 1998-10-05<br />.value: 1.021","period: 1998-10-19<br />.value: 1.029","period: 1998-11-02<br />.value: 1.029","period: 1998-11-16<br />.value: 1.028","period: 1998-12-07<br />.value: 1.023","period: 1998-12-21<br />.value: 1.022","period: 1999-01-04<br />.value: 1.021","period: 1999-01-18<br />.value: 1.029","period: 1999-02-01<br />.value: 1.031","period: 1999-02-15<br />.value: 1.025","period: 1999-03-01<br />.value: 1.020","period: 1999-03-15<br />.value: 1.017","period: 1999-10-04<br />.value: 1.137","period: 1999-10-18<br />.value: 1.143","period: 1999-11-01<br />.value: 1.157","period: 1999-11-15<br />.value: 1.197","period: 1999-12-06<br />.value: 1.249","period: 1999-12-20<br />.value: 1.260","period: 2000-01-03<br />.value: 1.282","period: 2000-01-17<br />.value: 1.331","period: 2000-01-24<br />.value: 1.775","period: 2000-01-31<br />.value: 1.852","period: 2000-02-07<br />.value: 2.123","period: 2000-02-14<br />.value: 1.777","period: 2000-02-21<br />.value: 1.636","period: 2000-02-28<br />.value: 1.579","period: 2000-03-06<br />.value: 1.558","period: 2000-03-13<br />.value: 1.555","period: 2000-03-20<br />.value: 1.530","period: 2000-10-02<br />.value: 1.608","period: 2000-10-09<br />.value: 1.614","period: 2000-10-16<br />.value: 1.674","period: 2000-10-23<br />.value: 1.652","period: 2000-10-30<br />.value: 1.650","period: 2000-11-06<br />.value: 1.648","period: 2000-11-13<br />.value: 1.650","period: 2000-11-20<br />.value: 1.690","period: 2000-11-27<br />.value: 1.715","period: 2000-12-04<br />.value: 1.727","period: 2000-12-11<br />.value: 1.733","period: 2000-12-18<br />.value: 1.715","period: 2000-12-25<br />.value: 1.711","period: 2001-01-01<br />.value: 1.710","period: 2001-01-08<br />.value: 1.702","period: 2001-01-15<br />.value: 1.686","period: 2001-01-22<br />.value: 1.682","period: 2001-01-29<br />.value: 1.674","period: 2001-02-05<br />.value: 1.644","period: 2001-02-12<br />.value: 1.640","period: 2001-02-19<br />.value: 1.625","period: 2001-02-26<br />.value: 1.611","period: 2001-03-05<br />.value: 1.601","period: 2001-03-12<br />.value: 1.586","period: 2001-03-19<br />.value: 1.565","period: 2001-10-01<br />.value: 1.366","period: 2001-10-08<br />.value: 1.352","period: 2001-10-15<br />.value: 1.348","period: 2001-10-22<br />.value: 1.340","period: 2001-10-29<br />.value: 1.343","period: 2001-11-05<br />.value: 1.313","period: 2001-11-12<br />.value: 1.303","period: 2001-11-19<br />.value: 1.283","period: 2001-11-26<br />.value: 1.280","period: 2001-12-03<br />.value: 1.276","period: 2001-12-10<br />.value: 1.274","period: 2001-12-17<br />.value: 1.272","period: 2001-12-24<br />.value: 1.277","period: 2001-12-31<br />.value: 1.289","period: 2002-01-07<br />.value: 1.296","period: 2002-01-14<br />.value: 1.282","period: 2002-01-21<br />.value: 1.264","period: 2002-01-28<br />.value: 1.264","period: 2002-02-04<br />.value: 1.270","period: 2002-02-11<br />.value: 1.262","period: 2002-02-18<br />.value: 1.263","period: 2002-02-25<br />.value: 1.264","period: 2002-03-04<br />.value: 1.267","period: 2002-03-11<br />.value: 1.318","period: 2002-03-18<br />.value: 1.335","period: 2002-10-07<br />.value: 1.388","period: 2002-10-14<br />.value: 1.403","period: 2002-10-21<br />.value: 1.405","period: 2002-10-28<br />.value: 1.407","period: 2002-11-04<br />.value: 1.413","period: 2002-11-11<br />.value: 1.407","period: 2002-11-18<br />.value: 1.403","period: 2002-11-25<br />.value: 1.413","period: 2002-12-02<br />.value: 1.418","period: 2002-12-09<br />.value: 1.430","period: 2002-12-16<br />.value: 1.464","period: 2002-12-23<br />.value: 1.498","period: 2002-12-30<br />.value: 1.539","period: 2003-01-06<br />.value: 1.557","period: 2003-01-13<br />.value: 1.571","period: 2003-01-20<br />.value: 1.589","period: 2003-01-27<br />.value: 1.623","period: 2003-02-03<br />.value: 1.650","period: 2003-02-10<br />.value: 1.811","period: 2003-02-17<br />.value: 1.833","period: 2003-02-24<br />.value: 1.871","period: 2003-03-03<br />.value: 1.966","period: 2003-03-10<br />.value: 1.991","period: 2003-03-17<br />.value: 1.933","period: 2003-10-06<br />.value: 1.493","period: 2003-10-13<br />.value: 1.519","period: 2003-10-20<br />.value: 1.504","period: 2003-10-27<br />.value: 1.509","period: 2003-11-03<br />.value: 1.495","period: 2003-11-10<br />.value: 1.504","period: 2003-11-17<br />.value: 1.524","period: 2003-11-24<br />.value: 1.535","period: 2003-12-01<br />.value: 1.535","period: 2003-12-08<br />.value: 1.552","period: 2003-12-15<br />.value: 1.580","period: 2003-12-22<br />.value: 1.619","period: 2003-12-29<br />.value: 1.626","period: 2004-01-05<br />.value: 1.628","period: 2004-01-12<br />.value: 1.703","period: 2004-01-19<br />.value: 1.723","period: 2004-01-26<br />.value: 1.746","period: 2004-02-02<br />.value: 1.746","period: 2004-02-09<br />.value: 1.737","period: 2004-02-16<br />.value: 1.730","period: 2004-02-23<br />.value: 1.720","period: 2004-03-01<br />.value: 1.719","period: 2004-03-08<br />.value: 1.715","period: 2004-03-15<br />.value: 1.706","period: 2004-10-04<br />.value: 1.944","period: 2004-10-11<br />.value: 2.049","period: 2004-10-18<br />.value: 2.129","period: 2004-10-25<br />.value: 2.199","period: 2004-11-01<br />.value: 2.205","period: 2004-11-08<br />.value: 2.181","period: 2004-11-15<br />.value: 2.207","period: 2004-11-22<br />.value: 2.206","period: 2004-11-29<br />.value: 2.214","period: 2004-12-06<br />.value: 2.144","period: 2004-12-13<br />.value: 2.157","period: 2004-12-20<br />.value: 2.177","period: 2004-12-27<br />.value: 2.160","period: 2005-01-03<br />.value: 2.145","period: 2005-01-10<br />.value: 2.149","period: 2005-01-17<br />.value: 2.147","period: 2005-01-24<br />.value: 2.167","period: 2005-01-31<br />.value: 2.211","period: 2005-02-07<br />.value: 2.173","period: 2005-02-14<br />.value: 2.147","period: 2005-02-21<br />.value: 2.137","period: 2005-02-28<br />.value: 2.195","period: 2005-03-07<br />.value: 2.222","period: 2005-03-14<br />.value: 2.250","period: 2005-10-03<br />.value: 2.809","period: 2005-10-10<br />.value: 2.750","period: 2005-10-17<br />.value: 2.767","period: 2005-10-24<br />.value: 2.728","period: 2005-10-31<br />.value: 2.712","period: 2005-11-07<br />.value: 2.649","period: 2005-11-14<br />.value: 2.615","period: 2005-11-21<br />.value: 2.604","period: 2005-11-28<br />.value: 2.580","period: 2005-12-05<br />.value: 2.585","period: 2005-12-12<br />.value: 2.591","period: 2005-12-19<br />.value: 2.603","period: 2005-12-26<br />.value: 2.601","period: 2006-01-02<br />.value: 2.600","period: 2006-01-09<br />.value: 2.598","period: 2006-01-16<br />.value: 2.581","period: 2006-01-23<br />.value: 2.597","period: 2006-01-30<br />.value: 2.600","period: 2006-02-06<br />.value: 2.586","period: 2006-02-13<br />.value: 2.582","period: 2006-02-20<br />.value: 2.550","period: 2006-02-27<br />.value: 2.560","period: 2006-03-06<br />.value: 2.581","period: 2006-03-13<br />.value: 2.554","period: 2006-10-02<br />.value: 2.541","period: 2006-10-09<br />.value: 2.534","period: 2006-10-16<br />.value: 2.516","period: 2006-10-23<br />.value: 2.509","period: 2006-10-30<br />.value: 2.497","period: 2006-11-06<br />.value: 2.478","period: 2006-11-13<br />.value: 2.489","period: 2006-11-20<br />.value: 2.482","period: 2006-11-27<br />.value: 2.490","period: 2006-12-04<br />.value: 2.566","period: 2006-12-11<br />.value: 2.572","period: 2006-12-18<br />.value: 2.558","period: 2006-12-25<br />.value: 2.560","period: 2007-01-01<br />.value: 2.534","period: 2007-01-08<br />.value: 2.517","period: 2007-01-15<br />.value: 2.484","period: 2007-01-22<br />.value: 2.460","period: 2007-01-29<br />.value: 2.500","period: 2007-02-05<br />.value: 2.530","period: 2007-02-12<br />.value: 2.576","period: 2007-02-19<br />.value: 2.568","period: 2007-02-26<br />.value: 2.579","period: 2007-03-05<br />.value: 2.594","period: 2007-03-12<br />.value: 2.586","period: 2007-10-08<br />.value: 2.869","period: 2007-10-15<br />.value: 2.889","period: 2007-10-22<br />.value: 2.968","period: 2007-10-29<br />.value: 3.051","period: 2007-11-05<br />.value: 3.224","period: 2007-11-12<br />.value: 3.322","period: 2007-11-19<br />.value: 3.328","period: 2007-11-26<br />.value: 3.407","period: 2007-12-03<br />.value: 3.402","period: 2007-12-10<br />.value: 3.398","period: 2007-12-17<br />.value: 3.416","period: 2007-12-24<br />.value: 3.418","period: 2007-12-31<br />.value: 3.465","period: 2008-01-07<br />.value: 3.524","period: 2008-01-14<br />.value: 3.495","period: 2008-01-21<br />.value: 3.476","period: 2008-01-28<br />.value: 3.476","period: 2008-02-04<br />.value: 3.461","period: 2008-02-11<br />.value: 3.461","period: 2008-02-18<br />.value: 3.540","period: 2008-02-25<br />.value: 3.563","period: 2008-03-03<br />.value: 3.655","period: 2008-03-10<br />.value: 3.753","period: 2008-03-17<br />.value: 3.942","period: 2008-10-06<br />.value: 3.797","period: 2008-10-13<br />.value: 3.503","period: 2008-10-20<br />.value: 3.347","period: 2008-10-27<br />.value: 3.242","period: 2008-11-03<br />.value: 3.168","period: 2008-11-10<br />.value: 3.101","period: 2008-11-17<br />.value: 3.025","period: 2008-11-24<br />.value: 2.908","period: 2008-12-01<br />.value: 2.899","period: 2008-12-08<br />.value: 2.716","period: 2008-12-15<br />.value: 2.712","period: 2008-12-22<br />.value: 2.597","period: 2008-12-29<br />.value: 2.484","period: 2009-01-05<br />.value: 2.532","period: 2009-01-12<br />.value: 2.624","period: 2009-01-19<br />.value: 2.587","period: 2009-01-26<br />.value: 2.580","period: 2009-02-02<br />.value: 2.576","period: 2009-02-09<br />.value: 2.554","period: 2009-02-16<br />.value: 2.525","period: 2009-02-23<br />.value: 2.449","period: 2009-03-02<br />.value: 2.447","period: 2009-03-09<br />.value: 2.425","period: 2009-03-16<br />.value: 2.393","period: 2009-10-05<br />.value: 2.709","period: 2009-10-12<br />.value: 2.742","period: 2009-10-19<br />.value: 2.839","period: 2009-10-26<br />.value: 2.885","period: 2009-11-02<br />.value: 2.913","period: 2009-11-09<br />.value: 2.926","period: 2009-11-16<br />.value: 2.910","period: 2009-11-23<br />.value: 2.917","period: 2009-11-30<br />.value: 2.916","period: 2009-12-07<br />.value: 2.947","period: 2009-12-14<br />.value: 2.931","period: 2009-12-21<br />.value: 2.938","period: 2009-12-28<br />.value: 2.973","period: 2010-01-04<br />.value: 3.046","period: 2010-01-11<br />.value: 3.154","period: 2010-01-18<br />.value: 3.109","period: 2010-01-25<br />.value: 3.068","period: 2010-02-01<br />.value: 3.051","period: 2010-02-08<br />.value: 3.018","period: 2010-02-15<br />.value: 3.037","period: 2010-02-22<br />.value: 3.099","period: 2010-03-01<br />.value: 3.066","period: 2010-03-08<br />.value: 3.080","period: 2010-03-15<br />.value: 3.086","period: 2010-10-04<br />.value: 3.099","period: 2010-10-11<br />.value: 3.130","period: 2010-10-18<br />.value: 3.149","period: 2010-10-25<br />.value: 3.159","period: 2010-11-01<br />.value: 3.164","period: 2010-11-08<br />.value: 3.281","period: 2010-11-15<br />.value: 3.318","period: 2010-11-22<br />.value: 3.302","period: 2010-11-29<br />.value: 3.309","period: 2010-12-06<br />.value: 3.392","period: 2010-12-13<br />.value: 3.429","period: 2010-12-20<br />.value: 3.441","period: 2010-12-27<br />.value: 3.489","period: 2011-01-03<br />.value: 3.510","period: 2011-01-10<br />.value: 3.562","period: 2011-01-17<br />.value: 3.638","period: 2011-01-24<br />.value: 3.667","period: 2011-01-31<br />.value: 3.702","period: 2011-02-07<br />.value: 3.748","period: 2011-02-14<br />.value: 3.764","period: 2011-02-21<br />.value: 3.791","period: 2011-02-28<br />.value: 3.951","period: 2011-03-07<br />.value: 4.021","period: 2011-03-14<br />.value: 4.025","period: 2011-10-03<br />.value: 3.876","period: 2011-10-10<br />.value: 3.895","period: 2011-10-17<br />.value: 4.015","period: 2011-10-24<br />.value: 4.014","period: 2011-10-31<br />.value: 4.063","period: 2011-11-07<br />.value: 4.079","period: 2011-11-14<br />.value: 4.133","period: 2011-11-21<br />.value: 4.140","period: 2011-11-28<br />.value: 4.096","period: 2011-12-05<br />.value: 4.102","period: 2011-12-12<br />.value: 4.076","period: 2011-12-19<br />.value: 4.059","period: 2011-12-26<br />.value: 4.067","period: 2012-01-02<br />.value: 4.083","period: 2012-01-09<br />.value: 4.144","period: 2012-01-16<br />.value: 4.152","period: 2012-01-23<br />.value: 4.153","period: 2012-01-30<br />.value: 4.169","period: 2012-02-06<br />.value: 4.180","period: 2012-02-13<br />.value: 4.232","period: 2012-02-20<br />.value: 4.238","period: 2012-02-27<br />.value: 4.273","period: 2012-03-05<br />.value: 4.255","period: 2012-03-12<br />.value: 4.266","period: 2012-03-19<br />.value: 4.276","period: 2012-10-01<br />.value: 4.237","period: 2012-10-08<br />.value: 4.264","period: 2012-10-15<br />.value: 4.308","period: 2012-10-22<br />.value: 4.281","period: 2012-10-29<br />.value: 4.266","period: 2012-11-05<br />.value: 4.276","period: 2012-11-12<br />.value: 4.299","period: 2012-11-19<br />.value: 4.308","period: 2012-11-26<br />.value: 4.338","period: 2012-12-03<br />.value: 4.326","period: 2012-12-10<br />.value: 4.280","period: 2012-12-17<br />.value: 4.231","period: 2012-12-24<br />.value: 4.237","period: 2012-12-31<br />.value: 4.232","period: 2013-01-07<br />.value: 4.259","period: 2013-01-14<br />.value: 4.250","period: 2013-01-21<br />.value: 4.274","period: 2013-01-28<br />.value: 4.302","period: 2013-02-04<br />.value: 4.342","period: 2013-02-11<br />.value: 4.392","period: 2013-02-18<br />.value: 4.402","period: 2013-02-25<br />.value: 4.380","period: 2013-03-04<br />.value: 4.312","period: 2013-03-11<br />.value: 4.314","period: 2013-03-18<br />.value: 4.289","period: 2013-10-07<br />.value: 4.103","period: 2013-10-14<br />.value: 4.121","period: 2013-10-21<br />.value: 4.119","period: 2013-10-28<br />.value: 4.089","period: 2013-11-04<br />.value: 4.077","period: 2013-11-11<br />.value: 4.050","period: 2013-11-18<br />.value: 4.060","period: 2013-11-25<br />.value: 4.113","period: 2013-12-02<br />.value: 4.141","period: 2013-12-09<br />.value: 4.171","period: 2013-12-16<br />.value: 4.165","period: 2013-12-23<br />.value: 4.181","period: 2013-12-30<br />.value: 4.228","period: 2014-01-06<br />.value: 4.197","period: 2014-01-13<br />.value: 4.192","period: 2014-01-20<br />.value: 4.270","period: 2014-01-27<br />.value: 4.438","period: 2014-02-03<br />.value: 4.482","period: 2014-02-10<br />.value: 4.525","period: 2014-02-17<br />.value: 4.460","period: 2014-02-24<br />.value: 4.491","period: 2014-03-03<br />.value: 4.469","period: 2014-03-10<br />.value: 4.417","period: 2014-03-17<br />.value: 4.338","period: 2014-10-13<br />.value: 3.736","period: 2014-10-20<br />.value: 3.714","period: 2014-10-27<br />.value: 3.701","period: 2014-11-03<br />.value: 3.690","period: 2014-11-10<br />.value: 3.674","period: 2014-11-17<br />.value: 3.647","period: 2014-11-24<br />.value: 3.620","period: 2014-12-01<br />.value: 3.573","period: 2014-12-08<br />.value: 3.453","period: 2014-12-15<br />.value: 3.373","period: 2014-12-22<br />.value: 3.323","period: 2014-12-29<br />.value: 3.298","period: 2015-01-05<br />.value: 3.203","period: 2015-01-12<br />.value: 3.134","period: 2015-01-19<br />.value: 3.054","period: 2015-01-26<br />.value: 3.036","period: 2015-02-02<br />.value: 3.014","period: 2015-02-09<br />.value: 3.123","period: 2015-02-16<br />.value: 3.296","period: 2015-02-23<br />.value: 3.423","period: 2015-03-02<br />.value: 3.507","period: 2015-03-09<br />.value: 3.430","period: 2015-03-16<br />.value: 3.273","period: 2015-03-23<br />.value: 3.152","period: 2015-03-30<br />.value: 3.131","period: 2015-10-05<br />.value: 2.707","period: 2015-10-12<br />.value: 2.718","period: 2015-10-19<br />.value: 2.704","period: 2015-10-26<br />.value: 2.713","period: 2015-11-02<br />.value: 2.709","period: 2015-11-09<br />.value: 2.718","period: 2015-11-16<br />.value: 2.668","period: 2015-11-23<br />.value: 2.663","period: 2015-11-30<br />.value: 2.625","period: 2015-12-07<br />.value: 2.600","period: 2015-12-14<br />.value: 2.543","period: 2015-12-21<br />.value: 2.492","period: 2015-12-28<br />.value: 2.405","period: 2016-01-04<br />.value: 2.454","period: 2016-01-11<br />.value: 2.455","period: 2016-01-18<br />.value: 2.424","period: 2016-01-25<br />.value: 2.352","period: 2016-02-01<br />.value: 2.394","period: 2016-02-08<br />.value: 2.416","period: 2016-02-15<br />.value: 2.399","period: 2016-02-22<br />.value: 2.378","period: 2016-02-29<br />.value: 2.365","period: 2016-03-07<br />.value: 2.369","period: 2016-03-14<br />.value: 2.405","period: 2016-03-21<br />.value: 2.411","period: 2016-03-28<br />.value: 2.407","period: 2016-10-03<br />.value: 2.604","period: 2016-10-10<br />.value: 2.688","period: 2016-10-17<br />.value: 2.684","period: 2016-10-24<br />.value: 2.707","period: 2016-10-31<br />.value: 2.706","period: 2016-11-07<br />.value: 2.678","period: 2016-11-14<br />.value: 2.667","period: 2016-11-21<br />.value: 2.678","period: 2016-11-28<br />.value: 2.689","period: 2016-12-05<br />.value: 2.792","period: 2016-12-12<br />.value: 2.820","period: 2016-12-19<br />.value: 2.842","period: 2016-12-26<br />.value: 2.835","period: 2017-01-02<br />.value: 2.896","period: 2017-01-09<br />.value: 2.903","period: 2017-01-16<br />.value: 2.887","period: 2017-01-23<br />.value: 2.880","period: 2017-01-30<br />.value: 2.892","period: 2017-02-06<br />.value: 2.929","period: 2017-02-13<br />.value: 2.924","period: 2017-02-20<br />.value: 2.924","period: 2017-02-27<br />.value: 2.922","period: 2017-03-06<br />.value: 2.891","period: 2017-03-13<br />.value: 2.883","period: 2017-03-20<br />.value: 2.863","period: 2017-03-27<br />.value: 2.863","period: 2017-10-02<br />.value: 2.976","period: 2017-10-09<br />.value: 2.951","period: 2017-10-16<br />.value: 2.973","period: 2017-10-23<br />.value: 2.982","period: 2017-10-30<br />.value: 3.013","period: 2017-11-06<br />.value: 3.022","period: 2017-11-13<br />.value: 3.076","period: 2017-11-20<br />.value: 3.083","period: 2017-11-27<br />.value: 3.105","period: 2017-12-04<br />.value: 3.113","period: 2017-12-11<br />.value: 3.142","period: 2017-12-18<br />.value: 3.163","period: 2017-12-25<br />.value: 3.210","period: 2018-01-01<br />.value: 3.390","period: 2018-01-08<br />.value: 3.432","period: 2018-01-15<br />.value: 3.477","period: 2018-01-22<br />.value: 3.464","period: 2018-01-29<br />.value: 3.492","period: 2018-02-05<br />.value: 3.480","period: 2018-02-12<br />.value: 3.405","period: 2018-02-19<br />.value: 3.384","period: 2018-02-26<br />.value: 3.385","period: 2018-03-05<br />.value: 3.379","period: 2018-03-12<br />.value: 3.378","period: 2018-03-19<br />.value: 3.370","period: 2018-03-26<br />.value: 3.409","period: 2018-10-01<br />.value: 3.670","period: 2018-10-08<br />.value: 3.715","period: 2018-10-15<br />.value: 3.725","period: 2018-10-22<br />.value: 3.715","period: 2018-10-29<br />.value: 3.720","period: 2018-11-05<br />.value: 3.695","period: 2018-11-12<br />.value: 3.676","period: 2018-11-19<br />.value: 3.637","period: 2018-11-26<br />.value: 3.564","period: 2018-12-03<br />.value: 3.444","period: 2018-12-10<br />.value: 3.458","period: 2018-12-17<br />.value: 3.444","period: 2018-12-24<br />.value: 3.359","period: 2018-12-31<br />.value: 3.357","period: 2019-01-07<br />.value: 3.358","period: 2019-01-14<br />.value: 3.430","period: 2019-01-21<br />.value: 3.467","period: 2019-01-28<br />.value: 3.456","period: 2019-02-04<br />.value: 3.469","period: 2019-02-11<br />.value: 3.456","period: 2019-02-18<br />.value: 3.535","period: 2019-02-25<br />.value: 3.528","period: 2019-03-04<br />.value: 3.536","period: 2019-03-11<br />.value: 3.539","period: 2019-03-18<br />.value: 3.521","period: 2019-03-25<br />.value: 3.536","period: 2019-10-07<br />.value: 3.137","period: 2019-10-14<br />.value: 3.148","period: 2019-10-21<br />.value: 3.150","period: 2019-10-28<br />.value: 3.141","period: 2019-11-04<br />.value: 3.144","period: 2019-11-11<br />.value: 3.156","period: 2019-11-18<br />.value: 3.170","period: 2019-11-25<br />.value: 3.172","period: 2019-12-02<br />.value: 3.173","period: 2019-12-09<br />.value: 3.194","period: 2019-12-16<br />.value: 3.213","period: 2019-12-23<br />.value: 3.237","period: 2019-12-30<br />.value: 3.246","period: 2020-01-06<br />.value: 3.289","period: 2020-01-13<br />.value: 3.274","period: 2020-01-20<br />.value: 3.236","period: 2020-01-27<br />.value: 3.175","period: 2020-02-03<br />.value: 3.126","period: 2020-02-10<br />.value: 3.095","period: 2020-02-17<br />.value: 3.104","period: 2020-02-24<br />.value: 3.087","period: 2020-03-02<br />.value: 3.007","period: 2020-03-09<br />.value: 2.943","period: 2020-03-16<br />.value: 2.806","period: 2020-03-23<br />.value: 2.606","period: 2020-03-30<br />.value: 2.583","period: 2020-10-05<br />.value: 2.315","period: 2020-10-12<br />.value: 2.307","period: 2020-10-19<br />.value: 2.340","period: 2020-10-26<br />.value: 2.334","period: 2020-11-02<br />.value: 2.335","period: 2020-11-09<br />.value: 2.347","period: 2020-11-16<br />.value: 2.369","period: 2020-11-23<br />.value: 2.398","period: 2020-11-30<br />.value: 2.452","period: 2020-12-07<br />.value: 2.482","period: 2020-12-14<br />.value: 2.503","period: 2020-12-21<br />.value: 2.581","period: 2020-12-28<br />.value: 2.591","period: 2021-01-04<br />.value: 2.611","period: 2021-01-11<br />.value: 2.649","period: 2021-01-18<br />.value: 2.705","period: 2021-01-25<br />.value: 2.714","period: 2021-02-01<br />.value: 2.742","period: 2021-02-08<br />.value: 2.817","period: 2021-02-15<br />.value: 2.888","period: 2021-02-22<br />.value: 2.960","period: 2021-03-01<br />.value: 3.000","period: 2021-03-08<br />.value: 3.032","period: 2021-03-15<br />.value: 3.038","period: 2021-03-22<br />.value: 3.011","period: 2021-03-29<br />.value: 3.004","period: 2021-10-04<br />.value: 3.408","period: 2021-10-11<br />.value: 3.517","period: 2021-10-18<br />.value: 3.612","period: 2021-10-25<br />.value: 3.641","period: 2021-11-01<br />.value: 3.622","period: 2021-11-08<br />.value: 3.614","period: 2021-11-15<br />.value: 3.619","period: 2021-11-22<br />.value: 3.582","period: 2021-11-29<br />.value: 3.549","period: 2021-12-06<br />.value: 3.491","period: 2021-12-13<br />.value: 3.550","period: 2021-12-20<br />.value: 3.546","period: 2021-12-27<br />.value: 3.587","period: 2022-01-03<br />.value: 3.620","period: 2022-01-10<br />.value: 3.676","period: 2022-01-17<br />.value: 3.814","period: 2022-01-24<br />.value: 3.876","period: 2022-01-31<br />.value: 3.982","period: 2022-02-07<br />.value: 4.076","period: 2022-02-14<br />.value: 4.154","period: 2022-02-21<br />.value: 4.141","period: 2022-02-28<br />.value: 4.256","period: 2022-03-07<br />.value: 5.017","period: 2022-03-14<br />.value: 5.001","period: 2022-03-21<br />.value: 5.004","period: 2022-03-28<br />.value: 5.315","period: 2022-10-03<br />.value: 4.915","period: 2022-10-10<br />.value: 5.529","period: 2022-10-17<br />.value: 5.865","period: 2022-10-24<br />.value: 5.799","period: 2022-10-31<br />.value: 5.989","period: 2022-11-07<br />.value: 6.060","period: 2022-11-14<br />.value: 5.910","period: 2022-11-21<br />.value: 5.584","period: 2022-11-28<br />.value: 5.289","period: 2022-12-05<br />.value: 5.073","period: 2022-12-12<br />.value: 4.765","period: 2022-12-19<br />.value: 4.815","period: 2022-12-26<br />.value: 4.895","period: 2023-01-02<br />.value: 4.884","period: 2023-01-09<br />.value: 4.733","period: 2023-01-16<br />.value: 4.825","period: 2023-01-23<br />.value: 4.941","period: 2023-01-30<br />.value: 4.825","period: 2023-02-06<br />.value: 4.636","period: 2023-02-13<br />.value: 4.600","period: 2023-02-20<br />.value: 4.501","period: 2023-02-27<br />.value: 4.478"],"type":"scatter","mode":"lines","line":{"width":1.88976377952756,"color":"rgba(44,62,80,1)","dash":"solid"},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":["1990-10-01","1990-10-15","1990-11-05","1990-11-19","1990-12-03","1990-12-17","1991-01-07","1991-01-21","1991-02-04","1991-02-18","1991-03-04","1991-03-18","1991-10-07","1991-10-21","1991-11-04","1991-11-18","1991-12-02","1991-12-16","1992-01-06","1992-01-20","1992-02-03","1992-02-17","1992-03-02","1992-03-16","1992-10-05","1992-10-19","1992-11-02","1992-11-16","1992-12-07","1992-12-21","1993-01-04","1993-01-18","1993-02-01","1993-02-15","1993-03-01","1993-03-15","1993-10-04","1993-10-18","1993-11-01","1993-11-15","1993-12-06","1993-12-20","1994-01-03","1994-01-17","1994-01-31","1994-02-07","1994-02-14","1994-02-21","1994-02-28","1994-03-07","1994-03-21","1994-10-03","1994-10-17","1994-11-07","1994-11-21","1994-12-05","1994-12-19","1995-01-02","1995-01-16","1995-02-06","1995-02-20","1995-03-06","1995-03-20","1995-10-02","1995-10-16","1995-11-06","1995-11-20","1995-12-04","1995-12-18","1996-01-01","1996-01-15","1996-02-05","1996-02-19","1996-03-04","1996-03-18","1996-10-07","1996-10-21","1996-10-28","1996-11-04","1996-11-11","1996-11-18","1996-11-25","1996-12-02","1996-12-09","1996-12-16","1996-12-23","1996-12-30","1997-01-06","1997-01-13","1997-01-20","1997-01-27","1997-02-03","1997-02-17","1997-03-03","1997-03-17","1997-10-06","1997-10-20","1997-11-03","1997-11-17","1997-12-01","1997-12-15","1998-01-05","1998-01-19","1998-02-02","1998-02-16","1998-03-02","1998-03-16","1998-10-05","1998-10-19","1998-11-02","1998-11-16","1998-12-07","1998-12-21","1999-01-04","1999-01-18","1999-02-01","1999-02-15","1999-03-01","1999-03-15","1999-10-04","1999-10-18","1999-11-01","1999-11-15","1999-12-06","1999-12-20","2000-01-03","2000-01-17","2000-01-24","2000-01-31","2000-02-07","2000-02-14","2000-02-21","2000-02-28","2000-03-06","2000-03-13","2000-03-20","2000-10-02","2000-10-09","2000-10-16","2000-10-23","2000-10-30","2000-11-06","2000-11-13","2000-11-20","2000-11-27","2000-12-04","2000-12-11","2000-12-18","2000-12-25","2001-01-01","2001-01-08","2001-01-15","2001-01-22","2001-01-29","2001-02-05","2001-02-12","2001-02-19","2001-02-26","2001-03-05","2001-03-12","2001-03-19","2001-10-01","2001-10-08","2001-10-15","2001-10-22","2001-10-29","2001-11-05","2001-11-12","2001-11-19","2001-11-26","2001-12-03","2001-12-10","2001-12-17","2001-12-24","2001-12-31","2002-01-07","2002-01-14","2002-01-21","2002-01-28","2002-02-04","2002-02-11","2002-02-18","2002-02-25","2002-03-04","2002-03-11","2002-03-18","2002-10-07","2002-10-14","2002-10-21","2002-10-28","2002-11-04","2002-11-11","2002-11-18","2002-11-25","2002-12-02","2002-12-09","2002-12-16","2002-12-23","2002-12-30","2003-01-06","2003-01-13","2003-01-20","2003-01-27","2003-02-03","2003-02-10","2003-02-17","2003-02-24","2003-03-03","2003-03-10","2003-03-17","2003-10-06","2003-10-13","2003-10-20","2003-10-27","2003-11-03","2003-11-10","2003-11-17","2003-11-24","2003-12-01","2003-12-08","2003-12-15","2003-12-22","2003-12-29","2004-01-05","2004-01-12","2004-01-19","2004-01-26","2004-02-02","2004-02-09","2004-02-16","2004-02-23","2004-03-01","2004-03-08","2004-03-15","2004-10-04","2004-10-11","2004-10-18","2004-10-25","2004-11-01","2004-11-08","2004-11-15","2004-11-22","2004-11-29","2004-12-06","2004-12-13","2004-12-20","2004-12-27","2005-01-03","2005-01-10","2005-01-17","2005-01-24","2005-01-31","2005-02-07","2005-02-14","2005-02-21","2005-02-28","2005-03-07","2005-03-14","2005-10-03","2005-10-10","2005-10-17","2005-10-24","2005-10-31","2005-11-07","2005-11-14","2005-11-21","2005-11-28","2005-12-05","2005-12-12","2005-12-19","2005-12-26","2006-01-02","2006-01-09","2006-01-16","2006-01-23","2006-01-30","2006-02-06","2006-02-13","2006-02-20","2006-02-27","2006-03-06","2006-03-13","2006-10-02","2006-10-09","2006-10-16","2006-10-23","2006-10-30","2006-11-06","2006-11-13","2006-11-20","2006-11-27","2006-12-04","2006-12-11","2006-12-18","2006-12-25","2007-01-01","2007-01-08","2007-01-15","2007-01-22","2007-01-29","2007-02-05","2007-02-12","2007-02-19","2007-02-26","2007-03-05","2007-03-12","2007-10-08","2007-10-15","2007-10-22","2007-10-29","2007-11-05","2007-11-12","2007-11-19","2007-11-26","2007-12-03","2007-12-10","2007-12-17","2007-12-24","2007-12-31","2008-01-07","2008-01-14","2008-01-21","2008-01-28","2008-02-04","2008-02-11","2008-02-18","2008-02-25","2008-03-03","2008-03-10","2008-03-17","2008-10-06","2008-10-13","2008-10-20","2008-10-27","2008-11-03","2008-11-10","2008-11-17","2008-11-24","2008-12-01","2008-12-08","2008-12-15","2008-12-22","2008-12-29","2009-01-05","2009-01-12","2009-01-19","2009-01-26","2009-02-02","2009-02-09","2009-02-16","2009-02-23","2009-03-02","2009-03-09","2009-03-16","2009-10-05","2009-10-12","2009-10-19","2009-10-26","2009-11-02","2009-11-09","2009-11-16","2009-11-23","2009-11-30","2009-12-07","2009-12-14","2009-12-21","2009-12-28","2010-01-04","2010-01-11","2010-01-18","2010-01-25","2010-02-01","2010-02-08","2010-02-15","2010-02-22","2010-03-01","2010-03-08","2010-03-15","2010-10-04","2010-10-11","2010-10-18","2010-10-25","2010-11-01","2010-11-08","2010-11-15","2010-11-22","2010-11-29","2010-12-06","2010-12-13","2010-12-20","2010-12-27","2011-01-03","2011-01-10","2011-01-17","2011-01-24","2011-01-31","2011-02-07","2011-02-14","2011-02-21","2011-02-28","2011-03-07","2011-03-14","2011-10-03","2011-10-10","2011-10-17","2011-10-24","2011-10-31","2011-11-07","2011-11-14","2011-11-21","2011-11-28","2011-12-05","2011-12-12","2011-12-19","2011-12-26","2012-01-02","2012-01-09","2012-01-16","2012-01-23","2012-01-30","2012-02-06","2012-02-13","2012-02-20","2012-02-27","2012-03-05","2012-03-12","2012-03-19","2012-10-01","2012-10-08","2012-10-15","2012-10-22","2012-10-29","2012-11-05","2012-11-12","2012-11-19","2012-11-26","2012-12-03","2012-12-10","2012-12-17","2012-12-24","2012-12-31","2013-01-07","2013-01-14","2013-01-21","2013-01-28","2013-02-04","2013-02-11","2013-02-18","2013-02-25","2013-03-04","2013-03-11","2013-03-18","2013-10-07","2013-10-14","2013-10-21","2013-10-28","2013-11-04","2013-11-11","2013-11-18","2013-11-25","2013-12-02","2013-12-09","2013-12-16","2013-12-23","2013-12-30","2014-01-06","2014-01-13","2014-01-20","2014-01-27","2014-02-03","2014-02-10","2014-02-17","2014-02-24","2014-03-03","2014-03-10","2014-03-17","2014-10-13","2014-10-20","2014-10-27","2014-11-03","2014-11-10","2014-11-17","2014-11-24","2014-12-01","2014-12-08","2014-12-15","2014-12-22","2014-12-29","2015-01-05","2015-01-12","2015-01-19","2015-01-26","2015-02-02","2015-02-09","2015-02-16","2015-02-23","2015-03-02","2015-03-09","2015-03-16","2015-03-23","2015-03-30","2015-10-05","2015-10-12","2015-10-19","2015-10-26","2015-11-02","2015-11-09","2015-11-16","2015-11-23","2015-11-30","2015-12-07","2015-12-14","2015-12-21","2015-12-28","2016-01-04","2016-01-11","2016-01-18","2016-01-25","2016-02-01","2016-02-08","2016-02-15","2016-02-22","2016-02-29","2016-03-07","2016-03-14","2016-03-21","2016-03-28","2016-10-03","2016-10-10","2016-10-17","2016-10-24","2016-10-31","2016-11-07","2016-11-14","2016-11-21","2016-11-28","2016-12-05","2016-12-12","2016-12-19","2016-12-26","2017-01-02","2017-01-09","2017-01-16","2017-01-23","2017-01-30","2017-02-06","2017-02-13","2017-02-20","2017-02-27","2017-03-06","2017-03-13","2017-03-20","2017-03-27","2017-10-02","2017-10-09","2017-10-16","2017-10-23","2017-10-30","2017-11-06","2017-11-13","2017-11-20","2017-11-27","2017-12-04","2017-12-11","2017-12-18","2017-12-25","2018-01-01","2018-01-08","2018-01-15","2018-01-22","2018-01-29","2018-02-05","2018-02-12","2018-02-19","2018-02-26","2018-03-05","2018-03-12","2018-03-19","2018-03-26","2018-10-01","2018-10-08","2018-10-15","2018-10-22","2018-10-29","2018-11-05","2018-11-12","2018-11-19","2018-11-26","2018-12-03","2018-12-10","2018-12-17","2018-12-24","2018-12-31","2019-01-07","2019-01-14","2019-01-21","2019-01-28","2019-02-04","2019-02-11","2019-02-18","2019-02-25","2019-03-04","2019-03-11","2019-03-18","2019-03-25","2019-10-07","2019-10-14","2019-10-21","2019-10-28","2019-11-04","2019-11-11","2019-11-18","2019-11-25","2019-12-02","2019-12-09","2019-12-16","2019-12-23","2019-12-30","2020-01-06","2020-01-13","2020-01-20","2020-01-27","2020-02-03","2020-02-10","2020-02-17","2020-02-24","2020-03-02","2020-03-09","2020-03-16","2020-03-23","2020-03-30","2020-10-05","2020-10-12","2020-10-19","2020-10-26","2020-11-02","2020-11-09","2020-11-16","2020-11-23","2020-11-30","2020-12-07","2020-12-14","2020-12-21","2020-12-28","2021-01-04","2021-01-11","2021-01-18","2021-01-25","2021-02-01","2021-02-08","2021-02-15","2021-02-22","2021-03-01","2021-03-08","2021-03-15","2021-03-22","2021-03-29","2021-10-04","2021-10-11","2021-10-18","2021-10-25","2021-11-01","2021-11-08","2021-11-15","2021-11-22","2021-11-29","2021-12-06","2021-12-13","2021-12-20","2021-12-27","2022-01-03","2022-01-10","2022-01-17","2022-01-24","2022-01-31","2022-02-07","2022-02-14","2022-02-21","2022-02-28","2022-03-07","2022-03-14","2022-03-21","2022-03-28","2022-10-03","2022-10-10","2022-10-17","2022-10-24","2022-10-31","2022-11-07","2022-11-14","2022-11-21","2022-11-28","2022-12-05","2022-12-12","2022-12-19","2022-12-26","2023-01-02","2023-01-09","2023-01-16","2023-01-23","2023-01-30","2023-02-06","2023-02-13","2023-02-20","2023-02-27"],"y":[1.09893136413559,1.09861743519431,1.09833691626074,1.09808989277379,1.09787645017238,1.09769667389542,1.09755064938183,1.09743846207052,1.09736019740042,1.09731594081044,1.09730577773949,1.0973297936265,1.09738807391038,1.09748070403005,1.09760776942442,1.09776935553241,1.09796554779293,1.09819643164492,1.09846209252727,1.09876261587891,1.09909808713876,1.09946859174573,1.09987421513873,1.10031504275669,1.10079116003852,1.10130265242315,1.10184960534947,1.10243210425642,1.10305023458291,1.10370408176785,1.10439373125016,1.10511926846877,1.10588077886258,1.10667834787051,1.10751206093148,1.10838200348441,1.10928826096821,1.1102309188218,1.1112100624841,1.11222577739402,1.11327814899048,1.1143672627124,1.11549320399869,1.11665605828828,1.11785591102007,1.11909284763298,1.12036695356593,1.12167831425785,1.12302701514763,1.12441314167421,1.1258367792765,1.12729801339341,1.12879692946386,1.13033361292677,1.13190814922105,1.13352062378563,1.13517112205942,1.13685972948133,1.13858653149028,1.14035161352519,1.14215506102498,1.14399695942856,1.14587739417485,1.14779645070276,1.14975421445122,1.15175077085914,1.15378620536543,1.15586060340902,1.15797405042882,1.16012663186374,1.16231843315271,1.16454953973464,1.16682003704844,1.16913001053304,1.17147954562735,1.17386872777029,1.17629764240077,1.17876637495771,1.18127501088003,1.18382363560664,1.18641233457647,1.18904119322842,1.19171029700142,1.19441973133438,1.19716958166621,1.19995993343585,1.20279087208219,1.20566248304417,1.20857485176068,1.21152976249609,1.21452879058386,1.21757170806662,1.22065828698699,1.22378829938759,1.22696151731105,1.23017771279999,1.23343665789702,1.23673812464478,1.24008188508589,1.24346771126296,1.24689537521862,1.2503646489955,1.25387530463621,1.25742711418339,1.26101984967964,1.26465328316759,1.26832718668987,1.2720413322891,1.2757954920079,1.2795894378889,1.2834229419747,1.28729577630795,1.29120771293126,1.29515852388725,1.29914798121855,1.30317585696778,1.30724192317756,1.31134595189051,1.31548771514925,1.31966698499642,1.32388353347463,1.3281371326265,1.33242755449465,1.33675457112172,1.34111795455032,1.34551747682307,1.34995290998259,1.35442402607152,1.35893059713247,1.36347239520806,1.36804919234092,1.37266076057366,1.37730687194892,1.38198729850931,1.38670181229746,1.39145018535599,1.39623218972751,1.40104759745467,1.40589618058007,1.41077771114633,1.41569196119609,1.42063870277197,1.42561770791658,1.43062874867255,1.4356715970825,1.44074602518906,1.44585180503484,1.45098870866247,1.45615650811458,1.46135497543378,1.46658388266269,1.47184300184395,1.47713210502016,1.48245096423396,1.48779935152797,1.49317703894481,1.4985837985271,1.50401940231746,1.50948362235852,1.51497623069291,1.52049699936323,1.52604570041212,1.53162210588219,1.53722598781608,1.54285711825639,1.54851526924576,1.55420021282681,1.55991172104216,1.56564956593443,1.57141351954625,1.57720335392023,1.58301884109901,1.58885975312519,1.59472586204141,1.60061693989029,1.60653275871445,1.61247309055651,1.61845894009363,1.62451091507721,1.63062819216124,1.63680994799971,1.64305535924663,1.64936360255596,1.65573385458172,1.66216529197789,1.66865709139845,1.67520842949741,1.68181848292876,1.68848642834648,1.69521144240457,1.70199270175702,1.70882938305782,1.71572066296096,1.72266571812044,1.72966372519024,1.73671386082436,1.74381530167679,1.75096722440152,1.75816880565255,1.76541922208385,1.77271765034943,1.78006326710328,1.78745524899939,1.79489277269174,1.80237501483434,1.80990115208117,1.81747036108623,1.8250818185035,1.83273470098698,1.84042818519066,1.84816144776853,1.85593366537458,1.86374401466281,1.8715916722872,1.87947581490175,1.88739561916045,1.89535026171729,1.90333891922626,1.91136076834136,1.91941498571657,1.92750074800589,1.9356172318633,1.94376361394281,1.9519390708984,1.96014277938406,1.96837391605378,1.97663165756157,1.9849151805614,1.99322366170726,2.00155627765317,2.00991220505309,2.01829062056102,2.02669070083097,2.03511162251691,2.04355256227284,2.05201269675275,2.06049120261063,2.06898725650047,2.07750003507627,2.08602871499202,2.09457247290171,2.10313048545932,2.11170192931886,2.12028598113431,2.12888181755967,2.13748861524892,2.14610555085606,2.15473180103508,2.16336654243997,2.17200895172472,2.18065820554333,2.18931348054978,2.19797395339807,2.20663880074219,2.21530719923613,2.22397832553388,2.23265135628943,2.24132546815678,2.24999983778992,2.25867364184283,2.26734605696952,2.27601625982397,2.28468342706017,2.29334673533211,2.30200536129379,2.31078934569035,2.3198249714489,2.32910577849641,2.33862530675983,2.34837709616611,2.35835468664222,2.36855161811511,2.37896143051174,2.38957766375906,2.40039385778404,2.41140355251364,2.4226002878748,2.43397760379449,2.44552904019966,2.45724813701727,2.46912843417428,2.48116347159765,2.49334678921433,2.50567192695129,2.51813242473547,2.53072182249383,2.54343366015334,2.55626147764095,2.56919881488362,2.58223921180831,2.59537620834196,2.60860334441155,2.62191415994402,2.63530219486634,2.64876098910546,2.66228408258834,2.67586501524194,2.68949732699321,2.70317455776912,2.71689024749661,2.73063793610265,2.74441116351419,2.7582034696582,2.77200839446162,2.78581947785142,2.79963025975456,2.81343428009798,2.82722507880866,2.84099619581354,2.85474117103958,2.86845354441374,2.88212685586299,2.89575464531426,2.90933045269453,2.92284781793075,2.93630028094988,2.94968138167888,2.96298466004469,2.97620365597429,2.98933190939462,3.00236296023265,3.01529034841532,3.02810761386961,3.04080829652247,3.05338593630085,3.06583407313171,3.07814624694201,3.09031599765871,3.10233686520876,3.11420238951912,3.12590611051675,3.13744156812861,3.14880230228165,3.15998185290283,3.17097375991911,3.18177156325744,3.19236880284479,3.2027590186081,3.21293575047435,3.22289253837048,3.23262292222345,3.24212044196023,3.25137863750776,3.260391048793,3.26915121574292,3.27765267828447,3.2858889763446,3.29385364985028,3.30154023872846,3.3089422829061,3.31605332231016,3.32286689686759,3.32937654650535,3.33569174209708,3.34192655785372,3.34808143870822,3.3541568295935,3.36015317544251,3.36607092118817,3.37191051176343,3.37767239210121,3.38335700713446,3.38896480179611,3.39449622101909,3.39995170973634,3.40533171288079,3.41063667538538,3.41586704218305,3.42102325820672,3.42610576838934,3.43111501766384,3.43605145096316,3.44091551322022,3.44570764936797,3.45042830433934,3.45507792306727,3.45965695048468,3.46416583152452,3.46860501111973,3.47297493420323,3.47727604570796,3.48150879056685,3.48567361371285,3.48977096007889,3.49380127459789,3.49776500220281,3.50166258782656,3.5054944764021,3.50926111286234,3.51296294214024,3.51660040916871,3.52017395888071,3.52368403620916,3.52713108608699,3.53051555344715,3.53383788322257,3.53709852034618,3.54029790975093,3.54343649636973,3.54651472513554,3.54953304098128,3.55249188883988,3.5553917136443,3.55823296032745,3.56101607382228,3.56374149906172,3.5664096809787,3.56902106450617,3.57157609457705,3.57407521612428,3.5765188740808,3.57890751337954,3.58124157895343,3.58352151573542,3.58574776865843,3.58792078265541,3.59004100265928,3.59210887360298,3.59412484041946,3.59608934804163,3.59800284140244,3.59986576543483,3.60167856507172,3.60344168524605,3.60515557089077,3.6068206669388,3.60843741832307,3.61000626997653,3.61152766683211,3.61300205382274,3.61442987588137,3.61581157794091,3.61714760493432,3.61843840179452,3.61968441345445,3.62088608484705,3.62204386090524,3.62315818656197,3.62422950675017,3.62525826640278,3.62624491045273,3.62710468389352,3.62775579357814,3.62820312722879,3.62845157256765,3.62850601731688,3.62837134919869,3.62805245593525,3.62755422524875,3.62688154486136,3.62603930249528,3.62503238587267,3.62386568271574,3.62254408074665,3.62107246768759,3.61945573126075,3.6176987591883,3.61580643919244,3.61378365899533,3.61163530631917,3.60936626888614,3.60698143441842,3.6044856906382,3.60188392526765,3.59918102602895,3.5963818806443,3.59349137683588,3.59051440232586,3.58745584483643,3.58432059208978,3.58111353180808,3.57783955171352,3.57450353952828,3.57111038297454,3.56766496977449,3.56417218765031,3.56063692432418,3.55706406751828,3.55345850495481,3.54982512435593,3.54616881344383,3.54249445994071,3.53880695156873,3.53511117605008,3.53141202110694,3.52771437446151,3.52402312383595,3.52034315695245,3.5166793615332,3.51303662530037,3.50941983597616,3.50583388128274,3.5022836489423,3.49877402667701,3.49530990220907,3.49189616326065,3.48853769755393,3.48523939281111,3.48200613675436,3.47884281710586,3.4757543215878,3.47274553792237,3.46982135383173,3.46698665703809,3.46424633526361,3.46160527623048,3.45906836766089,3.45664049727701,3.45432655280104,3.45213142195514,3.45005999246152,3.44811715204234,3.44630778841979,3.44463678931605,3.44310904245331,3.44172943555376,3.44050285633956,3.43943419253291,3.43852833185598,3.43779016203097,3.43722457078004,3.4368364458254,3.43663067488921,3.43661214569366,3.43678574596094,3.43715636341322,3.4377288857727,3.43850820076154,3.43949919610194,3.44058617406698,3.4416508406189,3.44269418901359,3.44371721250696,3.44472090435492,3.44570625781337,3.4466742661382,3.44762592258534,3.44856222041067,3.4494841528701,3.45039271321954,3.45128889471489,3.45217369061206,3.45304809416694,3.45391309863544,3.45476969727347,3.45561888333692,3.45646165008171,3.45729899076373,3.45813189863888,3.45896136696309,3.45978838899223,3.46061395798223,3.46143906718898,3.46226470986839,3.46309187927635,3.46392156866878,3.46475477130158,3.46559248043065,3.46643568931189,3.46728539120122,3.46814257935452,3.46900824702771,3.46988338747669,3.47076899395736,3.47166605972563,3.4725755780374,3.47349854214857,3.47443594531505,3.47538878079273,3.47635804183754,3.47734472170536,3.4783498136521,3.47937431093367,3.48041920680597,3.4814854945249,3.48257416734636,3.48368621852627,3.48482264132052,3.48598442898501,3.48717257477566,3.48838807194836,3.48963191375902,3.49090509346353,3.49220860431782,3.49354343957777,3.49491059249929,3.49631105633829,3.49774582435067,3.49921588979233,3.50072224591918,3.50226588598712,3.50384780325205,3.50546899096988,3.50713044239651,3.50883315078785,3.51057810939979,3.51236631148824,3.51419875030911,3.5160764191183,3.51800031117171,3.51997141972525,3.52199073803482,3.52405925935632,3.52617797694566,3.52834788405873,3.53056997395146,3.53284523987973,3.53517467509945,3.53755927286652,3.54000002643686,3.54249792906635,3.54505397401092,3.54766915452645,3.55034446386885,3.55308089529404,3.5558794420579,3.55874109741634,3.56166148427378,3.56463528631477,3.56766208796545,3.57074147365195,3.57387302780041,3.57705633483696,3.58029097918772,3.58357654527885,3.58691261753647,3.59029878038671,3.59373461825571,3.59721971556961,3.60075365675453,3.60433602623661,3.60796640844199,3.61164438779679,3.61536954872716,3.61914147565922,3.62295975301912,3.62682396523298,3.63073369672694,3.63468853192713,3.63868805525968,3.64273185115074,3.64681950402643,3.65095059831288,3.65512471843624,3.65934144882264,3.6636003738982,3.66790107808907,3.67224314582138,3.67662616152125,3.68104970961483,3.68551337452826,3.69001674068765,3.69455939251915,3.69914091444889,3.70376089090301,3.70841890630764,3.71311454508891,3.71784739167295,3.72261703048591,3.72742304595391,3.73226502250309,3.73714254455958,3.74205519654952,3.74700256289904,3.75198422803427,3.75699977638136,3.76204879236642,3.7671308604156,3.77224556495503,3.77739249041084,3.78257122120917,3.78778134177615,3.79302243653792,3.7982940899206,3.80359588635034,3.80892741025327,3.81428824605552,3.81967797818323,3.82509619106252,3.83054246911953,3.83601639678041,3.84151755847127,3.84704553861826,3.85259992164751,3.85818029198515,3.86378623405732,3.86941733229014,3.87507317110976,3.88075333494231,3.88645740821392,3.89218497535073,3.89793562077887,3.90370892892447,3.90950448421367,3.91532187107261,3.9211606739274,3.9270204772042,3.93290086532913,3.93880142272833,3.94472173382793,3.95066138305407,3.95661995483287,3.96259703359048,3.96859220375303,3.97460504974664],"text":["period: 1990-10-01<br />.value_smooth: 1.098931","period: 1990-10-15<br />.value_smooth: 1.098617","period: 1990-11-05<br />.value_smooth: 1.098337","period: 1990-11-19<br />.value_smooth: 1.098090","period: 1990-12-03<br />.value_smooth: 1.097876","period: 1990-12-17<br />.value_smooth: 1.097697","period: 1991-01-07<br />.value_smooth: 1.097551","period: 1991-01-21<br />.value_smooth: 1.097438","period: 1991-02-04<br />.value_smooth: 1.097360","period: 1991-02-18<br />.value_smooth: 1.097316","period: 1991-03-04<br />.value_smooth: 1.097306","period: 1991-03-18<br />.value_smooth: 1.097330","period: 1991-10-07<br />.value_smooth: 1.097388","period: 1991-10-21<br />.value_smooth: 1.097481","period: 1991-11-04<br />.value_smooth: 1.097608","period: 1991-11-18<br />.value_smooth: 1.097769","period: 1991-12-02<br />.value_smooth: 1.097966","period: 1991-12-16<br />.value_smooth: 1.098196","period: 1992-01-06<br />.value_smooth: 1.098462","period: 1992-01-20<br />.value_smooth: 1.098763","period: 1992-02-03<br />.value_smooth: 1.099098","period: 1992-02-17<br />.value_smooth: 1.099469","period: 1992-03-02<br />.value_smooth: 1.099874","period: 1992-03-16<br />.value_smooth: 1.100315","period: 1992-10-05<br />.value_smooth: 1.100791","period: 1992-10-19<br />.value_smooth: 1.101303","period: 1992-11-02<br />.value_smooth: 1.101850","period: 1992-11-16<br />.value_smooth: 1.102432","period: 1992-12-07<br />.value_smooth: 1.103050","period: 1992-12-21<br />.value_smooth: 1.103704","period: 1993-01-04<br />.value_smooth: 1.104394","period: 1993-01-18<br />.value_smooth: 1.105119","period: 1993-02-01<br />.value_smooth: 1.105881","period: 1993-02-15<br />.value_smooth: 1.106678","period: 1993-03-01<br />.value_smooth: 1.107512","period: 1993-03-15<br />.value_smooth: 1.108382","period: 1993-10-04<br />.value_smooth: 1.109288","period: 1993-10-18<br />.value_smooth: 1.110231","period: 1993-11-01<br />.value_smooth: 1.111210","period: 1993-11-15<br />.value_smooth: 1.112226","period: 1993-12-06<br />.value_smooth: 1.113278","period: 1993-12-20<br />.value_smooth: 1.114367","period: 1994-01-03<br />.value_smooth: 1.115493","period: 1994-01-17<br />.value_smooth: 1.116656","period: 1994-01-31<br />.value_smooth: 1.117856","period: 1994-02-07<br />.value_smooth: 1.119093","period: 1994-02-14<br />.value_smooth: 1.120367","period: 1994-02-21<br />.value_smooth: 1.121678","period: 1994-02-28<br />.value_smooth: 1.123027","period: 1994-03-07<br />.value_smooth: 1.124413","period: 1994-03-21<br />.value_smooth: 1.125837","period: 1994-10-03<br />.value_smooth: 1.127298","period: 1994-10-17<br />.value_smooth: 1.128797","period: 1994-11-07<br />.value_smooth: 1.130334","period: 1994-11-21<br />.value_smooth: 1.131908","period: 1994-12-05<br />.value_smooth: 1.133521","period: 1994-12-19<br />.value_smooth: 1.135171","period: 1995-01-02<br />.value_smooth: 1.136860","period: 1995-01-16<br />.value_smooth: 1.138587","period: 1995-02-06<br />.value_smooth: 1.140352","period: 1995-02-20<br />.value_smooth: 1.142155","period: 1995-03-06<br />.value_smooth: 1.143997","period: 1995-03-20<br />.value_smooth: 1.145877","period: 1995-10-02<br />.value_smooth: 1.147796","period: 1995-10-16<br />.value_smooth: 1.149754","period: 1995-11-06<br />.value_smooth: 1.151751","period: 1995-11-20<br />.value_smooth: 1.153786","period: 1995-12-04<br />.value_smooth: 1.155861","period: 1995-12-18<br />.value_smooth: 1.157974","period: 1996-01-01<br />.value_smooth: 1.160127","period: 1996-01-15<br />.value_smooth: 1.162318","period: 1996-02-05<br />.value_smooth: 1.164550","period: 1996-02-19<br />.value_smooth: 1.166820","period: 1996-03-04<br />.value_smooth: 1.169130","period: 1996-03-18<br />.value_smooth: 1.171480","period: 1996-10-07<br />.value_smooth: 1.173869","period: 1996-10-21<br />.value_smooth: 1.176298","period: 1996-10-28<br />.value_smooth: 1.178766","period: 1996-11-04<br />.value_smooth: 1.181275","period: 1996-11-11<br />.value_smooth: 1.183824","period: 1996-11-18<br />.value_smooth: 1.186412","period: 1996-11-25<br />.value_smooth: 1.189041","period: 1996-12-02<br />.value_smooth: 1.191710","period: 1996-12-09<br />.value_smooth: 1.194420","period: 1996-12-16<br />.value_smooth: 1.197170","period: 1996-12-23<br />.value_smooth: 1.199960","period: 1996-12-30<br />.value_smooth: 1.202791","period: 1997-01-06<br />.value_smooth: 1.205662","period: 1997-01-13<br />.value_smooth: 1.208575","period: 1997-01-20<br />.value_smooth: 1.211530","period: 1997-01-27<br />.value_smooth: 1.214529","period: 1997-02-03<br />.value_smooth: 1.217572","period: 1997-02-17<br />.value_smooth: 1.220658","period: 1997-03-03<br />.value_smooth: 1.223788","period: 1997-03-17<br />.value_smooth: 1.226962","period: 1997-10-06<br />.value_smooth: 1.230178","period: 1997-10-20<br />.value_smooth: 1.233437","period: 1997-11-03<br />.value_smooth: 1.236738","period: 1997-11-17<br />.value_smooth: 1.240082","period: 1997-12-01<br />.value_smooth: 1.243468","period: 1997-12-15<br />.value_smooth: 1.246895","period: 1998-01-05<br />.value_smooth: 1.250365","period: 1998-01-19<br />.value_smooth: 1.253875","period: 1998-02-02<br />.value_smooth: 1.257427","period: 1998-02-16<br />.value_smooth: 1.261020","period: 1998-03-02<br />.value_smooth: 1.264653","period: 1998-03-16<br />.value_smooth: 1.268327","period: 1998-10-05<br />.value_smooth: 1.272041","period: 1998-10-19<br />.value_smooth: 1.275795","period: 1998-11-02<br />.value_smooth: 1.279589","period: 1998-11-16<br />.value_smooth: 1.283423","period: 1998-12-07<br />.value_smooth: 1.287296","period: 1998-12-21<br />.value_smooth: 1.291208","period: 1999-01-04<br />.value_smooth: 1.295159","period: 1999-01-18<br />.value_smooth: 1.299148","period: 1999-02-01<br />.value_smooth: 1.303176","period: 1999-02-15<br />.value_smooth: 1.307242","period: 1999-03-01<br />.value_smooth: 1.311346","period: 1999-03-15<br />.value_smooth: 1.315488","period: 1999-10-04<br />.value_smooth: 1.319667","period: 1999-10-18<br />.value_smooth: 1.323884","period: 1999-11-01<br />.value_smooth: 1.328137","period: 1999-11-15<br />.value_smooth: 1.332428","period: 1999-12-06<br />.value_smooth: 1.336755","period: 1999-12-20<br />.value_smooth: 1.341118","period: 2000-01-03<br />.value_smooth: 1.345517","period: 2000-01-17<br />.value_smooth: 1.349953","period: 2000-01-24<br />.value_smooth: 1.354424","period: 2000-01-31<br />.value_smooth: 1.358931","period: 2000-02-07<br />.value_smooth: 1.363472","period: 2000-02-14<br />.value_smooth: 1.368049","period: 2000-02-21<br />.value_smooth: 1.372661","period: 2000-02-28<br />.value_smooth: 1.377307","period: 2000-03-06<br />.value_smooth: 1.381987","period: 2000-03-13<br />.value_smooth: 1.386702","period: 2000-03-20<br />.value_smooth: 1.391450","period: 2000-10-02<br />.value_smooth: 1.396232","period: 2000-10-09<br />.value_smooth: 1.401048","period: 2000-10-16<br />.value_smooth: 1.405896","period: 2000-10-23<br />.value_smooth: 1.410778","period: 2000-10-30<br />.value_smooth: 1.415692","period: 2000-11-06<br />.value_smooth: 1.420639","period: 2000-11-13<br />.value_smooth: 1.425618","period: 2000-11-20<br />.value_smooth: 1.430629","period: 2000-11-27<br />.value_smooth: 1.435672","period: 2000-12-04<br />.value_smooth: 1.440746","period: 2000-12-11<br />.value_smooth: 1.445852","period: 2000-12-18<br />.value_smooth: 1.450989","period: 2000-12-25<br />.value_smooth: 1.456157","period: 2001-01-01<br />.value_smooth: 1.461355","period: 2001-01-08<br />.value_smooth: 1.466584","period: 2001-01-15<br />.value_smooth: 1.471843","period: 2001-01-22<br />.value_smooth: 1.477132","period: 2001-01-29<br />.value_smooth: 1.482451","period: 2001-02-05<br />.value_smooth: 1.487799","period: 2001-02-12<br />.value_smooth: 1.493177","period: 2001-02-19<br />.value_smooth: 1.498584","period: 2001-02-26<br />.value_smooth: 1.504019","period: 2001-03-05<br />.value_smooth: 1.509484","period: 2001-03-12<br />.value_smooth: 1.514976","period: 2001-03-19<br />.value_smooth: 1.520497","period: 2001-10-01<br />.value_smooth: 1.526046","period: 2001-10-08<br />.value_smooth: 1.531622","period: 2001-10-15<br />.value_smooth: 1.537226","period: 2001-10-22<br />.value_smooth: 1.542857","period: 2001-10-29<br />.value_smooth: 1.548515","period: 2001-11-05<br />.value_smooth: 1.554200","period: 2001-11-12<br />.value_smooth: 1.559912","period: 2001-11-19<br />.value_smooth: 1.565650","period: 2001-11-26<br />.value_smooth: 1.571414","period: 2001-12-03<br />.value_smooth: 1.577203","period: 2001-12-10<br />.value_smooth: 1.583019","period: 2001-12-17<br />.value_smooth: 1.588860","period: 2001-12-24<br />.value_smooth: 1.594726","period: 2001-12-31<br />.value_smooth: 1.600617","period: 2002-01-07<br />.value_smooth: 1.606533","period: 2002-01-14<br />.value_smooth: 1.612473","period: 2002-01-21<br />.value_smooth: 1.618459","period: 2002-01-28<br />.value_smooth: 1.624511","period: 2002-02-04<br />.value_smooth: 1.630628","period: 2002-02-11<br />.value_smooth: 1.636810","period: 2002-02-18<br />.value_smooth: 1.643055","period: 2002-02-25<br />.value_smooth: 1.649364","period: 2002-03-04<br />.value_smooth: 1.655734","period: 2002-03-11<br />.value_smooth: 1.662165","period: 2002-03-18<br />.value_smooth: 1.668657","period: 2002-10-07<br />.value_smooth: 1.675208","period: 2002-10-14<br />.value_smooth: 1.681818","period: 2002-10-21<br />.value_smooth: 1.688486","period: 2002-10-28<br />.value_smooth: 1.695211","period: 2002-11-04<br />.value_smooth: 1.701993","period: 2002-11-11<br />.value_smooth: 1.708829","period: 2002-11-18<br />.value_smooth: 1.715721","period: 2002-11-25<br />.value_smooth: 1.722666","period: 2002-12-02<br />.value_smooth: 1.729664","period: 2002-12-09<br />.value_smooth: 1.736714","period: 2002-12-16<br />.value_smooth: 1.743815","period: 2002-12-23<br />.value_smooth: 1.750967","period: 2002-12-30<br />.value_smooth: 1.758169","period: 2003-01-06<br />.value_smooth: 1.765419","period: 2003-01-13<br />.value_smooth: 1.772718","period: 2003-01-20<br />.value_smooth: 1.780063","period: 2003-01-27<br />.value_smooth: 1.787455","period: 2003-02-03<br />.value_smooth: 1.794893","period: 2003-02-10<br />.value_smooth: 1.802375","period: 2003-02-17<br />.value_smooth: 1.809901","period: 2003-02-24<br />.value_smooth: 1.817470","period: 2003-03-03<br />.value_smooth: 1.825082","period: 2003-03-10<br />.value_smooth: 1.832735","period: 2003-03-17<br />.value_smooth: 1.840428","period: 2003-10-06<br />.value_smooth: 1.848161","period: 2003-10-13<br />.value_smooth: 1.855934","period: 2003-10-20<br />.value_smooth: 1.863744","period: 2003-10-27<br />.value_smooth: 1.871592","period: 2003-11-03<br />.value_smooth: 1.879476","period: 2003-11-10<br />.value_smooth: 1.887396","period: 2003-11-17<br />.value_smooth: 1.895350","period: 2003-11-24<br />.value_smooth: 1.903339","period: 2003-12-01<br />.value_smooth: 1.911361","period: 2003-12-08<br />.value_smooth: 1.919415","period: 2003-12-15<br />.value_smooth: 1.927501","period: 2003-12-22<br />.value_smooth: 1.935617","period: 2003-12-29<br />.value_smooth: 1.943764","period: 2004-01-05<br />.value_smooth: 1.951939","period: 2004-01-12<br />.value_smooth: 1.960143","period: 2004-01-19<br />.value_smooth: 1.968374","period: 2004-01-26<br />.value_smooth: 1.976632","period: 2004-02-02<br />.value_smooth: 1.984915","period: 2004-02-09<br />.value_smooth: 1.993224","period: 2004-02-16<br />.value_smooth: 2.001556","period: 2004-02-23<br />.value_smooth: 2.009912","period: 2004-03-01<br />.value_smooth: 2.018291","period: 2004-03-08<br />.value_smooth: 2.026691","period: 2004-03-15<br />.value_smooth: 2.035112","period: 2004-10-04<br />.value_smooth: 2.043553","period: 2004-10-11<br />.value_smooth: 2.052013","period: 2004-10-18<br />.value_smooth: 2.060491","period: 2004-10-25<br />.value_smooth: 2.068987","period: 2004-11-01<br />.value_smooth: 2.077500","period: 2004-11-08<br />.value_smooth: 2.086029","period: 2004-11-15<br />.value_smooth: 2.094572","period: 2004-11-22<br />.value_smooth: 2.103130","period: 2004-11-29<br />.value_smooth: 2.111702","period: 2004-12-06<br />.value_smooth: 2.120286","period: 2004-12-13<br />.value_smooth: 2.128882","period: 2004-12-20<br />.value_smooth: 2.137489","period: 2004-12-27<br />.value_smooth: 2.146106","period: 2005-01-03<br />.value_smooth: 2.154732","period: 2005-01-10<br />.value_smooth: 2.163367","period: 2005-01-17<br />.value_smooth: 2.172009","period: 2005-01-24<br />.value_smooth: 2.180658","period: 2005-01-31<br />.value_smooth: 2.189313","period: 2005-02-07<br />.value_smooth: 2.197974","period: 2005-02-14<br />.value_smooth: 2.206639","period: 2005-02-21<br />.value_smooth: 2.215307","period: 2005-02-28<br />.value_smooth: 2.223978","period: 2005-03-07<br />.value_smooth: 2.232651","period: 2005-03-14<br />.value_smooth: 2.241325","period: 2005-10-03<br />.value_smooth: 2.250000","period: 2005-10-10<br />.value_smooth: 2.258674","period: 2005-10-17<br />.value_smooth: 2.267346","period: 2005-10-24<br />.value_smooth: 2.276016","period: 2005-10-31<br />.value_smooth: 2.284683","period: 2005-11-07<br />.value_smooth: 2.293347","period: 2005-11-14<br />.value_smooth: 2.302005","period: 2005-11-21<br />.value_smooth: 2.310789","period: 2005-11-28<br />.value_smooth: 2.319825","period: 2005-12-05<br />.value_smooth: 2.329106","period: 2005-12-12<br />.value_smooth: 2.338625","period: 2005-12-19<br />.value_smooth: 2.348377","period: 2005-12-26<br />.value_smooth: 2.358355","period: 2006-01-02<br />.value_smooth: 2.368552","period: 2006-01-09<br />.value_smooth: 2.378961","period: 2006-01-16<br />.value_smooth: 2.389578","period: 2006-01-23<br />.value_smooth: 2.400394","period: 2006-01-30<br />.value_smooth: 2.411404","period: 2006-02-06<br />.value_smooth: 2.422600","period: 2006-02-13<br />.value_smooth: 2.433978","period: 2006-02-20<br />.value_smooth: 2.445529","period: 2006-02-27<br />.value_smooth: 2.457248","period: 2006-03-06<br />.value_smooth: 2.469128","period: 2006-03-13<br />.value_smooth: 2.481163","period: 2006-10-02<br />.value_smooth: 2.493347","period: 2006-10-09<br />.value_smooth: 2.505672","period: 2006-10-16<br />.value_smooth: 2.518132","period: 2006-10-23<br />.value_smooth: 2.530722","period: 2006-10-30<br />.value_smooth: 2.543434","period: 2006-11-06<br />.value_smooth: 2.556261","period: 2006-11-13<br />.value_smooth: 2.569199","period: 2006-11-20<br />.value_smooth: 2.582239","period: 2006-11-27<br />.value_smooth: 2.595376","period: 2006-12-04<br />.value_smooth: 2.608603","period: 2006-12-11<br />.value_smooth: 2.621914","period: 2006-12-18<br />.value_smooth: 2.635302","period: 2006-12-25<br />.value_smooth: 2.648761","period: 2007-01-01<br />.value_smooth: 2.662284","period: 2007-01-08<br />.value_smooth: 2.675865","period: 2007-01-15<br />.value_smooth: 2.689497","period: 2007-01-22<br />.value_smooth: 2.703175","period: 2007-01-29<br />.value_smooth: 2.716890","period: 2007-02-05<br />.value_smooth: 2.730638","period: 2007-02-12<br />.value_smooth: 2.744411","period: 2007-02-19<br />.value_smooth: 2.758203","period: 2007-02-26<br />.value_smooth: 2.772008","period: 2007-03-05<br />.value_smooth: 2.785819","period: 2007-03-12<br />.value_smooth: 2.799630","period: 2007-10-08<br />.value_smooth: 2.813434","period: 2007-10-15<br />.value_smooth: 2.827225","period: 2007-10-22<br />.value_smooth: 2.840996","period: 2007-10-29<br />.value_smooth: 2.854741","period: 2007-11-05<br />.value_smooth: 2.868454","period: 2007-11-12<br />.value_smooth: 2.882127","period: 2007-11-19<br />.value_smooth: 2.895755","period: 2007-11-26<br />.value_smooth: 2.909330","period: 2007-12-03<br />.value_smooth: 2.922848","period: 2007-12-10<br />.value_smooth: 2.936300","period: 2007-12-17<br />.value_smooth: 2.949681","period: 2007-12-24<br />.value_smooth: 2.962985","period: 2007-12-31<br />.value_smooth: 2.976204","period: 2008-01-07<br />.value_smooth: 2.989332","period: 2008-01-14<br />.value_smooth: 3.002363","period: 2008-01-21<br />.value_smooth: 3.015290","period: 2008-01-28<br />.value_smooth: 3.028108","period: 2008-02-04<br />.value_smooth: 3.040808","period: 2008-02-11<br />.value_smooth: 3.053386","period: 2008-02-18<br />.value_smooth: 3.065834","period: 2008-02-25<br />.value_smooth: 3.078146","period: 2008-03-03<br />.value_smooth: 3.090316","period: 2008-03-10<br />.value_smooth: 3.102337","period: 2008-03-17<br />.value_smooth: 3.114202","period: 2008-10-06<br />.value_smooth: 3.125906","period: 2008-10-13<br />.value_smooth: 3.137442","period: 2008-10-20<br />.value_smooth: 3.148802","period: 2008-10-27<br />.value_smooth: 3.159982","period: 2008-11-03<br />.value_smooth: 3.170974","period: 2008-11-10<br />.value_smooth: 3.181772","period: 2008-11-17<br />.value_smooth: 3.192369","period: 2008-11-24<br />.value_smooth: 3.202759","period: 2008-12-01<br />.value_smooth: 3.212936","period: 2008-12-08<br />.value_smooth: 3.222893","period: 2008-12-15<br />.value_smooth: 3.232623","period: 2008-12-22<br />.value_smooth: 3.242120","period: 2008-12-29<br />.value_smooth: 3.251379","period: 2009-01-05<br />.value_smooth: 3.260391","period: 2009-01-12<br />.value_smooth: 3.269151","period: 2009-01-19<br />.value_smooth: 3.277653","period: 2009-01-26<br />.value_smooth: 3.285889","period: 2009-02-02<br />.value_smooth: 3.293854","period: 2009-02-09<br />.value_smooth: 3.301540","period: 2009-02-16<br />.value_smooth: 3.308942","period: 2009-02-23<br />.value_smooth: 3.316053","period: 2009-03-02<br />.value_smooth: 3.322867","period: 2009-03-09<br />.value_smooth: 3.329377","period: 2009-03-16<br />.value_smooth: 3.335692","period: 2009-10-05<br />.value_smooth: 3.341927","period: 2009-10-12<br />.value_smooth: 3.348081","period: 2009-10-19<br />.value_smooth: 3.354157","period: 2009-10-26<br />.value_smooth: 3.360153","period: 2009-11-02<br />.value_smooth: 3.366071","period: 2009-11-09<br />.value_smooth: 3.371911","period: 2009-11-16<br />.value_smooth: 3.377672","period: 2009-11-23<br />.value_smooth: 3.383357","period: 2009-11-30<br />.value_smooth: 3.388965","period: 2009-12-07<br />.value_smooth: 3.394496","period: 2009-12-14<br />.value_smooth: 3.399952","period: 2009-12-21<br />.value_smooth: 3.405332","period: 2009-12-28<br />.value_smooth: 3.410637","period: 2010-01-04<br />.value_smooth: 3.415867","period: 2010-01-11<br />.value_smooth: 3.421023","period: 2010-01-18<br />.value_smooth: 3.426106","period: 2010-01-25<br />.value_smooth: 3.431115","period: 2010-02-01<br />.value_smooth: 3.436051","period: 2010-02-08<br />.value_smooth: 3.440916","period: 2010-02-15<br />.value_smooth: 3.445708","period: 2010-02-22<br />.value_smooth: 3.450428","period: 2010-03-01<br />.value_smooth: 3.455078","period: 2010-03-08<br />.value_smooth: 3.459657","period: 2010-03-15<br />.value_smooth: 3.464166","period: 2010-10-04<br />.value_smooth: 3.468605","period: 2010-10-11<br />.value_smooth: 3.472975","period: 2010-10-18<br />.value_smooth: 3.477276","period: 2010-10-25<br />.value_smooth: 3.481509","period: 2010-11-01<br />.value_smooth: 3.485674","period: 2010-11-08<br />.value_smooth: 3.489771","period: 2010-11-15<br />.value_smooth: 3.493801","period: 2010-11-22<br />.value_smooth: 3.497765","period: 2010-11-29<br />.value_smooth: 3.501663","period: 2010-12-06<br />.value_smooth: 3.505494","period: 2010-12-13<br />.value_smooth: 3.509261","period: 2010-12-20<br />.value_smooth: 3.512963","period: 2010-12-27<br />.value_smooth: 3.516600","period: 2011-01-03<br />.value_smooth: 3.520174","period: 2011-01-10<br />.value_smooth: 3.523684","period: 2011-01-17<br />.value_smooth: 3.527131","period: 2011-01-24<br />.value_smooth: 3.530516","period: 2011-01-31<br />.value_smooth: 3.533838","period: 2011-02-07<br />.value_smooth: 3.537099","period: 2011-02-14<br />.value_smooth: 3.540298","period: 2011-02-21<br />.value_smooth: 3.543436","period: 2011-02-28<br />.value_smooth: 3.546515","period: 2011-03-07<br />.value_smooth: 3.549533","period: 2011-03-14<br />.value_smooth: 3.552492","period: 2011-10-03<br />.value_smooth: 3.555392","period: 2011-10-10<br />.value_smooth: 3.558233","period: 2011-10-17<br />.value_smooth: 3.561016","period: 2011-10-24<br />.value_smooth: 3.563741","period: 2011-10-31<br />.value_smooth: 3.566410","period: 2011-11-07<br />.value_smooth: 3.569021","period: 2011-11-14<br />.value_smooth: 3.571576","period: 2011-11-21<br />.value_smooth: 3.574075","period: 2011-11-28<br />.value_smooth: 3.576519","period: 2011-12-05<br />.value_smooth: 3.578908","period: 2011-12-12<br />.value_smooth: 3.581242","period: 2011-12-19<br />.value_smooth: 3.583522","period: 2011-12-26<br />.value_smooth: 3.585748","period: 2012-01-02<br />.value_smooth: 3.587921","period: 2012-01-09<br />.value_smooth: 3.590041","period: 2012-01-16<br />.value_smooth: 3.592109","period: 2012-01-23<br />.value_smooth: 3.594125","period: 2012-01-30<br />.value_smooth: 3.596089","period: 2012-02-06<br />.value_smooth: 3.598003","period: 2012-02-13<br />.value_smooth: 3.599866","period: 2012-02-20<br />.value_smooth: 3.601679","period: 2012-02-27<br />.value_smooth: 3.603442","period: 2012-03-05<br />.value_smooth: 3.605156","period: 2012-03-12<br />.value_smooth: 3.606821","period: 2012-03-19<br />.value_smooth: 3.608437","period: 2012-10-01<br />.value_smooth: 3.610006","period: 2012-10-08<br />.value_smooth: 3.611528","period: 2012-10-15<br />.value_smooth: 3.613002","period: 2012-10-22<br />.value_smooth: 3.614430","period: 2012-10-29<br />.value_smooth: 3.615812","period: 2012-11-05<br />.value_smooth: 3.617148","period: 2012-11-12<br />.value_smooth: 3.618438","period: 2012-11-19<br />.value_smooth: 3.619684","period: 2012-11-26<br />.value_smooth: 3.620886","period: 2012-12-03<br />.value_smooth: 3.622044","period: 2012-12-10<br />.value_smooth: 3.623158","period: 2012-12-17<br />.value_smooth: 3.624230","period: 2012-12-24<br />.value_smooth: 3.625258","period: 2012-12-31<br />.value_smooth: 3.626245","period: 2013-01-07<br />.value_smooth: 3.627105","period: 2013-01-14<br />.value_smooth: 3.627756","period: 2013-01-21<br />.value_smooth: 3.628203","period: 2013-01-28<br />.value_smooth: 3.628452","period: 2013-02-04<br />.value_smooth: 3.628506","period: 2013-02-11<br />.value_smooth: 3.628371","period: 2013-02-18<br />.value_smooth: 3.628052","period: 2013-02-25<br />.value_smooth: 3.627554","period: 2013-03-04<br />.value_smooth: 3.626882","period: 2013-03-11<br />.value_smooth: 3.626039","period: 2013-03-18<br />.value_smooth: 3.625032","period: 2013-10-07<br />.value_smooth: 3.623866","period: 2013-10-14<br />.value_smooth: 3.622544","period: 2013-10-21<br />.value_smooth: 3.621072","period: 2013-10-28<br />.value_smooth: 3.619456","period: 2013-11-04<br />.value_smooth: 3.617699","period: 2013-11-11<br />.value_smooth: 3.615806","period: 2013-11-18<br />.value_smooth: 3.613784","period: 2013-11-25<br />.value_smooth: 3.611635","period: 2013-12-02<br />.value_smooth: 3.609366","period: 2013-12-09<br />.value_smooth: 3.606981","period: 2013-12-16<br />.value_smooth: 3.604486","period: 2013-12-23<br />.value_smooth: 3.601884","period: 2013-12-30<br />.value_smooth: 3.599181","period: 2014-01-06<br />.value_smooth: 3.596382","period: 2014-01-13<br />.value_smooth: 3.593491","period: 2014-01-20<br />.value_smooth: 3.590514","period: 2014-01-27<br />.value_smooth: 3.587456","period: 2014-02-03<br />.value_smooth: 3.584321","period: 2014-02-10<br />.value_smooth: 3.581114","period: 2014-02-17<br />.value_smooth: 3.577840","period: 2014-02-24<br />.value_smooth: 3.574504","period: 2014-03-03<br />.value_smooth: 3.571110","period: 2014-03-10<br />.value_smooth: 3.567665","period: 2014-03-17<br />.value_smooth: 3.564172","period: 2014-10-13<br />.value_smooth: 3.560637","period: 2014-10-20<br />.value_smooth: 3.557064","period: 2014-10-27<br />.value_smooth: 3.553459","period: 2014-11-03<br />.value_smooth: 3.549825","period: 2014-11-10<br />.value_smooth: 3.546169","period: 2014-11-17<br />.value_smooth: 3.542494","period: 2014-11-24<br />.value_smooth: 3.538807","period: 2014-12-01<br />.value_smooth: 3.535111","period: 2014-12-08<br />.value_smooth: 3.531412","period: 2014-12-15<br />.value_smooth: 3.527714","period: 2014-12-22<br />.value_smooth: 3.524023","period: 2014-12-29<br />.value_smooth: 3.520343","period: 2015-01-05<br />.value_smooth: 3.516679","period: 2015-01-12<br />.value_smooth: 3.513037","period: 2015-01-19<br />.value_smooth: 3.509420","period: 2015-01-26<br />.value_smooth: 3.505834","period: 2015-02-02<br />.value_smooth: 3.502284","period: 2015-02-09<br />.value_smooth: 3.498774","period: 2015-02-16<br />.value_smooth: 3.495310","period: 2015-02-23<br />.value_smooth: 3.491896","period: 2015-03-02<br />.value_smooth: 3.488538","period: 2015-03-09<br />.value_smooth: 3.485239","period: 2015-03-16<br />.value_smooth: 3.482006","period: 2015-03-23<br />.value_smooth: 3.478843","period: 2015-03-30<br />.value_smooth: 3.475754","period: 2015-10-05<br />.value_smooth: 3.472746","period: 2015-10-12<br />.value_smooth: 3.469821","period: 2015-10-19<br />.value_smooth: 3.466987","period: 2015-10-26<br />.value_smooth: 3.464246","period: 2015-11-02<br />.value_smooth: 3.461605","period: 2015-11-09<br />.value_smooth: 3.459068","period: 2015-11-16<br />.value_smooth: 3.456640","period: 2015-11-23<br />.value_smooth: 3.454327","period: 2015-11-30<br />.value_smooth: 3.452131","period: 2015-12-07<br />.value_smooth: 3.450060","period: 2015-12-14<br />.value_smooth: 3.448117","period: 2015-12-21<br />.value_smooth: 3.446308","period: 2015-12-28<br />.value_smooth: 3.444637","period: 2016-01-04<br />.value_smooth: 3.443109","period: 2016-01-11<br />.value_smooth: 3.441729","period: 2016-01-18<br />.value_smooth: 3.440503","period: 2016-01-25<br />.value_smooth: 3.439434","period: 2016-02-01<br />.value_smooth: 3.438528","period: 2016-02-08<br />.value_smooth: 3.437790","period: 2016-02-15<br />.value_smooth: 3.437225","period: 2016-02-22<br />.value_smooth: 3.436836","period: 2016-02-29<br />.value_smooth: 3.436631","period: 2016-03-07<br />.value_smooth: 3.436612","period: 2016-03-14<br />.value_smooth: 3.436786","period: 2016-03-21<br />.value_smooth: 3.437156","period: 2016-03-28<br />.value_smooth: 3.437729","period: 2016-10-03<br />.value_smooth: 3.438508","period: 2016-10-10<br />.value_smooth: 3.439499","period: 2016-10-17<br />.value_smooth: 3.440586","period: 2016-10-24<br />.value_smooth: 3.441651","period: 2016-10-31<br />.value_smooth: 3.442694","period: 2016-11-07<br />.value_smooth: 3.443717","period: 2016-11-14<br />.value_smooth: 3.444721","period: 2016-11-21<br />.value_smooth: 3.445706","period: 2016-11-28<br />.value_smooth: 3.446674","period: 2016-12-05<br />.value_smooth: 3.447626","period: 2016-12-12<br />.value_smooth: 3.448562","period: 2016-12-19<br />.value_smooth: 3.449484","period: 2016-12-26<br />.value_smooth: 3.450393","period: 2017-01-02<br />.value_smooth: 3.451289","period: 2017-01-09<br />.value_smooth: 3.452174","period: 2017-01-16<br />.value_smooth: 3.453048","period: 2017-01-23<br />.value_smooth: 3.453913","period: 2017-01-30<br />.value_smooth: 3.454770","period: 2017-02-06<br />.value_smooth: 3.455619","period: 2017-02-13<br />.value_smooth: 3.456462","period: 2017-02-20<br />.value_smooth: 3.457299","period: 2017-02-27<br />.value_smooth: 3.458132","period: 2017-03-06<br />.value_smooth: 3.458961","period: 2017-03-13<br />.value_smooth: 3.459788","period: 2017-03-20<br />.value_smooth: 3.460614","period: 2017-03-27<br />.value_smooth: 3.461439","period: 2017-10-02<br />.value_smooth: 3.462265","period: 2017-10-09<br />.value_smooth: 3.463092","period: 2017-10-16<br />.value_smooth: 3.463922","period: 2017-10-23<br />.value_smooth: 3.464755","period: 2017-10-30<br />.value_smooth: 3.465592","period: 2017-11-06<br />.value_smooth: 3.466436","period: 2017-11-13<br />.value_smooth: 3.467285","period: 2017-11-20<br />.value_smooth: 3.468143","period: 2017-11-27<br />.value_smooth: 3.469008","period: 2017-12-04<br />.value_smooth: 3.469883","period: 2017-12-11<br />.value_smooth: 3.470769","period: 2017-12-18<br />.value_smooth: 3.471666","period: 2017-12-25<br />.value_smooth: 3.472576","period: 2018-01-01<br />.value_smooth: 3.473499","period: 2018-01-08<br />.value_smooth: 3.474436","period: 2018-01-15<br />.value_smooth: 3.475389","period: 2018-01-22<br />.value_smooth: 3.476358","period: 2018-01-29<br />.value_smooth: 3.477345","period: 2018-02-05<br />.value_smooth: 3.478350","period: 2018-02-12<br />.value_smooth: 3.479374","period: 2018-02-19<br />.value_smooth: 3.480419","period: 2018-02-26<br />.value_smooth: 3.481485","period: 2018-03-05<br />.value_smooth: 3.482574","period: 2018-03-12<br />.value_smooth: 3.483686","period: 2018-03-19<br />.value_smooth: 3.484823","period: 2018-03-26<br />.value_smooth: 3.485984","period: 2018-10-01<br />.value_smooth: 3.487173","period: 2018-10-08<br />.value_smooth: 3.488388","period: 2018-10-15<br />.value_smooth: 3.489632","period: 2018-10-22<br />.value_smooth: 3.490905","period: 2018-10-29<br />.value_smooth: 3.492209","period: 2018-11-05<br />.value_smooth: 3.493543","period: 2018-11-12<br />.value_smooth: 3.494911","period: 2018-11-19<br />.value_smooth: 3.496311","period: 2018-11-26<br />.value_smooth: 3.497746","period: 2018-12-03<br />.value_smooth: 3.499216","period: 2018-12-10<br />.value_smooth: 3.500722","period: 2018-12-17<br />.value_smooth: 3.502266","period: 2018-12-24<br />.value_smooth: 3.503848","period: 2018-12-31<br />.value_smooth: 3.505469","period: 2019-01-07<br />.value_smooth: 3.507130","period: 2019-01-14<br />.value_smooth: 3.508833","period: 2019-01-21<br />.value_smooth: 3.510578","period: 2019-01-28<br />.value_smooth: 3.512366","period: 2019-02-04<br />.value_smooth: 3.514199","period: 2019-02-11<br />.value_smooth: 3.516076","period: 2019-02-18<br />.value_smooth: 3.518000","period: 2019-02-25<br />.value_smooth: 3.519971","period: 2019-03-04<br />.value_smooth: 3.521991","period: 2019-03-11<br />.value_smooth: 3.524059","period: 2019-03-18<br />.value_smooth: 3.526178","period: 2019-03-25<br />.value_smooth: 3.528348","period: 2019-10-07<br />.value_smooth: 3.530570","period: 2019-10-14<br />.value_smooth: 3.532845","period: 2019-10-21<br />.value_smooth: 3.535175","period: 2019-10-28<br />.value_smooth: 3.537559","period: 2019-11-04<br />.value_smooth: 3.540000","period: 2019-11-11<br />.value_smooth: 3.542498","period: 2019-11-18<br />.value_smooth: 3.545054","period: 2019-11-25<br />.value_smooth: 3.547669","period: 2019-12-02<br />.value_smooth: 3.550344","period: 2019-12-09<br />.value_smooth: 3.553081","period: 2019-12-16<br />.value_smooth: 3.555879","period: 2019-12-23<br />.value_smooth: 3.558741","period: 2019-12-30<br />.value_smooth: 3.561661","period: 2020-01-06<br />.value_smooth: 3.564635","period: 2020-01-13<br />.value_smooth: 3.567662","period: 2020-01-20<br />.value_smooth: 3.570741","period: 2020-01-27<br />.value_smooth: 3.573873","period: 2020-02-03<br />.value_smooth: 3.577056","period: 2020-02-10<br />.value_smooth: 3.580291","period: 2020-02-17<br />.value_smooth: 3.583577","period: 2020-02-24<br />.value_smooth: 3.586913","period: 2020-03-02<br />.value_smooth: 3.590299","period: 2020-03-09<br />.value_smooth: 3.593735","period: 2020-03-16<br />.value_smooth: 3.597220","period: 2020-03-23<br />.value_smooth: 3.600754","period: 2020-03-30<br />.value_smooth: 3.604336","period: 2020-10-05<br />.value_smooth: 3.607966","period: 2020-10-12<br />.value_smooth: 3.611644","period: 2020-10-19<br />.value_smooth: 3.615370","period: 2020-10-26<br />.value_smooth: 3.619141","period: 2020-11-02<br />.value_smooth: 3.622960","period: 2020-11-09<br />.value_smooth: 3.626824","period: 2020-11-16<br />.value_smooth: 3.630734","period: 2020-11-23<br />.value_smooth: 3.634689","period: 2020-11-30<br />.value_smooth: 3.638688","period: 2020-12-07<br />.value_smooth: 3.642732","period: 2020-12-14<br />.value_smooth: 3.646820","period: 2020-12-21<br />.value_smooth: 3.650951","period: 2020-12-28<br />.value_smooth: 3.655125","period: 2021-01-04<br />.value_smooth: 3.659341","period: 2021-01-11<br />.value_smooth: 3.663600","period: 2021-01-18<br />.value_smooth: 3.667901","period: 2021-01-25<br />.value_smooth: 3.672243","period: 2021-02-01<br />.value_smooth: 3.676626","period: 2021-02-08<br />.value_smooth: 3.681050","period: 2021-02-15<br />.value_smooth: 3.685513","period: 2021-02-22<br />.value_smooth: 3.690017","period: 2021-03-01<br />.value_smooth: 3.694559","period: 2021-03-08<br />.value_smooth: 3.699141","period: 2021-03-15<br />.value_smooth: 3.703761","period: 2021-03-22<br />.value_smooth: 3.708419","period: 2021-03-29<br />.value_smooth: 3.713115","period: 2021-10-04<br />.value_smooth: 3.717847","period: 2021-10-11<br />.value_smooth: 3.722617","period: 2021-10-18<br />.value_smooth: 3.727423","period: 2021-10-25<br />.value_smooth: 3.732265","period: 2021-11-01<br />.value_smooth: 3.737143","period: 2021-11-08<br />.value_smooth: 3.742055","period: 2021-11-15<br />.value_smooth: 3.747003","period: 2021-11-22<br />.value_smooth: 3.751984","period: 2021-11-29<br />.value_smooth: 3.757000","period: 2021-12-06<br />.value_smooth: 3.762049","period: 2021-12-13<br />.value_smooth: 3.767131","period: 2021-12-20<br />.value_smooth: 3.772246","period: 2021-12-27<br />.value_smooth: 3.777392","period: 2022-01-03<br />.value_smooth: 3.782571","period: 2022-01-10<br />.value_smooth: 3.787781","period: 2022-01-17<br />.value_smooth: 3.793022","period: 2022-01-24<br />.value_smooth: 3.798294","period: 2022-01-31<br />.value_smooth: 3.803596","period: 2022-02-07<br />.value_smooth: 3.808927","period: 2022-02-14<br />.value_smooth: 3.814288","period: 2022-02-21<br />.value_smooth: 3.819678","period: 2022-02-28<br />.value_smooth: 3.825096","period: 2022-03-07<br />.value_smooth: 3.830542","period: 2022-03-14<br />.value_smooth: 3.836016","period: 2022-03-21<br />.value_smooth: 3.841518","period: 2022-03-28<br />.value_smooth: 3.847046","period: 2022-10-03<br />.value_smooth: 3.852600","period: 2022-10-10<br />.value_smooth: 3.858180","period: 2022-10-17<br />.value_smooth: 3.863786","period: 2022-10-24<br />.value_smooth: 3.869417","period: 2022-10-31<br />.value_smooth: 3.875073","period: 2022-11-07<br />.value_smooth: 3.880753","period: 2022-11-14<br />.value_smooth: 3.886457","period: 2022-11-21<br />.value_smooth: 3.892185","period: 2022-11-28<br />.value_smooth: 3.897936","period: 2022-12-05<br />.value_smooth: 3.903709","period: 2022-12-12<br />.value_smooth: 3.909504","period: 2022-12-19<br />.value_smooth: 3.915322","period: 2022-12-26<br />.value_smooth: 3.921161","period: 2023-01-02<br />.value_smooth: 3.927020","period: 2023-01-09<br />.value_smooth: 3.932901","period: 2023-01-16<br />.value_smooth: 3.938801","period: 2023-01-23<br />.value_smooth: 3.944722","period: 2023-01-30<br />.value_smooth: 3.950661","period: 2023-02-06<br />.value_smooth: 3.956620","period: 2023-02-13<br />.value_smooth: 3.962597","period: 2023-02-20<br />.value_smooth: 3.968592","period: 2023-02-27<br />.value_smooth: 3.974605"],"type":"scatter","mode":"lines","line":{"width":3.77952755905512,"color":"rgba(51,102,255,1)","dash":"solid"},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":43.7625570776256,"r":7.30593607305936,"b":25.5707762557078,"l":16.8036529680365},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187},"title":{"text":"Time Series Plot","font":{"color":"rgba(44,62,80,1)","family":"","size":17.5342465753425},"x":0,"xref":"paper"},"xaxis":{"domain":[0,1],"automargin":true,"type":"date","autorange":true,"range":["1989-02-16","2024-10-10"],"tickmode":"auto","ticktext":["1990","2000","2010","2020"],"tickvals":[7305,10957,14610,18262],"categoryorder":"array","categoryarray":["1990","2000","2010","2020"],"nticks":null,"ticks":"outside","tickcolor":"rgba(204,204,204,1)","ticklen":3.65296803652968,"tickwidth":0.22139200221392,"showticklabels":true,"tickfont":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(204,204,204,1)","gridwidth":0.22139200221392,"zeroline":false,"anchor":"y","title":{"text":"","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":true,"range":[0.76485,6.31215],"tickmode":"auto","ticktext":["2","4","6"],"tickvals":[2,4,6],"categoryorder":"array","categoryarray":["2","4","6"],"nticks":null,"ticks":"outside","tickcolor":"rgba(204,204,204,1)","ticklen":3.65296803652968,"tickwidth":0.22139200221392,"showticklabels":true,"tickfont":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(204,204,204,1)","gridwidth":0.22139200221392,"zeroline":false,"anchor":"x","title":{"text":"","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(44,62,80,1)","width":0.33208800332088,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":false,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"644836f15f24":{"x":{},"y":{},"type":"scatter"},"64488c979ec":{"x":{},"y":{}}},"cur_data":"644836f15f24","visdat":{"644836f15f24":["function (y) ","x"],"64488c979ec":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>rvest</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-08/index.html</guid>
  <pubDate>Wed, 08 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>tidy_bernoulli() with {data.table}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-07/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>So I was challanged by Adrian Antico to learn <a href="https://rdatatable.gitlab.io/data.table/"><code>data.table</code></a>, so yesterday I started with a single function from my package <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> called <strong>tidy_bernoulli()</strong>.</p>
<p>So let’s see how I did (hint, works but needs a lot of improvement, so I’ll learn it.)</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Let’s see the function in <code>data.table</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(stats)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb1-5"></span>
<span id="cb1-6">new_func <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(num_sims, n, pr) {</span>
<span id="cb1-7"></span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;"># Create a data.table with one row per simulation</span></span>
<span id="cb1-9">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.table</span>(<span class="at" style="color: #657422;">sim_number =</span> <span class="fu" style="color: #4758AB;">factor</span>(<span class="fu" style="color: #4758AB;">seq</span>(<span class="dv" style="color: #AD0000;">1</span>, num_sims, <span class="dv" style="color: #AD0000;">1</span>)))</span>
<span id="cb1-10">  </span>
<span id="cb1-11">  <span class="co" style="color: #5E5E5E;"># Group the data by sim_number and add columns for x and y</span></span>
<span id="cb1-12">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb1-13">    <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n),</span>
<span id="cb1-14">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rbinom</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb1-15">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="co" style="color: #5E5E5E;"># Compute the density of the y values and add columns for dx and dy</span></span>
<span id="cb1-18">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb1-19">    <span class="at" style="color: #657422;">d =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">density</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">n =</span> n)[<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>)] <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">set_names</span>(<span class="st" style="color: #20794D;">"dx"</span>, <span class="st" style="color: #20794D;">"dy"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-21">      <span class="fu" style="color: #4758AB;">as_tibble</span>())</span>
<span id="cb1-22">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb1-23">  </span>
<span id="cb1-24">  <span class="co" style="color: #5E5E5E;"># Compute the p-values for the y values and add a column for p</span></span>
<span id="cb1-25">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb1-26">    <span class="at" style="color: #657422;">p =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(y), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb1-27">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb1-28">  </span>
<span id="cb1-29">  <span class="co" style="color: #5E5E5E;"># Compute the q-values for the p-values and add a column for q</span></span>
<span id="cb1-30">  sim_data[, <span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">:=</span><span class="st" style="color: #20794D;">`</span> (</span>
<span id="cb1-31">    <span class="at" style="color: #657422;">q =</span> <span class="fu" style="color: #4758AB;">list</span>(stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">qbinom</span>(<span class="fu" style="color: #4758AB;">unlist</span>(p), <span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">prob =</span> pr))</span>
<span id="cb1-32">  ), by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb1-33">  </span>
<span id="cb1-34">  <span class="co" style="color: #5E5E5E;"># Unnest the columns for x, y, d, p, and q</span></span>
<span id="cb1-35">  sim_data <span class="ot" style="color: #003B4F;">&lt;-</span> sim_data[, </span>
<span id="cb1-36">                       <span class="fu" style="color: #4758AB;">unnest</span>(</span>
<span id="cb1-37">                         .SD, </span>
<span id="cb1-38">                         <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="st" style="color: #20794D;">"y"</span>, <span class="st" style="color: #20794D;">"d"</span>, <span class="st" style="color: #20794D;">"p"</span>, <span class="st" style="color: #20794D;">"q"</span>)</span>
<span id="cb1-39">                         ), </span>
<span id="cb1-40">                       by <span class="ot" style="color: #003B4F;">=</span> sim_number]</span>
<span id="cb1-41">  </span>
<span id="cb1-42">  <span class="co" style="color: #5E5E5E;"># Remove the grouping</span></span>
<span id="cb1-43">  sim_data[, sim_number <span class="sc" style="color: #5E5E5E;">:</span><span class="er" style="color: #AD0000;">=</span> <span class="fu" style="color: #4758AB;">as.factor</span>(sim_number)]</span>
<span id="cb1-44">  </span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;">return</span>(sim_data)</span>
<span id="cb1-46">}</span></code></pre></div>
</div>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Now, let’s see the output of the original function <strong>tidy_bernoulli()</strong> and <strong>new_func()</strong>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb2-2">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">50</span></span>
<span id="cb2-3">pr <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb2-4">sims <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb2-7">tb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tidy_bernoulli</span>(<span class="at" style="color: #657422;">.n =</span> n, <span class="at" style="color: #657422;">.prob =</span> pr, <span class="at" style="color: #657422;">.num_sims =</span> sims)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb2-10">nf <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">new_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">num_sims =</span> sims, <span class="at" style="color: #657422;">pr =</span> pr)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">print</span>(tb)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 250 × 7
   sim_number     x     y      dx     dy     p     q
   &lt;fct&gt;      &lt;int&gt; &lt;int&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1 1              1     0 -0.405  0.0292   0.9     0
 2 1              2     0 -0.368  0.0637   0.9     0
 3 1              3     0 -0.331  0.129    0.9     0
 4 1              4     0 -0.294  0.243    0.9     0
 5 1              5     1 -0.258  0.424    1       1
 6 1              6     0 -0.221  0.688    0.9     0
 7 1              7     0 -0.184  1.03     0.9     0
 8 1              8     0 -0.147  1.44     0.9     0
 9 1              9     0 -0.110  1.87     0.9     0
10 1             10     0 -0.0727 2.25     0.9     0
# … with 240 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">print</span>(nf)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     sim_number  x y         dx          dy   p q
  1:          1  1 0 -0.4053113 0.029196114 0.9 0
  2:          1  2 0 -0.3683598 0.063683226 0.9 0
  3:          1  3 0 -0.3314083 0.129227066 0.9 0
  4:          1  4 0 -0.2944568 0.242967496 0.9 0
  5:          1  5 1 -0.2575054 0.424395426 1.0 1
 ---                                             
246:          5 46 0  1.2575054 0.057872104 0.9 0
247:          5 47 0  1.2944568 0.033131931 0.9 0
248:          5 48 1  1.3314083 0.017621873 1.0 1
249:          5 49 1  1.3683598 0.008684076 1.0 1
250:          5 50 0  1.4053113 0.003981288 0.9 0</code></pre>
</div>
</div>
<p>Ok so at least the output is identical which is a good sign. Now let’s benchmark the two solutions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb6-5">  <span class="st" style="color: #20794D;">"original"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb6-6">    <span class="fu" style="color: #4758AB;">tidy_bernoulli</span>(<span class="at" style="color: #657422;">.n =</span> n, <span class="at" style="color: #657422;">.prob =</span> pr, <span class="at" style="color: #657422;">.num_sims =</span> sims)</span>
<span id="cb6-7">  },</span>
<span id="cb6-8">  <span class="st" style="color: #20794D;">"data.table"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;">new_func</span>(<span class="at" style="color: #657422;">n =</span> n, <span class="at" style="color: #657422;">pr =</span> pr, <span class="at" style="color: #657422;">num_sims =</span> sims)</span>
<span id="cb6-10">  },</span>
<span id="cb6-11">  <span class="at" style="color: #657422;">replications =</span> <span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb6-12">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>  )</span>
<span id="cb6-13">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>        test replications elapsed relative user.self sys.self
1   original          100    3.29     1.00      2.51     0.08
2 data.table          100    4.64     1.41      3.34     0.04</code></pre>
</div>
</div>
<p>Yeah, needs some work but it’s a start.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>data.table</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-07/index.html</guid>
  <pubDate>Tue, 07 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Simple examples of imap() from {purrr}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-06/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <a href="https://purrr.tidyverse.org/reference/imap.html"><code>imap()</code></a> function is a powerful tool for iterating over a list or a vector while also keeping track of the index or names of the elements. This function applies a given function to each element of a list, along with the name or index of that element, and returns a new list with the results.</p>
<p>The <code>imap()</code> function takes two main arguments: <code>x</code> and <code>.f</code>. <code>x</code> is the list or vector to iterate over, and <code>.f</code> is the function to apply to each element. The .f function takes two arguments: x and i, where x is the value of the element and i is the index or name of the element.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the <code>imap()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">imap</span>(.x, .f, ...)</span></code></pre></div>
</div>
<p>Here is the documentation from the function page:</p>
<ul>
<li><code>.x</code> - A list or atomic vector.</li>
<li><code>.f</code> - A function, specified in one of the following ways:
<ul>
<li>A named function, e.g.&nbsp;paste.</li>
<li>An anonymous function, e.g.&nbsp;(x, idx) x + idx or function(x, idx) x + idx.</li>
<li>A formula, e.g.&nbsp;~ .x + .y. You must use .x to refer to the current element and .y to refer to the current index. Only recommended if you require backward compatibility with older versions of R.</li>
</ul></li>
<li><code>...</code> - Additional arguments passed on to the mapped function. We now generally recommend against using … to pass additional (constant) arguments to .f. Instead use a shorthand anonymous function:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Instead of</span></span>
<span id="cb2-2">x <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">map</span>(f, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># do:</span></span>
<span id="cb2-4">x <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">map</span>(\(x) <span class="fu" style="color: #4758AB;">f</span>(x, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">","</span>))</span></code></pre></div>
</div>
<p>This makes it easier to understand which arguments belong to which function and will tend to yield better error messages.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here’s an example of using imap() with a simple list of integers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># create a list of integers</span></span>
<span id="cb3-4">my_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># define a function to apply to each element of the list</span></span>
<span id="cb3-7">my_function <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, i) {</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"The element at index"</span>, i, <span class="st" style="color: #20794D;">"is"</span>, x)</span>
<span id="cb3-9">}</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;"># apply the function to each element of the list using imap()</span></span>
<span id="cb3-12">result <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">imap</span>(my_list, my_function)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;"># print the result</span></span>
<span id="cb3-15"><span class="fu" style="color: #4758AB;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] "The element at index 1 is 1"

[[2]]
[1] "The element at index 2 is 2"

[[3]]
[1] "The element at index 3 is 3"

[[4]]
[1] "The element at index 4 is 4"

[[5]]
[1] "The element at index 5 is 5"</code></pre>
</div>
</div>
<p>In this example, we create a list of integers called my_list. We define a function called my_function that takes two arguments: x, which is the value of each element in the list, and i, which is the index of that element. We then use imap() to apply my_function to each element of my_list, passing both the value and the index of the element as arguments. The result is a new list where each element contains the output of my_function applied to the corresponding element of my_list.</p>
<p>Now let’s take a look at a slightly more complex example. In this case, we will use imap() to iterate over a list of data frames, apply a function to each data frame that subsets the data to include only certain columns, and return a new list of data frames with the subsetted data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># create a list of data frames</span></span>
<span id="cb5-2">my_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"a"</span>, <span class="st" style="color: #20794D;">"b"</span>, <span class="st" style="color: #20794D;">"c"</span>, <span class="st" style="color: #20794D;">"d"</span>, <span class="st" style="color: #20794D;">"e"</span>)),</span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">6</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"f"</span>, <span class="st" style="color: #20794D;">"g"</span>, <span class="st" style="color: #20794D;">"h"</span>, <span class="st" style="color: #20794D;">"i"</span>, <span class="st" style="color: #20794D;">"j"</span>)),</span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">11</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"k"</span>, <span class="st" style="color: #20794D;">"l"</span>, <span class="st" style="color: #20794D;">"m"</span>, <span class="st" style="color: #20794D;">"n"</span>, <span class="st" style="color: #20794D;">"o"</span>))</span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;"># define a function to apply to each element of the list</span></span>
<span id="cb5-9">my_function <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df, i) {</span>
<span id="cb5-10">  <span class="co" style="color: #5E5E5E;"># subset the data to include only the x column</span></span>
<span id="cb5-11">  df_subset <span class="ot" style="color: #003B4F;">&lt;-</span> df[, <span class="st" style="color: #20794D;">"x"</span>, drop <span class="ot" style="color: #003B4F;">=</span> <span class="cn" style="color: #8f5902;">FALSE</span>]</span>
<span id="cb5-12">  <span class="co" style="color: #5E5E5E;"># rename the column to include the index of the element</span></span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;">colnames</span>(df_subset) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"x_"</span>, i, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">""</span>)</span>
<span id="cb5-14">  <span class="co" style="color: #5E5E5E;"># return the subsetted data frame</span></span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;">return</span>(df_subset)</span>
<span id="cb5-16">}</span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;"># apply the function to each element of the list using imap</span></span>
<span id="cb5-19">result <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">imap</span>(my_list, my_function)</span>
<span id="cb5-20"></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;"># print the result</span></span>
<span id="cb5-22"><span class="fu" style="color: #4758AB;">print</span>(result)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
  x_1
1   1
2   2
3   3
4   4
5   5

[[2]]
  x_2
1   6
2   7
3   8
4   9
5  10

[[3]]
  x_3
1  11
2  12
3  13
4  14
5  15</code></pre>
</div>
</div>
<p>In this example, we create a list of three data frames called my_list. We define a function called my_function that takes two arguments: df, which is the value of each element in the list (a data frame), and i, which is the index of that element. The function subsets the data frame to include only the x column, renames the column to include the index of the element, and returns the subsetted data frame.</p>
<p>We use imap() to apply my_function to each element of my_list, passing both the data frame and the index of the element as arguments. The result is a new list of data frames, where each data frame contains only the x column from the original data frame, with a new name that includes the index of the element.</p>
<p>As you can see, the output is a list of three data frames, each containing only the x column from the corresponding original data frame, with a new name that includes the index of the element.</p>
<p>In summary, the imap() function from the R library purrr is a useful tool for iterating over a list or a vector while also keeping track of the index or names of the elements. The function takes a list or a vector as its first argument, and a function as its second argument, which takes two arguments: the value of each element, and the index or name of that element. The function returns a new list or vector with the results of applying the function to each element of the original list or vector. This function is particularly useful for complex data structures, where the index or name of each element is important for further data analysis or processing.</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>purrr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-06/index.html</guid>
  <pubDate>Mon, 06 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Simple examples of pmap() from {purrr}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The pmap() function in R is part of the purrr library, which is a package designed to make it easier to work with functions that operate on vectors, lists, and other types of data structures.</p>
<p>The pmap() function is used to apply a function to a list of arguments, where each element in the list contains the arguments for a single function call. The function is applied in parallel, meaning that each call is executed concurrently, which can help speed up computations when working with large datasets.</p>
<p>Here is the basic syntax of the pmap() function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">pmap</span>(.l, .f, ...)</span></code></pre></div>
</div>
<p>where:</p>
<ul>
<li><code>.l</code> - is a list of arguments, where each element of the list contains the arguments for a single function call.</li>
<li><code>.f</code> - is the function to apply to the arguments in .l.</li>
<li><code>...</code> - is used to pass additional arguments to .f.</li>
</ul>
<p>The <code>pmap()</code> function returns a list, where each element of the list contains the output of a single function call.</p>
<p>Let’s define a function for an example.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">my_function <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(a, b, c) {</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;"># do something with a, b, and c</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">return</span>(a <span class="sc" style="color: #5E5E5E;">+</span> b <span class="sc" style="color: #5E5E5E;">+</span> c)</span>
<span id="cb2-4">}</span></code></pre></div>
</div>
<p>A very simple function that just adds up the elements passed.</p>
<p>Now let’s go over a couple simple examples.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># create a list of vectors with your arguments</span></span>
<span id="cb3-6">my_args <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>)</span>
<span id="cb3-10">)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># apply your function to each combination of arguments in parallel</span></span>
<span id="cb3-13">results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pmap</span>(my_args, my_function)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;"># print the results</span></span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 12

[[2]]
[1] 15

[[3]]
[1] 18</code></pre>
</div>
</div>
<p>Now lets see a couple more examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">argsl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>), <span class="co" style="color: #5E5E5E;"># this is .n</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>),            <span class="co" style="color: #5E5E5E;"># this is .mean</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>),            <span class="co" style="color: #5E5E5E;"># this is .sd</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)         <span class="co" style="color: #5E5E5E;"># this is .num_sims</span></span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;">pmap</span>(argsl, tidy_normal)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx        dy     p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1  3.56  -15.0 0.0000353 0.814  3.56 
 2 1              2 -0.433 -14.6 0.0000679 0.457 -0.433
 3 1              3 -1.93  -14.3 0.000125  0.315 -1.93 
 4 1              4  1.68  -14.0 0.000219  0.663  1.68 
 5 1              5  4.18  -13.7 0.000369  0.852  4.18 
 6 1              6  0.805 -13.4 0.000596  0.580  0.805
 7 1              7  7.99  -13.1 0.000922  0.977  7.99 
 8 1              8 -1.61  -12.8 0.00137   0.344 -1.61 
 9 1              9  1.83  -12.5 0.00195   0.676  1.83 
10 1             10  6.66  -12.1 0.00267   0.952  6.66 
# … with 990 more rows

[[2]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx        dy      p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1 -0.335 -9.02 0.0000814 0.328  -0.335
 2 1              2  2.00  -8.82 0.000162  0.630   2.00 
 3 1              3 -0.238 -8.62 0.000304  0.340  -0.238
 4 1              4  1.17  -8.41 0.000544  0.523   1.17 
 5 1              5  1.50  -8.21 0.000921  0.567   1.50 
 6 1              6  4.68  -8.01 0.00148   0.890   4.68 
 7 1              7  4.59  -7.81 0.00227   0.884   4.59 
 8 1              8 -1.18  -7.61 0.00331   0.233  -1.18 
 9 1              9  2.35  -7.40 0.00460   0.673   2.35 
10 1             10 -3.73  -7.20 0.00610   0.0574 -3.73 
# … with 990 more rows

[[3]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx       dy     p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1  4.42  -3.98 0.000118 0.886  4.42 
 2 1              2  2.24  -3.86 0.000211 0.547  2.24 
 3 1              3 -0.207 -3.73 0.000369 0.135 -0.207
 4 1              4  3.32  -3.61 0.000622 0.745  3.32 
 5 1              5  0.999 -3.48 0.00101  0.308  0.999
 6 1              6  4.08  -3.36 0.00160  0.851  4.08 
 7 1              7  5.81  -3.23 0.00244  0.972  5.81 
 8 1              8  6.11  -3.11 0.00362  0.980  6.11 
 9 1              9  2.30  -2.98 0.00518  0.560  2.30 
10 1             10  0.231 -2.86 0.00718  0.188  0.231
# … with 990 more rows

[[4]]
# A tibble: 1,000 × 7
   sim_number     x     y      dx       dy       p     q
   &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 1              1 3.41  -0.635  0.000128 0.658   3.41 
 2 1              2 0.415 -0.557  0.000243 0.00487 0.415
 3 1              3 3.24  -0.479  0.000440 0.593   3.24 
 4 1              4 3.73  -0.401  0.000758 0.768   3.73 
 5 1              5 4.22  -0.324  0.00124  0.889   4.22 
 6 1              6 3.70  -0.246  0.00193  0.757   3.70 
 7 1              7 4.35  -0.168  0.00288  0.911   4.35 
 8 1              8 1.50  -0.0899 0.00408  0.0672  1.50 
 9 1              9 2.58  -0.0120 0.00551  0.336   2.58 
10 1             10 3.41   0.0658 0.00713  0.661   3.41 
# … with 990 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">pmap</span>(argsl, tidy_normal) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">map</span>(tidy_autoplot)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[4]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-4.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>purrr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index.html</guid>
  <pubDate>Fri, 03 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Forecasting Timeseries in a list with R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this article, we will discuss how to perform an ARIMA forecast on nested data or data that is in a list using R programming language. This is a common scenario in which we have data stored in a list format, where each element of the list corresponds to a different time series. We will use the R programming language, specifically the “forecast” package, to perform the ARIMA forecast.</p>
<p>First, we will need to load the required packages and data. For this example, we will use the “AirPassengers” dataset which is included in the “datasets” package. This dataset contains the number of international airline passengers per month from 1949 to 1960. We will then create a list containing subsets of this data for each year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-2"></span>
<span id="cb1-3">yearly_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">split</span>(AirPassengers, <span class="at" style="color: #657422;">f =</span> <span class="fu" style="color: #4758AB;">ceiling</span>(<span class="fu" style="color: #4758AB;">seq_along</span>(AirPassengers)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb1-4"></span>
<span id="cb1-5">yearly_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
 [1] 112 118 132 129 121 135 148 148 136 119 104 118

$`2`
 [1] 115 126 141 135 125 149 170 170 158 133 114 140

$`3`
 [1] 145 150 178 163 172 178 199 199 184 162 146 166

$`4`
 [1] 171 180 193 181 183 218 230 242 209 191 172 194

$`5`
 [1] 196 196 236 235 229 243 264 272 237 211 180 201

$`6`
 [1] 204 188 235 227 234 264 302 293 259 229 203 229

$`7`
 [1] 242 233 267 269 270 315 364 347 312 274 237 278

$`8`
 [1] 284 277 317 313 318 374 413 405 355 306 271 306

$`9`
 [1] 315 301 356 348 355 422 465 467 404 347 305 336

$`10`
 [1] 340 318 362 348 363 435 491 505 404 359 310 337

$`11`
 [1] 360 342 406 396 420 472 548 559 463 407 362 405

$`12`
 [1] 417 391 419 461 472 535 622 606 508 461 390 432</code></pre>
</div>
</div>
<p>In the above code, we use the “split” function to split the data into yearly subsets. The “f” parameter is used to specify the grouping variable which, in this case, is the sequence of numbers from 1 to the length of the dataset divided by 12, rounded up to the nearest integer. This creates a list of 12 elements, one for each year.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Next, we will define a function that takes a single element of the list, fits an ARIMA model, and generates a forecast.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">arima_forecast <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x){</span>
<span id="cb3-2">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(x)</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb3-4">}</span></code></pre></div>
</div>
<p>This function takes a single argument “x” which is one of the elements of the list. We use the “auto.arima” function from the “forecast” package to fit an ARIMA model to the data. The “forecast” function is then used to generate a forecast based on this model.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>We can now use the “lapply” function to apply this function to each element of the list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">forecasts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(yearly_data, arima_forecast)</span></code></pre></div>
</div>
<p>The “lapply” function applies the “arima_forecast” function to each element of the “yearly_data” list and returns a list of forecasts.</p>
<p>Finally, we can extract and plot the forecasts for a specific year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">plot</span>(forecasts[[<span class="dv" style="color: #AD0000;">5</span>]])</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now lets take a look at them all.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb6-2"></span>
<span id="cb6-3">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map</span>(forecasts, plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-4.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-5.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-6.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
$`1`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 132.2237 126.4744 126.4744 126.4744 126.4744 126.4744 126.4744 126.4744
 [9] 126.4744 126.4744

$`1`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 120.1608 113.7751
14 110.0828 101.4056
15 110.0828 101.4056
16 110.0828 101.4056
17 110.0828 101.4056
18 110.0828 101.4056
19 110.0828 101.4056
20 110.0828 101.4056
21 110.0828 101.4056
22 110.0828 101.4056

$`1`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 144.2865 150.6722
14 142.8660 151.5432
15 142.8660 151.5432
16 142.8660 151.5432
17 142.8660 151.5432
18 142.8660 151.5432
19 142.8660 151.5432
20 142.8660 151.5432
21 142.8660 151.5432
22 142.8660 151.5432


$`2`
$`2`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 153.8708 139.5919 139.5919 139.5919 139.5919 139.5919 139.5919 139.5919
 [9] 139.5919 139.5919

$`2`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 136.3778 127.1175
14 115.8789 103.3260
15 115.8789 103.3260
16 115.8789 103.3260
17 115.8789 103.3260
18 115.8789 103.3260
19 115.8789 103.3260
20 115.8789 103.3260
21 115.8789 103.3260
22 115.8789 103.3260

$`2`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 171.3638 180.6240
14 163.3048 175.8577
15 163.3048 175.8577
16 163.3048 175.8577
17 163.3048 175.8577
18 163.3048 175.8577
19 163.3048 175.8577
20 163.3048 175.8577
21 163.3048 175.8577
22 163.3048 175.8577


$`3`
$`3`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 173.6413 170.0479 170.0479 170.0479 170.0479 170.0479 170.0479 170.0479
 [9] 170.0479 170.0479

$`3`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 153.5404 142.8995
14 146.6452 134.2565
15 146.6452 134.2565
16 146.6452 134.2565
17 146.6452 134.2565
18 146.6452 134.2565
19 146.6452 134.2565
20 146.6452 134.2565
21 146.6452 134.2565
22 146.6452 134.2565

$`3`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 193.7423 204.3831
14 193.4506 205.8393
15 193.4506 205.8393
16 193.4506 205.8393
17 193.4506 205.8393
18 193.4506 205.8393
19 193.4506 205.8393
20 193.4506 205.8393
21 193.4506 205.8393
22 193.4506 205.8393


$`4`
$`4`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 194.0074 194.0119 194.0147 194.0164 194.0174 194.0180 194.0184 194.0186
 [9] 194.0187 194.0188

$`4`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 169.7973 156.9812
14 165.6741 150.6730
15 164.2944 148.5614
16 163.8005 147.8051
17 163.6201 147.5288
18 163.5539 147.4272
19 163.5296 147.3898
20 163.5207 147.3761
21 163.5175 147.3711
22 163.5163 147.3692

$`4`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 218.2176 231.0336
14 222.3497 237.3509
15 223.7350 239.4680
16 224.2322 240.2276
17 224.4146 240.5059
18 224.4821 240.6088
19 224.5071 240.6469
20 224.5165 240.6611
21 224.5200 240.6664
22 224.5213 240.6684


$`5`
$`5`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 206.8929 210.7977 213.3851 215.0996 216.2356 216.9884 217.4872 217.8178
 [9] 218.0368 218.1819

$`5`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 178.2600 163.1026
14 176.4492 158.2662
15 176.8082 157.4455
16 177.5860 157.7275
17 178.3181 158.2458
18 178.8949 158.7294
19 179.3167 159.1104
20 179.6134 159.3893
21 179.8176 159.5856
22 179.9562 159.7208

$`5`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 235.5258 250.6831
14 245.1461 263.3291
15 249.9620 269.3246
16 252.6131 272.4716
17 254.1531 274.2255
18 255.0819 275.2475
19 255.6578 275.8641
20 256.0221 276.2462
21 256.2559 276.4879
22 256.4076 276.6430


$`6`
$`6`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 245.0709 240.0400 240.0400 240.0400 240.0400 240.0400 240.0400 240.0400
 [9] 240.0400 240.0400

$`6`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 212.6687 195.5160
14 196.9893 174.1996
15 196.9893 174.1996
16 196.9893 174.1996
17 196.9893 174.1996
18 196.9893 174.1996
19 196.9893 174.1996
20 196.9893 174.1996
21 196.9893 174.1996
22 196.9893 174.1996

$`6`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 277.4731 294.6259
14 283.0907 305.8803
15 283.0907 305.8803
16 283.0907 305.8803
17 283.0907 305.8803
18 283.0907 305.8803
19 283.0907 305.8803
20 283.0907 305.8803
21 283.0907 305.8803
22 283.0907 305.8803


$`7`
$`7`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 278.0001 278.0001 278.0002 278.0002 278.0002 278.0002 278.0002 278.0002
 [9] 278.0002 278.0002

$`7`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 236.8903 215.1282
14 228.5879 202.4307
15 225.3145 197.4243
16 223.9224 195.2953
17 223.3147 194.3659
18 223.0466 193.9559
19 222.9278 193.7742
20 222.8751 193.6936
21 222.8516 193.6577
22 222.8412 193.6418

$`7`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 319.1098 340.8720
14 327.4123 353.5695
15 330.6859 358.5760
16 332.0780 360.7051
17 332.6857 361.6345
18 332.9538 362.0445
19 333.0726 362.2262
20 333.1254 362.3069
21 333.1488 362.3427
22 333.1592 362.3587


$`8`
$`8`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 349.0540 373.2678 369.7906 348.0549 325.4487 315.1915 319.8599 332.7645
 [9] 344.2812 348.1670

$`8`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 315.6225 297.9249
14 322.1404 295.0752
15 314.7795 285.6584
16 292.8344 263.6024
17 266.5768 235.4118
18 252.9822 220.0505
19 257.0954 223.8699
20 269.7958 236.4622
21 280.1875 246.2583
22 283.2781 248.9280

$`8`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 382.4855 400.1831
14 424.3952 451.4604
15 424.8018 453.9229
16 403.2754 432.5074
17 384.3206 415.4855
18 377.4009 410.3325
19 382.6243 415.8498
20 395.7332 429.0668
21 408.3750 442.3042
22 413.0559 447.4061


$`9`
$`9`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 378.9729 406.5723 408.7509 392.6048 372.9147 361.5778 362.0569 370.2398
 [9] 379.1516 383.6927

$`9`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 336.2126 313.5766
14 342.0963 307.9648
15 339.3660 302.6358
16 323.1265 286.3469
17 300.2319 261.7560
18 285.7363 245.5882
19 285.5516 245.0521
20 293.6654 253.1294
21 301.8675 260.9558
22 305.8147 264.5885

$`9`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 421.7333 444.3692
14 471.0482 505.1797
15 478.1359 514.8660
16 462.0831 498.8627
17 445.5975 484.0734
18 437.4193 477.5674
19 438.5622 479.0617
20 446.8142 487.3503
21 456.4356 497.3473
22 461.5707 502.7968


$`10`
$`10`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 391.9249 381.5489 381.5489 381.5489 381.5489 381.5489 381.5489 381.5489
 [9] 381.5489 381.5489

$`10`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 331.8921 300.1126
14 304.6704 263.9734
15 304.6704 263.9734
16 304.6704 263.9734
17 304.6704 263.9734
18 304.6704 263.9734
19 304.6704 263.9734
20 304.6704 263.9734
21 304.6704 263.9734
22 304.6704 263.9734

$`10`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 451.9577 483.7372
14 458.4274 499.1244
15 458.4274 499.1244
16 458.4274 499.1244
17 458.4274 499.1244
18 458.4274 499.1244
19 458.4274 499.1244
20 458.4274 499.1244
21 458.4274 499.1244
22 458.4274 499.1244


$`11`
$`11`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 408.4203 410.7762 412.3990 413.5168 414.2868 414.8171 415.1824 415.4340
 [9] 415.6074 415.7268

$`11`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 342.2241 307.1820
14 330.3960 287.8452
15 326.1006 280.4170
16 324.5481 277.4509
17 324.0788 276.3255
18 324.0270 275.9656
19 324.1175 275.9106
20 324.2390 275.9632
21 324.3506 276.0422
22 324.4407 276.1168

$`11`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 474.6165 509.6586
14 491.1565 533.7072
15 498.6974 544.3810
16 502.4855 549.5827
17 504.4948 552.2480
18 505.6072 553.6686
19 506.2474 554.4543
20 506.6291 554.9049
21 506.8641 555.1726
22 507.0128 555.3367


$`12`
$`12`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 502.9998 476.0531 476.0531 476.0531 476.0531 476.0531 476.0531 476.0531
 [9] 476.0531 476.0531

$`12`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 437.2687 402.4728
14 387.1722 340.1214
15 387.1722 340.1214
16 387.1722 340.1214
17 387.1722 340.1214
18 387.1722 340.1214
19 387.1722 340.1214
20 387.1722 340.1214
21 387.1722 340.1214
22 387.1722 340.1214

$`12`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 568.7308 603.5267
14 564.9341 611.9848
15 564.9341 611.9848
16 564.9341 611.9848
17 564.9341 611.9848
18 564.9341 611.9848
19 564.9341 611.9848
20 564.9341 611.9848
21 564.9341 611.9848
22 564.9341 611.9848</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">dev.off</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>null device 
          1 </code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>purrr</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index.html</guid>
  <pubDate>Thu, 02 Mar 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
