<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Thu, 18 May 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>The which() Function in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>As a programmer, one of the most important tasks is to extract valuable insights from data. To make this process efficient, it is crucial to have a reliable tool at your disposal. Enter the <code>which()</code> function in R. This versatile function allows you to locate specific elements within a vector or a data frame, helping you filter and analyze data with ease. In this blog post, we’ll explore the ins and outs of the <code>which()</code> function, discussing its syntax, common use cases, and providing practical examples to solidify your understanding.</p>
</section>
<section id="understanding-the-syntax" class="level1">
<h1>Understanding the Syntax:</h1>
<p>Before diving into real-world examples, let’s grasp the basic syntax of the <code>which()</code> function. The general structure of the function is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">which</span>(logical_vector, <span class="at" style="color: #657422;">arr.ind =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>The <code>logical_vector</code> parameter represents the condition or logical expression you want to evaluate. It can be any expression that returns a logical vector, such as a comparison or logical operation. The optional <code>arr.ind</code> parameter, when set to <code>TRUE</code>, returns the result in array indices instead of a vector, that is to say that the <code>which()</code> function will return a vector of integers that correspond to the positions of the elements in the vector that satisfy the condition.</p>
</section>
<section id="example-1-locating-elements-in-a-numeric-vector" class="level1">
<h1>Example 1: Locating Elements in a Numeric Vector</h1>
<p>Suppose we have a numeric vector called scores, representing test scores of students. We want to find the indices of scores greater than or equal to 90. Here’s how we can accomplish that using the <code>which()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">scores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">92</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">94</span>, <span class="dv" style="color: #AD0000;">79</span>, <span class="dv" style="color: #AD0000;">91</span>, <span class="dv" style="color: #AD0000;">87</span>, <span class="dv" style="color: #AD0000;">98</span>, <span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb2-2">indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(scores <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb2-3">indices</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2  4  6  8 10</code></pre>
</div>
</div>
<p>In this example, the <code>which()</code> function evaluates the logical expression scores &gt;= 90 and returns the indices of the elements satisfying the condition. The resulting indices vector will contain <code>[2, 4, 6, 8, 10]</code>, indicating the positions of the scores that meet the criteria.</p>
</section>
<section id="example-2-filtering-data-frames" class="level1">
<h1>Example 2: Filtering Data Frames</h1>
<p>Data frames are widely used in data analysis. The which() function can be incredibly useful when working with data frames to filter rows based on specific conditions. Consider the following example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Name =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Charlie"</span>, <span class="st" style="color: #20794D;">"Dave"</span>),</span>
<span id="cb4-2">                   <span class="at" style="color: #657422;">Age =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb4-3">                   <span class="at" style="color: #657422;">City =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"New York"</span>, <span class="st" style="color: #20794D;">"London"</span>, <span class="st" style="color: #20794D;">"Paris"</span>, <span class="st" style="color: #20794D;">"Sydney"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5">selected_rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(data<span class="sc" style="color: #5E5E5E;">$</span>Age <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb4-6">filtered_data <span class="ot" style="color: #003B4F;">&lt;-</span> data[selected_rows, ]</span>
<span id="cb4-7">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Name Age   City
2  Bob  32 London
4 Dave  30 Sydney</code></pre>
</div>
</div>
<p>In this case, we use the <code>which()</code> function to find the rows where the Age column is greater than or equal to 30. The selected_rows vector will hold the indices <code>[2, 4]</code>, which we subsequently use to filter the original data frame. The resulting filtered_data will contain the rows corresponding to the selected indices, in this case, rows for Bob and Dave.</p>
</section>
<section id="example-3-using-the-arr.ind-parameter" class="level1">
<h1>Example 3: Using the arr.ind Parameter</h1>
<p>The arr.ind parameter of the which() function comes in handy when working with multi-dimensional arrays. It allows you to obtain the indices as an array instead of a vector. Let’s illustrate this with an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">matrix_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb6-2">selected_indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(matrix_data <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">arr.ind =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb6-3">selected_indices</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     row col
[1,]   3   1
[2,]   3   2
[3,]   3   3
[4,]   3   4</code></pre>
</div>
</div>
<p>In this example, we create a matrix called <code>matrix_data</code> and use the <code>which()</code> function to find the indices where the matrix elements are divisible by 3. By setting <code>arr.ind = TRUE</code>, we obtain a matrix of indices, where each row represents the position of an element satisfying the condition.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion:</h1>
<p>The <code>which()</code> function in R proves to be an invaluable tool for data exploration and filtering. By allowing you to locate specific elements in vectors or data frames, it simplifies the process of extracting relevant information from your data. Throughout this blog post, we explored the syntax and various practical examples of using the <code>which()</code> function. Armed with this knowledge, you can now confidently apply the <code>which()</code> function to your own data analysis tasks in R, boosting your productivity and uncovering hidden insights with ease.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>which</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-18/index.html</guid>
  <pubDate>Thu, 18 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-17/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Formatting dates is an essential task in data analysis and programming. In R, there are various ways to manipulate and present dates according to specific requirements. In this blog post, we will explore the world of date formatting in R, uncovering the power of the <code>strftime()</code> function. We will walk through practical examples using the provided code snippet, demonstrating how to format dates in a clear and concise manner. So, let’s dive in and uncover the secrets of date formatting in R!</p>
<p>#Understanding the strftime() Function:</p>
<p>In R, the <code>strftime()</code> function allows us to format dates and times based on a set of predefined modifiers. These modifiers act as placeholders for different components of the date and time. By using these modifiers, we can customize the output format to suit our needs.</p>
<p>Let’s analyze the code snippet provided to gain a better understanding of the <code>strftime()</code> function and its capabilities.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># all of the modifiers</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;">for</span> (formatter <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">c</span>(letters, LETTERS))) {</span>
<span id="cb1-3">  modifier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%"</span>, formatter)</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">print</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb1-6">      modifier, </span>
<span id="cb1-7">      <span class="st" style="color: #20794D;">" used on: "</span>,</span>
<span id="cb1-8">      RightNow,</span>
<span id="cb1-9">      <span class="st" style="color: #20794D;">" will give: "</span>,</span>
<span id="cb1-10">      <span class="fu" style="color: #4758AB;">strftime</span>(RightNow, modifier)</span>
<span id="cb1-11">    )</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">}</span></code></pre></div>
</div>
<p>The code snippet above iterates through a set of modifiers, both lowercase and uppercase letters, and applies each modifier to the <code>RightNow</code> variable. It then prints the modifier, the original <code>RightNow</code> value, and the formatted output. This allows us to see the effect of each modifier on the date and time representation.</p>
</section>
<section id="modifier-showcase" class="level1">
<h1>Modifier Showcase:</h1>
<p>Let’s explore some commonly used modifiers and their corresponding output formats:</p>
<pre><code>%a - Abbreviated weekday name (e.g., "Mon").
%A - Full weekday name (e.g., "Monday").
%b - Abbreviated month name (e.g., "Jan").
%B - Full month name (e.g., "January").
%d - Day of the month (01-31).
%H - Hour in 24-hour format (00-23).
%I - Hour in 12-hour format (01-12).
%m - Month (01-12).
%M - Minute (00-59).
%p - AM/PM indicator.
%S - Second (00-59).
%Y - Year with century (e.g., "2023").
%y - Year without century (e.g., "23").</code></pre>
<p>Feel free to experiment with different modifiers and observe the changes in the output format.</p>
<p>Here is a full example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">RightNow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># all of the modifiers</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;">for</span> (formatter <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">c</span>(letters, LETTERS))) {</span>
<span id="cb3-5">  modifier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%"</span>, formatter)</span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">print</span>(</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb3-8">      modifier, </span>
<span id="cb3-9">      <span class="st" style="color: #20794D;">" used on: "</span>,</span>
<span id="cb3-10">      RightNow,</span>
<span id="cb3-11">      <span class="st" style="color: #20794D;">" will give: "</span>,</span>
<span id="cb3-12">      <span class="fu" style="color: #4758AB;">strftime</span>(RightNow, modifier)</span>
<span id="cb3-13">    )</span>
<span id="cb3-14">  )</span>
<span id="cb3-15">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "%a used on: 2023-05-17 09:34:47 will give: Wed"
[1] "%A used on: 2023-05-17 09:34:47 will give: Wednesday"
[1] "%b used on: 2023-05-17 09:34:47 will give: May"
[1] "%B used on: 2023-05-17 09:34:47 will give: May"
[1] "%c used on: 2023-05-17 09:34:47 will give: Wed May 17 09:34:47 2023"
[1] "%C used on: 2023-05-17 09:34:47 will give: 20"
[1] "%d used on: 2023-05-17 09:34:47 will give: 17"
[1] "%D used on: 2023-05-17 09:34:47 will give: 05/17/23"
[1] "%e used on: 2023-05-17 09:34:47 will give: 17"
[1] "%E used on: 2023-05-17 09:34:47 will give: E"
[1] "%f used on: 2023-05-17 09:34:47 will give: f"
[1] "%F used on: 2023-05-17 09:34:47 will give: 2023-05-17"
[1] "%g used on: 2023-05-17 09:34:47 will give: 23"
[1] "%G used on: 2023-05-17 09:34:47 will give: 2023"
[1] "%h used on: 2023-05-17 09:34:47 will give: May"
[1] "%H used on: 2023-05-17 09:34:47 will give: 09"
[1] "%i used on: 2023-05-17 09:34:47 will give: i"
[1] "%I used on: 2023-05-17 09:34:47 will give: 09"
[1] "%j used on: 2023-05-17 09:34:47 will give: 137"
[1] "%J used on: 2023-05-17 09:34:47 will give: J"
[1] "%k used on: 2023-05-17 09:34:47 will give:  9"
[1] "%K used on: 2023-05-17 09:34:47 will give: K"
[1] "%l used on: 2023-05-17 09:34:47 will give:  9"
[1] "%L used on: 2023-05-17 09:34:47 will give: L"
[1] "%m used on: 2023-05-17 09:34:47 will give: 05"
[1] "%M used on: 2023-05-17 09:34:47 will give: 34"
[1] "%n used on: 2023-05-17 09:34:47 will give: \n"
[1] "%N used on: 2023-05-17 09:34:47 will give: N"
[1] "%o used on: 2023-05-17 09:34:47 will give: o"
[1] "%O used on: 2023-05-17 09:34:47 will give: O"
[1] "%p used on: 2023-05-17 09:34:47 will give: AM"
[1] "%P used on: 2023-05-17 09:34:47 will give: am"
[1] "%q used on: 2023-05-17 09:34:47 will give: q"
[1] "%Q used on: 2023-05-17 09:34:47 will give: Q"
[1] "%r used on: 2023-05-17 09:34:47 will give: 09:34:47 AM"
[1] "%R used on: 2023-05-17 09:34:47 will give: 09:34"
[1] "%s used on: 2023-05-17 09:34:47 will give: 1684330487"
[1] "%S used on: 2023-05-17 09:34:47 will give: 47"
[1] "%t used on: 2023-05-17 09:34:47 will give: \t"
[1] "%T used on: 2023-05-17 09:34:47 will give: 09:34:47"
[1] "%u used on: 2023-05-17 09:34:47 will give: 3"
[1] "%U used on: 2023-05-17 09:34:47 will give: 20"
[1] "%v used on: 2023-05-17 09:34:47 will give: 17-May-2023"
[1] "%V used on: 2023-05-17 09:34:47 will give: 20"
[1] "%w used on: 2023-05-17 09:34:47 will give: 3"
[1] "%W used on: 2023-05-17 09:34:47 will give: 20"
[1] "%x used on: 2023-05-17 09:34:47 will give: 5/17/2023"
[1] "%X used on: 2023-05-17 09:34:47 will give: 9:34:47 AM"
[1] "%y used on: 2023-05-17 09:34:47 will give: 23"
[1] "%Y used on: 2023-05-17 09:34:47 will give: 2023"
[1] "%z used on: 2023-05-17 09:34:47 will give: -0400"
[1] "%Z used on: 2023-05-17 09:34:47 will give: EDT"</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we explored the <code>strftime()</code> function in R, which provides powerful capabilities for formatting dates. By using the various modifiers available, we can easily customize the representation of dates and times to meet our specific requirements. Understanding date formatting is crucial for effective data analysis, visualization, and reporting.</p>
<p>Remember to refer to the R documentation for <code>strftime()</code> to discover additional modifiers and advanced formatting options. With the knowledge gained from this blog post, you are now equipped to master date formatting in R and handle dates with confidence in your programming endeavors.</p>
<p>Happy coding with R and may your dates always be formatted to perfection!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-17/index.html</guid>
  <pubDate>Wed, 17 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Dates and times are essential components in many programming tasks, and R provides various functions and packages to handle them effectively. In this post, we’ll explore some common operations using both the base R functions and the lubridate package, comparing their simplicity and ease of understanding.</p>
<p>Let’s dive right in!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># What class does as.Date() produce?</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># be sure lubridate </span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># install.packages("lubridate")</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Which do you find easier to understand? base or lubridate?</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">today</span>() <span class="co" style="color: #5E5E5E;"># today() = Sys.Date()</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-05-16"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">now</span>() <span class="co" style="color: #5E5E5E;"># now() = Sys.time()</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-05-16 08:27:52 EDT"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># as_date and as.Date produce the same class</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as_date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>)) <span class="co" style="color: #5E5E5E;"># lubridate</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>)) <span class="co" style="color: #5E5E5E;"># base</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># simpler strptime</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">strptime</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>, <span class="st" style="color: #20794D;">"%Y-%m-%d %H:%M:%S %z"</span>) <span class="co" style="color: #5E5E5E;"># time zone is messed up</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 15:00:00"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">parse_date_time</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>, <span class="st" style="color: #20794D;">"ymd HMS z"</span>) <span class="co" style="color: #5E5E5E;"># time zone works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 19:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># lubridate takes it one step further</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">ymd_hms</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 19:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">mdy_hm</span>(<span class="st" style="color: #20794D;">"July 13, 2014 4:00 pm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 16:00:00 UTC"</code></pre>
</div>
</div>
<p>1️⃣ Determining the Class of a Date: The first line of code checks the class produced by the <code>as.Date()</code> function when given the input “1881/10/25.” By using the <code>class()</code> function, we can identify that the output is of class “Date.” This means that the <code>as.Date()</code> function converts the input into a date format.</p>
<p>2️⃣ Base R vs.&nbsp;lubridate: Before we proceed further, we need to ensure that the lubridate package is installed. If not, the code installs it using the <code>install.packages()</code> function. We then load the package using the <code>library()</code> function.</p>
<p>Next, we compare the ease of use between base R and lubridate for working with dates and times.</p>
<ol type="a">
<li><p>Today’s Date and Current Time: The <code>today()</code> function, equivalent to <code>Sys.Date()</code>, gives you the current date. Similarly, <code>now()</code> returns the current date and time using <code>Sys.time()</code>. These functions make it straightforward to obtain the current date or date and time in R.</p></li>
<li><p>Class Comparison: We compare the classes of dates produced by <code>as_date()</code> from lubridate and <code>as.Date()</code> from base R. Using the <code>class()</code> function on each result, we observe that both functions produce the same “Date” class output. Hence, both methods are equivalent in this regard.</p></li>
</ol>
<p>3️⃣ Simplifying Date and Time Parsing: Parsing date and time strings can sometimes be tricky, especially when dealing with time zones. However, lubridate provides simplified functions to handle such scenarios.</p>
<ol type="a">
<li><p>Base R’s <code>strptime()</code>: The <code>strptime()</code> function is a base R function that parses a date and time string based on a given format. In this case, we try to parse “2014-07-13 16:00:00 -0300” with the format “%Y-%m-%d %H:%M:%S %z.” However, we encounter a problem with the time zone, as it does not parse correctly.</p></li>
<li><p>lubridate’s <code>parse_date_time()</code>: To overcome the time zone issue, lubridate offers the <code>parse_date_time()</code> function. We provide the same date and time string along with the format “ymd HMS z.” This time, the time zone is parsed correctly, resulting in a valid date and time object.</p></li>
</ol>
<p>4️⃣ Going the Extra Mile with lubridate: lubridate takes date and time manipulation a step further with its intuitive functions.</p>
<ol type="a">
<li><p><code>ymd()</code>: The <code>ymd()</code> function converts a character string of the form “2014-07-13 16:00:00 -0300” into a date object. It handles various date formats and automatically infers the year, month, and day information.</p></li>
<li><p><code>ymd_hms()</code>: Similar to <code>ymd()</code>, the <code>ymd_hms()</code> function converts a character string into a date-time object, considering the year, month, day, hour, minute, and second components.</p></li>
<li><p><code>mdy_hm()</code>: The <code>mdy_hm()</code> function allows us to parse a character string like “July 13, 2014 4:00 pm” into</p></li>
</ol>
<p>a date-time object. It handles different date formats and automatically extracts the month, day, year, hour, and minute information.</p>
<p>By leveraging these functions, lubridate simplifies the process of working with dates and times, offering a more intuitive and concise syntax compared to base R.</p>
<p>In conclusion, understanding how to handle dates and times in R is crucial for many programming tasks. While base R provides essential functions, the lubridate package offers additional capabilities and a more straightforward syntax, making it an attractive choice for working with dates and times in R.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-16/index.html</guid>
  <pubDate>Tue, 16 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 2: Finding the Next Mothers Day with Simplicity</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-15/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Mother’s Day is a special occasion to honor and appreciate the incredible women in our lives. As programmers, we can use our coding skills to make our lives easier when it comes to important dates like Mother’s Day. In this blog post, we’ll walk through a simple and engaging R code that helps us find the next Mother’s Day. So grab your coding hats, and let’s get started!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># if you aren't using times, use the Date class; it's simpler</span></span>
<span id="cb1-2">NextMothersDay <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-14"</span>, </span>
<span id="cb1-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-14"</span></span>
<span id="cb1-6">    )</span>
<span id="cb1-7">  )</span>
<span id="cb1-8"></span>
<span id="cb1-9">NextMothersDay</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>startMothersDay   endMothersDay 
   "2024-05-14"    "2024-05-14" </code></pre>
</div>
</div>
<p>In the first part of our code, we use the <code>as.Date()</code> function to find the next Mother’s Day. Since we don’t need to consider specific times, we can simply use the Date class, which simplifies the process. We create a vector with two elements: <code>startMothersDay</code> and <code>endMothersDay</code>, both set to “2024-05-14”. This represents the range of Mother’s Day for the year 2024. Finally, we store the result in the variable <code>NextMothersDay</code> and print it to the console. Voilà! We have the next Mother’s Day date.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># if you have times, then use POSIX.</span></span>
<span id="cb3-2">NextMothersDay_ct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-15 10:00"</span>, <span class="co" style="color: #5E5E5E;"># Let Mommy Sleep!</span></span>
<span id="cb3-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-15 23:59"</span></span>
<span id="cb3-6">    ),</span>
<span id="cb3-7">  <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"GMT"</span></span>
<span id="cb3-8">  )</span>
<span id="cb3-9"></span>
<span id="cb3-10">NextMothersDay_ct</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          startMothersDay             endMothersDay 
"2024-05-15 10:00:00 GMT" "2024-05-15 23:59:00 GMT" </code></pre>
</div>
</div>
<p>Now, let’s say we want to consider specific times for Mother’s Day celebrations. We can use the <code>as.POSIXct()</code> function to handle dates and times together. We create another vector with two elements: <code>startMothersDay</code> and <code>endMothersDay</code>, but this time with specific times. The start time is set to “2024-05-15 10:00” (because let’s let Mommy sleep in!) and the end time is set to “2024-05-15 23:59”. We also specify the time zone as “GMT” using the tz argument. The result is stored in the variable <code>NextMothersDay_ct</code>, and when we print it, we get the range of Mother’s Day with times included.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># converting from one POSIX to another is easy</span></span>
<span id="cb5-2">NextMothersDay_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(NextMothersDay_ct)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">unclass</span>(NextMothersDay_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 0 0

$min
[1]  0 59

$hour
[1] 10 23

$mday
[1] 15 15

$mon
[1] 4 4

$year
startMothersDay   endMothersDay 
            124             124 

$wday
[1] 3 3

$yday
[1] 135 135

$isdst
[1] 0 0

attr(,"tzone")
[1] "GMT"</code></pre>
</div>
</div>
<p>Now, let’s explore how to convert a <code>POSIXct</code> object to a <code>POSIXlt</code> object. We use the <code>as.POSIXlt()</code> function to convert <code>NextMothersDay_ct</code> into a <code>POSIXlt</code> object. This conversion allows us to access more detailed components of the date and time, such as the day of the week, hour, minute, and second. Finally, we use the <code>unclass()</code> function to remove the class attributes from the object and print the result to the console.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With just a few lines of code, we have learned how to find the next Mother’s Day using R. Whether you need a simple date or a specific time range, R provides us with convenient functions to handle both scenarios. So the next time you want to plan a special surprise for your mom, you can rely on your coding skills to</p>
</section>
<section id="full-script" class="level1">
<h1>Full Script</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># if you aren't using times, use the Date class it's simpler</span></span>
<span id="cb7-2">NextMothersDay <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(</span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-14"</span>, </span>
<span id="cb7-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-14"</span></span>
<span id="cb7-6">    )</span>
<span id="cb7-7">  )</span>
<span id="cb7-8"></span>
<span id="cb7-9">NextMothersDay</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;"># if you have times, then use POSIX.</span></span>
<span id="cb7-12">NextMothersDay_ct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(</span>
<span id="cb7-13">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-14">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-15 10:00"</span>, <span class="co" style="color: #5E5E5E;"># Let Mommy Sleep!</span></span>
<span id="cb7-15">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-15 23:59"</span></span>
<span id="cb7-16">    ),</span>
<span id="cb7-17">  <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"GMT"</span></span>
<span id="cb7-18">  )</span>
<span id="cb7-19"></span>
<span id="cb7-20">NextMothersDay_ct</span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;"># converting from one POSIX to another is easy</span></span>
<span id="cb7-23">NextMothersDay_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(NextMothersDay_ct)</span>
<span id="cb7-24"><span class="fu" style="color: #4758AB;">unclass</span>(NextMothersDay_lt)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-15/index.html</guid>
  <pubDate>Mon, 15 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 1</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-12/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we will cover the basics of handling dates and times in R using the <code>as.Date</code>, <code>as.POSIXct</code>, and <code>as.POSIXlt</code> functions. We will use the example code below to explain each line in simple terms. Let’s get started!</p>
<p>Here is the script we are going to look at:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># the date object</span></span>
<span id="cb1-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1981-02-25"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">str</span>(Steve_online) <span class="co" style="color: #5E5E5E;">#Date[1:1], format: "1981-02-25</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Date[1:1], format: "1981-02-25"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">class</span>(Steve_online) <span class="co" style="color: #5E5E5E;">#Date</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">as.numeric</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># stored as number of days since 1970-01-01</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4073</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1970-01-01"</span>)) <span class="co" style="color: #5E5E5E;"># equals zero</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">as.Date</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1970-01-01"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4073</span>) <span class="co" style="color: #5E5E5E;"># produces 1981-02-25 -- our original date</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1981-02-25"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># vectors can contain multiple dates</span></span>
<span id="cb11-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1981-02-25"</span>, <span class="st" style="color: #20794D;">"1997-01-12"</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">str</span>(Steve_online)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Date[1:2], format: "1981-02-25" "1997-01-12"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">Steve_online[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1997-01-12"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># what about POSIX?</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># POSIXct stores date time as integer == # seconds since 1970-01-01 UTC</span></span>
<span id="cb15-3">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(<span class="st" style="color: #20794D;">"1981-02-25 02:25:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"US/Mountain"</span>)</span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Steve_online</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 351941100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># POSIXlt stores date time as list:sec, min, hour, mday, mon, year, wday, yday, isdst, zone, gmtoff</span></span>
<span id="cb17-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(<span class="st" style="color: #20794D;">"1981-02-25 02:25:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"US/Mountain"</span>)</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;">as.integer</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># no longer an integer</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  0 25  2 25  1 81  3 55  0 NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">unclass</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># this shows the components of the list</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 0

$min
[1] 25

$hour
[1] 2

$mday
[1] 25

$mon
[1] 1

$year
[1] 81

$wday
[1] 3

$yday
[1] 55

$isdst
[1] 0

$zone
[1] "MST"

$gmtoff
[1] NA

attr(,"tzone")
[1] "US/Mountain"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">month.name[Steve_online<span class="sc" style="color: #5E5E5E;">$</span>mon <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="co" style="color: #5E5E5E;"># equals February</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "February"</code></pre>
</div>
</div>
<p>The first line of code creates a date object called <code>Steve_online</code> with the value of February 25, 1981, using the <code>as.Date</code> function. This function is used to convert a character string to a date object. The <code>str</code> function is then used to show the structure of the <code>Steve_online</code> object, which is of class Date.</p>
<p>The <code>as.numeric</code> function is used to convert the <code>Steve_online</code> object to the number of days since January 1, 1970 (known as the Unix epoch). This is a common way of representing dates in programming languages, and is useful for calculations involving dates. We also demonstrate that <code>as.numeric(as.Date("1970-01-01"))</code> returns zero, since this is the starting point of the Unix epoch.</p>
<p>We then show how to add or subtract days from a date object by adding or subtracting the desired number of days (as an integer) to the as.Date function with the reference date of January 1, 1970. In this case, we add 4073 days to January 1, 1970, resulting in the date of February 25, 1981 (our original date).</p>
<p>Next, we demonstrate how to create a vector of date objects by passing a character vector of dates to the as.Date function. The <code>str</code> function is used again to show the structure of the <code>Steve_online</code> object, which is now a vector of two date objects. We then show how to access the second element of the vector using indexing (<code>Steve_online[2]</code>).</p>
<p>Moving on to POSIX objects, we introduce the <code>as.POSIXct</code> function, which creates a POSIXct object that stores date time as an integer equal to the number of seconds since January 1,</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-12/index.html</guid>
  <pubDate>Fri, 12 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>VBA to R and Back Again: Running R from VBA Pt 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I posted on using VBA to execute R code that is written inside of the VBA script. So today, I will go over a simple example on executing an R script from VBA. So let’s get into the code and what it does.</p>
<p>First, let’s look at the Function called “Run_R_Script”. This function takes four arguments, where the first two are mandatory, and the last two are optional.</p>
<ul>
<li><p>sRApplicationPath - This is the path to the R application that you want to use to run your script. It is a required argument, and you need to provide the full path to the Rscript.exe file on your machine.</p></li>
<li><p>sRFilePath - This is the path to the R script file that you want to execute. It is also a required argument, and you need to provide the full path to your R script file.</p></li>
<li><p>iStyle - This is an optional argument that specifies how the script will be executed. By default, it is set to 1, which means that the script will run in a minimized window.</p></li>
<li><p>bWaitTillComplete - This is another optional argument that specifies whether the function should wait until the script has finished running before returning control to the caller. By default, it is set to True, which means that the function will not return control until the script has completed execution.</p></li>
</ul>
<p>The first line inside the Function defines two variables: sPath and shell.</p>
<ul>
<li><p>sPath - This variable will hold the path to the Rscript.exe file and the path to the R script file, which will be used later to run the script.</p></li>
<li><p>shell - This variable is used to create an instance of the WScript.Shell object.</p></li>
</ul>
<p>Next, we wrap the R path with double quotations to avoid any issues with spaces in the path.</p>
<p>After that, the script deletes Column A.</p>
<p>Then, instead of using the “shell.Run” function, the code uses the “shell.Exec” function to execute the R script. This function returns an object that has a “StdOut” property, which contains the output of the script.</p>
<p>The output is then read using the “ReadAll” method, and the resulting string is split into an array using the “Split” function. The array is then iterated using a “For” loop, and each element of the array is written to Column A, starting at cell A1.</p>
<p>Finally, the Function returns an Integer value, which is the result of the “shell.Run” function.</p>
<p>The Subroutine called “Demo” just demonstrates how to use the “Run_R_Script” function by calling it with the appropriate parameters.</p>
</section>
<section id="full-code" class="level1">
<h1>Full Code</h1>
<p>Here is the R Script</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-4">)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-8">        <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-9">        <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-10">    ),</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-12">        <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-13">        <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-14">    )</span>
<span id="cb1-15">)</span></code></pre></div>
</div>
<p>Full VBA</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb2-1"><span class="kw" style="color: #003B4F;">Function </span>Run_R_Script(sRApplicationPath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span>, _</span>
<span id="cb2-2">                        sRFilePath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span>, _</span>
<span id="cb2-3">                        <span class="kw" style="color: #003B4F;">Optional</span> iStyle <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span> = 1, _</span>
<span id="cb2-4">                        <span class="kw" style="color: #003B4F;">Optional</span> bWaitTillComplete <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Boolean</span> = <span class="kw" style="color: #003B4F;">True</span>) <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;">Dim</span> sPath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;">Dim</span> shell <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Object</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;">'Define shell object</span></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;">Set </span>shell = VBA.CreateObject(<span class="st" style="color: #20794D;">"WScript.Shell"</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;">'Wrap the R path with double quotations</span></span>
<span id="cb2-13">    sPath = <span class="st" style="color: #20794D;">""""</span> &amp; sRApplicationPath &amp; <span class="st" style="color: #20794D;">""""</span></span>
<span id="cb2-14">    sPath = sPath &amp; <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb2-15">    sPath = sPath &amp; sRFilePath</span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;">'Delete Coumn A</span></span>
<span id="cb2-18">    Columns(<span class="st" style="color: #20794D;">"A"</span>).Delete</span>
<span id="cb2-19">    </span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;">'Get Result</span></span>
<span id="cb2-21">    result = shell.Exec(sPath).StdOut.ReadAll</span>
<span id="cb2-22">    result = Split(result, vbCrLf)</span>
<span id="cb2-23">    <span class="kw" style="color: #003B4F;">For </span>i = 0 <span class="kw" style="color: #003B4F;">To</span> UBound(result)</span>
<span id="cb2-24">        ActiveSheet.Range(<span class="st" style="color: #20794D;">"A1"</span>).Offset(i, 0).Value = result(i)</span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;">Next </span>i</span>
<span id="cb2-26">    </span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;">End Function</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;">Sub </span>Demo()</span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;">Dim</span> iEerrorCode <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span></span>
<span id="cb2-31">    iEerrorCode = Run_R_Script(<span class="st" style="color: #20794D;">"C:\Program Files\R\R-4.1.2</span><span class="sc" style="color: #5E5E5E;">\b</span><span class="st" style="color: #20794D;">in</span><span class="sc" style="color: #5E5E5E;">\x64</span><span class="st" style="color: #20794D;">\Rscript.exe"</span>, <span class="st" style="color: #20794D;">"C:\Users\ssanders\Desktop</span><span class="sc" style="color: #5E5E5E;">\t</span><span class="st" style="color: #20794D;">est.R"</span>)</span>
<span id="cb2-32"><span class="kw" style="color: #003B4F;">End Sub</span></span></code></pre></div>
</section>
<section id="picture" class="level1">
<h1>Picture</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/Capture.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Example Output, VBA, and R</figcaption><p></p>
</figure>
</div>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<p><a href="https://stackoverflow.com/a/54816881">https://stackoverflow.com/a/54816881</a></p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/index.html</guid>
  <pubDate>Wed, 10 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/Capture.PNG" medium="image"/>
</item>
<item>
  <title>VBA to R and Back Again: Running R from VBA</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today I am going to briefly go over an extremely simple example of running some R code via Excel VBA.</p>
<p>Let’s start by discussing each line of code one by one:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb1-1"><span class="kw" style="color: #003B4F;">Sub </span>CallRnorm()</span></code></pre></div>
<p>This line defines a subroutine called “CallRnorm”. A subroutine is a block of code that can be executed repeatedly from any part of the code, and it starts with the “Sub” keyword followed by the subroutine name and any arguments in parentheses.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb2-1"><span class="kw" style="color: #003B4F;">Dim</span> R <span class="kw" style="color: #003B4F;">As</span> Variant</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;">Dim</span> result <span class="kw" style="color: #003B4F;">As</span> Variant</span></code></pre></div>
<p>These two lines declare two variables named “R” and “result” as “Variant” data type. “Variant” is a data type that can store any type of data.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb3-1">Columns(<span class="st" style="color: #20794D;">"A"</span>).Delete</span></code></pre></div>
<p>This line deletes the entire column A from the active worksheet.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb4-1">R = <span class="st" style="color: #20794D;">"library(stats);rnorm(10) |&gt; as.data.frame()"</span></span></code></pre></div>
<p>This line assigns a string of R code to the variable “R”. The code will load the “stats” package and generate 10 random numbers from a normal distribution using the “rnorm()” function, and then convert the result to a data frame using the pipe operator “|&gt;” and the “as.data.frame()” function.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb5-1">result = VBA.CreateObject(<span class="st" style="color: #20794D;">"WScript.Shell"</span>).Exec(<span class="st" style="color: #20794D;">"C:\Program Files\R\R-4.1.2</span><span class="sc" style="color: #5E5E5E;">\b</span><span class="st" style="color: #20794D;">in</span><span class="sc" style="color: #5E5E5E;">\x64</span><span class="st" style="color: #20794D;">\Rscript.exe -e """</span> &amp; R &amp; <span class="st" style="color: #20794D;">""""</span>).StdOut.ReadAll</span></code></pre></div>
<p>This line uses the “CreateObject” method to create a new object of the “WScript.Shell” class, which allows us to execute commands in the Windows command shell. It then uses the “Exec” method to execute the R code stored in the “R” variable using the “Rscript.exe” command-line tool, which runs R scripts from the command line. The result of the command is stored in the “result” variable by reading the output of the command using the “StdOut” property of the “Exec” object and the “ReadAll” method.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb6-1">result = Split(result, vbCrLf)</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;">For </span>i = 0 <span class="kw" style="color: #003B4F;">To</span> UBound(result)</span>
<span id="cb6-3">    ActiveSheet.Range(<span class="st" style="color: #20794D;">"A1"</span>).Offset(i, 0).Value = result(i)</span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;">Next </span>i</span></code></pre></div>
<p>These two lines split the result of the R code execution into an array of strings using the “Split” function and the newline character (vbCrLf) as the delimiter. It then loops through the array using a “For” loop and assigns each element to a cell in the active worksheet, starting from cell A1 and offsetting each cell by one row using the “Offset” method.</p>
<p>So, in summary, this VBA code creates a subroutine that deletes column A from the active worksheet, executes a block of R code that generates 10 random numbers from a normal distribution and converts the result to a data frame, captures the output of the R code execution, splits the output into an array of strings, and pastes the result into column A of the active worksheet.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-09/Capture.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">VBA to R and Back Again</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>rtip</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-09/index.html</guid>
  <pubDate>Tue, 09 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-09/Capture.PNG" medium="image"/>
</item>
<item>
  <title>Updates to {healthyR.data}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Introducing the Updated <a href="https://www.spsanderson.com/healthyR.data/"><code>{healthyR.data}</code></a> Package: Your Ultimate Health Data Companion</p>
<p>If you’re a healthcare professional or a data enthusiast, you’re probably familiar with the healthyR.data package. This R package has been an invaluable resource for accessing and analyzing public health data. With its latest release, version 1.0.3, the package has undergone some significant changes, including the addition of several new functions and a requirement for R version 3.4.0. In this post, we’ll take a closer look at the updates and how they can help you work with health data more efficiently.</p>
</section>
<section id="breaking-changes" class="level1">
<h1>Breaking Changes</h1>
<p>In keeping with tidyverse practices, healthyR.data now requires R version 3.4.0. This change may affect some users who haven’t updated their R version recently, but it’s an important step to keep the package up-to-date and compatible with other tidyverse packages.</p>
</section>
<section id="new-functions" class="level1">
<h1>New Functions</h1>
<p>One of the main highlights of the new version is the addition of several new functions. Let’s take a look at each one and how it can help you work with health data:</p>
<ul>
<li><p>dl_hosp_data_dict(): This function downloads the data dictionary for the Hospital Compare dataset. This information can be crucial when working with health data, as it provides a clear understanding of the variables and their definitions.</p></li>
<li><p>current_hosp_data(): This function retrieves the most recent Hospital Compare dataset, which includes information on hospital quality, patient experience, and more.</p></li>
<li><p>current_asc_data(): This function retrieves the most recent Ambulatory Surgical Center (ASC) dataset, which includes information on ASC quality measures.</p></li>
<li><p>current_asc_oas_cahps_data(): This function retrieves the most recent ASC Outpatient and Ambulatory Surgery Consumer Assessment of Healthcare Providers and Systems (OAS CAHPS) dataset, which includes patient experience measures for ASCs.</p></li>
<li><p>current_comp_death_data(): This function retrieves the most recent data on hospital mortality rates for conditions such as heart attack, pneumonia, and stroke.</p></li>
<li><p>current_hai_data(): This function retrieves the most recent Healthcare-Associated Infections (HAI) dataset, which includes information on infections acquired during hospitalization.</p></li>
<li><p>current_hcahps_data(): This function retrieves the most recent Hospital Consumer Assessment of Healthcare Providers and Systems (HCAHPS) dataset, which includes patient experience measures for hospitals.</p></li>
<li><p>current_hvbp_data(): This function retrieves the most recent Hospital Value-Based Purchasing (HVBP) dataset, which includes information on hospital quality and payment incentives.</p></li>
<li><p>current_ipfqr_data(): This function retrieves the most recent Inpatient Psychiatric Facility Quality Reporting (IPFQR) dataset, which includes information on psychiatric facility quality measures.</p></li>
<li><p>current_maternal_data(): This function retrieves the most recent Maternal and Infant Health Care Quality dataset, which includes information on maternal and infant health outcomes.</p></li>
<li><p>current_medicare_hospital_spending_data(): This function retrieves the most recent Medicare Hospital Spending by Claim dataset, which includes information on Medicare payments for hospital services.</p></li>
<li><p>current_opqr_data(): This function retrieves the most recent Outpatient Prospective Payment System (OPPS) Quality Reporting (OPQR) dataset, which includes information on outpatient facility quality measures.</p></li>
<li><p>current_imaging_efficiency_data(): This function retrieves the most recent Radiology Imaging Efficiency (RIE) dataset, which includes information on the appropriateness of imaging studies.</p></li>
<li><p>current_unplanned_hospital_visits_data(): This function retrieves the most recent Unplanned Hospital Visits dataset, which includes information on hospital readmissions and emergency department visits.</p></li>
<li><p>current_payments_data(): This function retrieves the most recent Provider-Level Payments dataset, which includes information on payments to healthcare providers.</p></li>
<li><p>current_pch_hcahps_data(): This function retrieves the most recent Patient-Centered Medical Home (PCMH) dataset.</p></li>
<li><p>current_pch_hai_hospital_data(): This function retrieves the most recent Patient-Centered Medical Home (PCMH) Healthcare-Associated Infections (HAI) Hospital dataset, which includes information on healthcare-associated infections in PCMH hospitals.</p></li>
<li><p>current_pch_oncology_measures_hospital_data(): This function retrieves the most recent Patient-Centered Medical Home (PCMH) Oncology Measures Hospital dataset, which includes information on oncology measures in PCMH hospitals.</p></li>
<li><p>current_pch_outcomes_data(): This function retrieves the most recent Patient-Centered Medical Home (PCMH) Outcomes dataset, which includes information on outcomes for PCMH practices.</p></li>
<li><p>current_timely_and_effective_care_data(): This function retrieves the most recent Timely and Effective Care dataset, which includes information on hospital performance on timely and effective care measures.</p></li>
<li><p>current_va_data(): This function retrieves the most recent Veterans Affairs (VA) dataset, which includes information on VA hospital quality measures.</p></li>
</ul>
<p>All of these functions provide valuable access to important health data, allowing users to perform detailed analyses and gain insights into various aspects of healthcare quality and outcomes.</p>
</section>
<section id="other-improvements" class="level1">
<h1>Other Improvements</h1>
<p>In addition to the new functions, <code>healthyR.data</code> version 1.0.3 also includes several bug fixes and improvements. For example, the logic in the <code>current_hosp_data()</code> function has been confirmed by user feedback.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>healthyR.data</code> package has long been a valuable resource for anyone working with health data. With the latest release, version 1.0.3, the package has become even more powerful and versatile, thanks to the addition of many new functions and improvements. If you’re a healthcare professional, researcher, or data enthusiast, <code>healthyR.data</code> is a must-have tool in your arsenal. Give it a try and see how it can help you gain new insights into the world of healthcare quality and outcomes.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>healthyrdata</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-08/index.html</guid>
  <pubDate>Mon, 08 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Maps with {shiny} Pt 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The code provided at the end of this post is an example of how to create a simple Shiny app in R that utilizes the OpenStreetMap (OSM) API to create a map of amenities in a specific location.</p>
<p>The app has two main parts: the user interface (UI) and the server.</p>
<p>The UI section is defined using the <code>fluidPage</code> function from the Shiny library, which creates a responsive, fluid layout for the app. It includes a title panel, a sidebar panel with text input fields for the city, state, country, and amenity type, and a submit button. The main panel of the UI includes a <code>leafletOutput</code> object, which will display the map of amenities.</p>
<p>The <code>server</code> section is defined using the server function from the Shiny library. This function is responsible for processing the inputs from the UI, performing any necessary calculations, and rendering the output.</p>
<p>The <code>observeEvent</code> function is used to capture the click event of the submit button. When the button is clicked, the function <code>getbb</code> from the <code>osmdata</code> library is used to retrieve the bounding box (<code>bbox</code>) for the specified location.</p>
<p>Next, the <code>opq</code> function from the <code>osmdata</code> library is used to create a query object that searches for amenities of the specified type (<code>input$amenity</code>) within the retrieved <code>bbox</code>.</p>
<p>The assign function is used to set a variable <code>has_internet_via_proxy</code> to TRUE in the curl environment. This is necessary to ensure that the <code>osmdata_sf</code> function, which downloads the OSM data, works properly.</p>
<p>The <code>osmdata_sf</code> function is then called with the created query object as its argument. This function downloads the OSM data and converts it to an <code>sf</code> object. The resulting <code>sf</code> object contains a data frame with information about the amenities found in the specified location.</p>
<p>A <code>mapview</code> object is then created using the osm_points part of the <code>sf</code> object. This object is assigned to the variable m.</p>
<p>Finally, the <code>renderLeaflet</code> function is used to display the resulting map. The <code>mapview</code> object <code>m</code> is accessed and its <span class="citation" data-cites="map">@map</span> attribute is used as the input to the <code>renderLeaflet</code> function. This displays the map of amenities in the specified location.</p>
<p>There is also some commented out code in the server section that provides an alternative way to display the map using the <code>leaflet</code> library instead of the <code>mapview</code> library. This code creates a <code>leaflet</code> object, adds tiles to the map, and then adds circle markers to represent the amenities found in the specified location. The popup argument specifies what information is displayed in the popups that appear when the user clicks on a marker.</p>
<p>Overall, this code demonstrates how to use the Shiny library to create an interactive web application that utilizes the OSM API to display maps of amenities in specific locations.</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>As usual, here is the full code. Please take it and see what you can do with it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(osmdata)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(mapview)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(htmltools)</span>
<span id="cb1-6"></span>
<span id="cb1-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"Mapping with Shiny"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"city"</span>, <span class="st" style="color: #20794D;">"City"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. Queens"</span>),</span>
<span id="cb1-12">      <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"state"</span>, <span class="st" style="color: #20794D;">"State"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. New York"</span>),</span>
<span id="cb1-13">      <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"country"</span>, <span class="st" style="color: #20794D;">"Country"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. USA"</span>),</span>
<span id="cb1-14">      <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"amenity"</span>, <span class="st" style="color: #20794D;">"Amenity Type"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. pharmacy"</span>),</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>)</span>
<span id="cb1-16">    ),</span>
<span id="cb1-17">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-18">      <span class="fu" style="color: #4758AB;">leafletOutput</span>(<span class="st" style="color: #20794D;">"map"</span>)</span>
<span id="cb1-19">    )</span>
<span id="cb1-20">  )</span>
<span id="cb1-21">)</span>
<span id="cb1-22"></span>
<span id="cb1-23">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb1-24">  </span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;">$</span>submit, {</span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;"># Concatenate city, state, and country inputs into a single string</span></span>
<span id="cb1-27">    address <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>city, input<span class="sc" style="color: #5E5E5E;">$</span>state, input<span class="sc" style="color: #5E5E5E;">$</span>country, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb1-28">    </span>
<span id="cb1-29">    bbox <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getbb</span>(address)</span>
<span id="cb1-30">    </span>
<span id="cb1-31">    query <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">opq</span>(<span class="at" style="color: #657422;">bbox =</span> bbox) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-32">      <span class="fu" style="color: #4758AB;">add_osm_feature</span>(<span class="at" style="color: #657422;">key =</span> <span class="st" style="color: #20794D;">"amenity"</span>, <span class="at" style="color: #657422;">value =</span> input<span class="sc" style="color: #5E5E5E;">$</span>amenity)</span>
<span id="cb1-33">    </span>
<span id="cb1-34">    <span class="fu" style="color: #4758AB;">assign</span>(<span class="st" style="color: #20794D;">"has_internet_via_proxy"</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="fu" style="color: #4758AB;">environment</span>(curl<span class="sc" style="color: #5E5E5E;">::</span>has_internet))</span>
<span id="cb1-35">    sf_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">osmdata_sf</span>(query)</span>
<span id="cb1-36">    </span>
<span id="cb1-37">    m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mapview</span>(sf_obj<span class="sc" style="color: #5E5E5E;">$</span>osm_points)</span>
<span id="cb1-38">    output<span class="sc" style="color: #5E5E5E;">$</span>map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderLeaflet</span>({</span>
<span id="cb1-39">      m<span class="sc" style="color: #5E5E5E;">@</span>map</span>
<span id="cb1-40">    })</span>
<span id="cb1-41">    </span>
<span id="cb1-42">    <span class="co" style="color: #5E5E5E;"># output$map &lt;- renderLeaflet({</span></span>
<span id="cb1-43">    <span class="co" style="color: #5E5E5E;">#   leaflet(sf_obj$osm_points) |&gt;</span></span>
<span id="cb1-44">    <span class="co" style="color: #5E5E5E;">#     addTiles() |&gt;</span></span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;">#     addCircleMarkers(</span></span>
<span id="cb1-46">    <span class="co" style="color: #5E5E5E;">#       radius = 3, </span></span>
<span id="cb1-47">    <span class="co" style="color: #5E5E5E;">#       popup = ~as.character(</span></span>
<span id="cb1-48">    <span class="co" style="color: #5E5E5E;">#         paste(</span></span>
<span id="cb1-49">    <span class="co" style="color: #5E5E5E;">#           "Name: ", name, "&lt;br/&gt;",</span></span>
<span id="cb1-50">    <span class="co" style="color: #5E5E5E;">#           "OSM ID: ", osm_id, "&lt;br/&gt;"</span></span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;">#         )</span></span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;">#       ),</span></span>
<span id="cb1-53">    <span class="co" style="color: #5E5E5E;">#       opacity = 0.3</span></span>
<span id="cb1-54">    <span class="co" style="color: #5E5E5E;">#     )</span></span>
<span id="cb1-55">    <span class="co" style="color: #5E5E5E;"># })</span></span>
<span id="cb1-56">  })</span>
<span id="cb1-57">}</span>
<span id="cb1-58"></span>
<span id="cb1-59"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>mapping</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-05/index.html</guid>
  <pubDate>Fri, 05 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Maps with {shiny}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-04/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The code is used to create a Shiny app that allows the user to search for a type of amenity (such as a pharmacy) in a particular city, state, and country, and then display the results on a map. Here is a step-by-step explanation of how the code works.</p>
</section>
<section id="libraries" class="level1">
<h1>Libraries</h1>
<p>The code starts by loading four libraries - <code>shiny</code>, <code>osmdata</code>, <code>mapview</code>, and <code>leaflet</code>. These libraries contain functions that will be used later in the code.</p>
</section>
<section id="user-interface" class="level1">
<h1>User Interface</h1>
<p>The user interface (UI) is defined using the <code>fluidPage</code> function from the shiny library. The UI consists of four text input boxes, a submit button, and a map output. The four text input boxes allow the user to enter the name of a city, state, and country, as well as the type of amenity they are looking for (e.g., pharmacy).</p>
</section>
<section id="server-function" class="level1">
<h1>Server Function</h1>
<p>The server function is where the “backend” of the app is defined. It is responsible for taking the user inputs, performing calculations or processing on them, and returning the output to the UI.</p>
<p>The server function is defined using the server function from the shiny library. Within the server function, we have an <code>observeEvent</code> function that listens for a click on the submit button. When the submit button is clicked, the function inside the <code>observeEvent</code> is executed.</p>
<section id="concatenating-the-address" class="level2">
<h2 class="anchored" data-anchor-id="concatenating-the-address">Concatenating the Address</h2>
<p>The first thing that the <code>observeEvent</code> function does is concatenate the user inputs for city, state, and country into a single string. This is done using the paste function. The <code>sep</code> argument specifies that the words should be separated by a comma and space. The resulting string is the address that will be used to search for the specified amenity.</p>
</section>
<section id="obtaining-the-bounding-box" class="level2">
<h2 class="anchored" data-anchor-id="obtaining-the-bounding-box">Obtaining the Bounding Box</h2>
<p>Next, the code uses the <code>getbb</code> function from the <code>osmdata</code> library to obtain the bounding box for the specified address. A bounding box is a rectangle that contains the entire area of interest (in this case, the specified city, state, and country). The bounding box is necessary to limit the search for the specified amenity to only the specified area.</p>
</section>
<section id="creating-the-query" class="level2">
<h2 class="anchored" data-anchor-id="creating-the-query">Creating the Query</h2>
<p>The code then creates a query object using the opq function from the <code>osmdata</code> library. The <code>bbox</code> argument specifies the bounding box that was obtained in the previous step. The <code>add_osm_feature</code> function is then used to specify the amenity that the user is searching for. The key argument specifies that we are searching for an “amenity”, and the value argument specifies the specific type of amenity that the user entered (e.g., pharmacy).</p>
</section>
<section id="obtaining-the-results" class="level2">
<h2 class="anchored" data-anchor-id="obtaining-the-results">Obtaining the Results</h2>
<p>The <code>osmdata_sf</code> function is used to retrieve the results of the query. This function returns a sf object that contains the spatial data for the points that match the specified amenity. The resulting sf object is then passed to the <code>mapview</code> function from the <code>mapview</code> library, which creates an interactive map of the results.</p>
</section>
<section id="displaying-the-map" class="level2">
<h2 class="anchored" data-anchor-id="displaying-the-map">Displaying the Map</h2>
<p>Finally, the r<code>enderLeaflet</code> function is used to display the map in the UI. The <code>m@map</code> argument specifies that we want to display the map that was created by the <code>mapview</code> function. The resulting map is displayed in the <code>leafletOutput</code> that was defined in the UI.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In summary, this R code creates a Shiny app that allows the user to search for a specific type of amenity in a particular city, state, and country,</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>Here is the full script of the app. Please steal this code and modify for yourself, see what you can come up with (PS it needs work for sure).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(osmdata)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(mapview)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(leaflet)</span>
<span id="cb1-5"></span>
<span id="cb1-6">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"city"</span>, <span class="st" style="color: #20794D;">"City"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. Queens"</span>),</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"state"</span>, <span class="st" style="color: #20794D;">"State"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. New York"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"country"</span>, <span class="st" style="color: #20794D;">"Country"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. USA"</span>),</span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">textInput</span>(<span class="st" style="color: #20794D;">"amenity"</span>, <span class="st" style="color: #20794D;">"Amenity Type"</span>, <span class="at" style="color: #657422;">placeholder =</span> <span class="st" style="color: #20794D;">"e.g. pharmacy"</span>),</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"submit"</span>, <span class="st" style="color: #20794D;">"Submit"</span>),</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">leafletOutput</span>(<span class="st" style="color: #20794D;">"map"</span>)</span>
<span id="cb1-13">)</span>
<span id="cb1-14"></span>
<span id="cb1-15">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb1-16">  </span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;">observeEvent</span>(input<span class="sc" style="color: #5E5E5E;">$</span>submit, {</span>
<span id="cb1-18">    <span class="co" style="color: #5E5E5E;"># Concatenate city, state, and country inputs into a single string</span></span>
<span id="cb1-19">    address <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>city, input<span class="sc" style="color: #5E5E5E;">$</span>state, input<span class="sc" style="color: #5E5E5E;">$</span>country, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">", "</span>)</span>
<span id="cb1-20">    bbox <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getbb</span>(address)</span>
<span id="cb1-21">    query <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">opq</span>(<span class="at" style="color: #657422;">bbox =</span> bbox) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-22">      <span class="fu" style="color: #4758AB;">add_osm_feature</span>(<span class="at" style="color: #657422;">key =</span> <span class="st" style="color: #20794D;">"amenity"</span>, <span class="at" style="color: #657422;">value =</span> input<span class="sc" style="color: #5E5E5E;">$</span>amenity)</span>
<span id="cb1-23">    </span>
<span id="cb1-24">    <span class="fu" style="color: #4758AB;">assign</span>(<span class="st" style="color: #20794D;">"has_internet_via_proxy"</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="fu" style="color: #4758AB;">environment</span>(curl<span class="sc" style="color: #5E5E5E;">::</span>has_internet))</span>
<span id="cb1-25">    sf_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">osmdata_sf</span>(query)</span>
<span id="cb1-26">    m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">mapview</span>(sf_obj<span class="sc" style="color: #5E5E5E;">$</span>osm_points)</span>
<span id="cb1-27">    output<span class="sc" style="color: #5E5E5E;">$</span>map <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderLeaflet</span>({</span>
<span id="cb1-28">      m<span class="sc" style="color: #5E5E5E;">@</span>map</span>
<span id="cb1-29">    })</span>
<span id="cb1-30">  })</span>
<span id="cb1-31">  </span>
<span id="cb1-32">}</span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="fu" style="color: #4758AB;">shinyApp</span>(ui, server)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-04/Capture.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Maps with Shiny</figcaption><p></p>
</figure>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>mapping</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-04/index.html</guid>
  <pubDate>Thu, 04 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-04/Capture.PNG" medium="image"/>
</item>
<item>
  <title>How to Download a File from the Internet using download.file()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The download.file() function in R is used to download files from the internet and save them onto your computer. Here’s a simple explanation of how to use it:</p>
<ol type="1">
<li>Specify the URL of the file you want to download.</li>
<li>Specify the file name and the location where you want to save the file on your computer.</li>
<li>Call the download.file() function, passing in the URL and file name/location as arguments.</li>
</ol>
<p>Here’s an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Specify the URL of the file you want to download</span></span>
<span id="cb1-2">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://example.com/data.csv"</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Specify the file name and location where you want to save the file on your computer</span></span>
<span id="cb1-5">file_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"my_data.csv"</span></span>
<span id="cb1-6">file_path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"/path/to/save/folder/"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Call the download.file() function, passing in the URL and file name/location as arguments</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">download.file</span>(url, <span class="fu" style="color: #4758AB;">paste</span>(file_path, file_name, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">""</span>), <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"wb"</span>)</span></code></pre></div>
</div>
<p>In this example, we’re downloading a CSV file from “https://example.com/data.csv”, and saving it as “my_data.csv” in the “/path/to/save/folder/” directory on our computer.</p>
<p>The mode = “wb” argument specifies that we want to download the file in binary mode.</p>
<p>Once you run this code, the file will be downloaded from the URL and saved to your specified file location.</p>
<p>Let’s try a working example.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>We are going to download the Measure Dates file from the following location: <code>{https://data.cms.gov/provider-data/dataset/4j6d-yzce}</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://data.cms.gov/provider-data/sites/default/files/resources/49244993de5a948bcb0d69bf5cc778bd_1681445112/Measure_Dates.csv"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">file_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"measure_dates.csv"</span></span>
<span id="cb2-4">file_path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"C:</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Downloads</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">"</span></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">download.file</span>(<span class="at" style="color: #657422;">url =</span> url, <span class="at" style="color: #657422;">destfile =</span> <span class="fu" style="color: #4758AB;">paste0</span>(file_path, file_name, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">""</span>))</span></code></pre></div>
</div>
<p>Now let’s read in the file in order to make sure it actually downloaded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">measure_dates_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">paste0</span>(file_path, file_name))</span>
<span id="cb3-2"></span>
<span id="cb3-3">dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glimpse</span>(measure_dates_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 170
Columns: 6
$ Measure.ID            &lt;chr&gt; "ASC_11", "ASC_12", "ASC_13", "ASC_14", "ASC_17"…
$ Measure.Name          &lt;chr&gt; "Percentage of patients who had cataract surgery…
$ Measure.Start.Quarter &lt;chr&gt; "1Q2021", "1Q2019", "1Q2021", "1Q2021", "3Q2020"…
$ Start.Date            &lt;chr&gt; "01/01/2021", "01/01/2019", "01/01/2021", "01/01…
$ Measure.End.Quarter   &lt;chr&gt; "4Q2021", "4Q2021", "4Q2021", "4Q2021", "4Q2021"…
$ End.Date              &lt;chr&gt; "12/31/2021", "12/31/2021", "12/31/2021", "12/31…</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>readxl</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-03/index.html</guid>
  <pubDate>Wed, 03 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Extracting a model call from a fitted workflow in {tidymodels}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we are using a package called <code>tidymodels</code>, which provides a suite of tools for modeling and machine learning.</p>
<p>Now, let’s take a closer look at the code itself and how we extract a model call from a fitted <code>workflow</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-2"></span>
<span id="cb1-3">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb1-4">rec_obj</span></code></pre></div>
</div>
<p>The first line loads the tidymodels package. Then, we create a “recipe” object called <code>rec_obj</code> using the <code>recipe()</code> function. A recipe is a set of instructions for preparing data for modeling. In this case, we are telling the recipe to use the mpg variable as the outcome or dependent variable, and all other variables in the mtcars dataset as the predictors or independent variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">model_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>(<span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"regression"</span>, <span class="at" style="color: #657422;">engine =</span> <span class="st" style="color: #20794D;">"lm"</span>)</span>
<span id="cb2-2">model_spec</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Next, we create a “model specification” object called <code>model_spec</code> using the <code>linear_reg()</code> function. This specifies the type of model we want to use, which is a linear regression model in this case. We also specify that the model is a regression (i.e., we are predicting a continuous outcome variable) and that the model engine is “lm”, which stands for “linear model”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">wflw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">add_recipe</span>(rec_obj) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">add_model</span>(model_spec)</span>
<span id="cb4-4">wflw</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>In the next section of code, we create a “workflow” object called <code>wflw</code> using the <code>workflow()</code> function. A workflow is a way of organizing the steps involved in building a machine learning model. In this case, we are using a “pipe” (|&gt;) to sequentially add the recipe and model specification to the workflow. This means that we first add the recipe to the workflow using the <code>add_recipe()</code> function, and then add the model specification using the <code>add_model()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">wflw_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fit</span>(wflw, <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb6-2">wflw_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:
stats::lm(formula = ..y ~ ., data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
   12.30337     -0.11144      0.01334     -0.02148      0.78711     -3.71530  
       qsec           vs           am         gear         carb  
    0.82104      0.31776      2.52023      0.65541     -0.19942  </code></pre>
</div>
</div>
<p>Finally, we fit the workflow to the data using the fit() function, which takes the workflow object (wflw) and the data (mtcars) as input. This creates a new object called <code>wflw_fit</code>, which is the fitted model object. This object contains various pieces of information about the fitted model, such as the model coefficients and the R-squared value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">wflw_fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>call</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>stats::lm(formula = ..y ~ ., data = data)</code></pre>
</div>
</div>
<p>The last line of code extracts the actual function call that was used to fit the model. This can be useful for reproducing the analysis later on.</p>
<p>Overall, the code you shared shows how to build a simple linear regression model using the tidymodels package in R. We start by creating a recipe that specifies the outcome variable and predictor variables, then create a model specification for a linear regression model, and finally combine these into a workflow and fit the model to the data.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-01/index.html</guid>
  <pubDate>Mon, 01 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a Shiny app for building models using the <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> which is based on the <code>tidymodels</code> package in R. The app allows you to upload your own data or choose from one of two built-in datasets (mtcars or iris) and select the type of model you want to build (regression or classification).</p>
<p>Let’s take a closer look at the code.</p>
<p>First, the necessary packages are loaded:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span></code></pre></div>
</div>
<p>The <code>tidymodels_prefer()</code> function is called to set some default options for the <code>tidymodels package</code>, and <code>load_deps()</code> from <code>tidyAML</code> is called to make sure all the necessary packages are loaded, you can also separately run <code>install_deps()</code> to make sure they all get installed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">load_deps</span>()</span></code></pre></div>
</div>
<p>Next, the user interface (UI) is defined using the <code>fluidPage()</code> function. The UI consists of a title panel and a sidebar layout with various input elements, such as file input and select input. There are also two conditional panels that are shown depending on the selected model type (regression or classification). The UI also includes an action button and some output elements, such as <code>verbatimTextOutput</code> and <code>reactableOutput</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-5">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb3-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb3-7">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb3-8">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb3-9">      ),</span>
<span id="cb3-10">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>,</span>
<span id="cb3-11">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>,</span>
<span id="cb3-12">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb3-13">      ),</span>
<span id="cb3-14">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb3-15">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb3-16">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb3-17">      ),</span>
<span id="cb3-18">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-19">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'regression'"</span>,</span>
<span id="cb3-20">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb3-21">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-22">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb3-23">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-24">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-25">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-26">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb3-27">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb3-28">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-29">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-30">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-31">                                  <span class="fu" style="color: #4758AB;">unique</span>()))</span>
<span id="cb3-32">      ),</span>
<span id="cb3-33">      </span>
<span id="cb3-34">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-35">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'classification'"</span>,</span>
<span id="cb3-36">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb3-37">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-38">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb3-39">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-40">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-41">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-42">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb3-43">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb3-44">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-45">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-46">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-47">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-48">        <span class="fu" style="color: #4758AB;">checkboxInput</span>(<span class="st" style="color: #20794D;">"predictor_factor"</span>,</span>
<span id="cb3-49">                      <span class="st" style="color: #20794D;">"Convert predictor column to factor?"</span>,</span>
<span id="cb3-50">                      <span class="at" style="color: #657422;">value =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-51">      ),</span>
<span id="cb3-52">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb3-53">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb3-54">    ),</span>
<span id="cb3-55">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-56">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb3-57">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb3-58">    )</span>
<span id="cb3-59">  )</span>
<span id="cb3-60">)</span></code></pre></div>
</div>
<p>After defining the UI, the server function is defined. The server function handles the reactive behavior of the app.</p>
<p>The first reactive element is data, which reads in the data file if one is uploaded or loads the selected built-in dataset if one is chosen. It also converts the predictor column to a factor if the classification model type is selected.</p>
<p>In the server function, we first define a reactive expression <code>data()</code> that will read the data file uploaded by the user or one of the built-in datasets (mtcars or iris). If the user has uploaded a file, the function read.csv is used to read the data, and if it’s a classification problem, the predictor column is converted to a factor variable. The <code>updateSelectInput</code> function is then called to update the predictor_col select input with the names of the columns in the data. If the user has chosen one of the built-in datasets, it is loaded using the get function, and the same preprocessing is performed.</p>
<p>Next, we define an event reactive <code>recipe_obj()</code> that creates a recipes object based on the selected predictor column and normalizes the numeric variables in the data. The step_normalize function standardizes all numeric variables (except the outcome variable) to have mean 0 and standard deviation 1. This is a common preprocessing step in machine learning pipelines that can improve model performance.</p>
<p>Two reactive expressions, <code>model_engine()</code> and <code>model_fns()</code>, are then defined to generate the available model engines and functions based on the selected model type. For regression models, the <code>make_regression_base_tbl</code> functions are used, and for classification models, the <code>make_classification_base_tbl</code> functions are used. These functions return a table with information about the available model engines and functions for a given problem type. The pull function is used to extract the relevant columns from the table, and unique is used to remove duplicate values. The c function is used to concatenate the “all” choice with the available model engines or functions.</p>
<p>Finally, an event reactive <code>model()</code> is defined that builds the model based on the selected parameters. If the model type is regression, the <code>fast_regression</code> function from the tidyAML package is used, and if the model type is classification, the <code>fast_classification</code> function is used. These functions take as inputs the data, the recipes object, the selected model engine and function, and any additional model parameters.</p>
<p>There are three output functions defined in the server: <code>output$recipe_output</code>, <code>output$model_table</code>, and <code>output$model_reactable</code>. The first output function <code>output$recipe_output</code> renders a summary of the recipes object created by <code>recipe_obj()</code> if the predictor_col input is not null. The second output function <code>output$model_table</code> prints the model object returned by <code>model()</code> if the <code>build_model</code> button has been clicked. The third output function <code>output$model_reactable</code> renders a reactive table using the <code>reactable</code> function from the <code>reactable</code> package if the <code>build_model</code> button has been clicked. This table displays the tidyaml_model_tbl.</p>
<p>Overall, this code creates a Shiny web application that allows users to build machine learning models using the tidymodels framework via <code>{tidyAML}</code>. Users can upload their own data or use one of the built-in datasets, select a predictor column, choose a model type, select a model engine and function, and build the model. The output is displayed in a table that provides insights into the model’s performance and coefficients. This code is useful for data scientists and analysts who want to quickly build and evaluate machine learning models without having to write code from scratch.</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>As usual, steal this code and make it your own! See what you can do too!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb4-17">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb4-18">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb4-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb4-20">      ),</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>,</span>
<span id="cb4-22">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>,</span>
<span id="cb4-23">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb4-24">      ),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb4-26">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb4-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb4-28">      ),</span>
<span id="cb4-29">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb4-30">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'regression'"</span>,</span>
<span id="cb4-31">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb4-32">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-33">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-34">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-35">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-36">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-37">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb4-38">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb4-39">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-40">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-41">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-42">                                  <span class="fu" style="color: #4758AB;">unique</span>()))</span>
<span id="cb4-43">      ),</span>
<span id="cb4-44">      </span>
<span id="cb4-45">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb4-46">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'classification'"</span>,</span>
<span id="cb4-47">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb4-48">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-49">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-50">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-51">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-52">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-53">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb4-54">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb4-55">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-56">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-57">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-58">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-59">        <span class="fu" style="color: #4758AB;">checkboxInput</span>(<span class="st" style="color: #20794D;">"predictor_factor"</span>,</span>
<span id="cb4-60">                      <span class="st" style="color: #20794D;">"Convert predictor column to factor?"</span>,</span>
<span id="cb4-61">                      <span class="at" style="color: #657422;">value =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-62">      ),</span>
<span id="cb4-63">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb4-64">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb4-65">    ),</span>
<span id="cb4-66">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-67">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb4-68">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb4-69">    )</span>
<span id="cb4-70">  )</span>
<span id="cb4-71">)</span>
<span id="cb4-72"></span>
<span id="cb4-73">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb4-74">  </span>
<span id="cb4-75">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-76">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-77">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-78">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-79">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-80">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-81">      )</span>
<span id="cb4-82">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-83">        df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]])</span>
<span id="cb4-84">      }</span>
<span id="cb4-85">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-86">        session, </span>
<span id="cb4-87">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-88">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-89">      )</span>
<span id="cb4-90">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-91">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-92">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-93">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-94">        df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]])</span>
<span id="cb4-95">      }</span>
<span id="cb4-96">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-97">        session, </span>
<span id="cb4-98">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-99">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-100">      )</span>
<span id="cb4-101">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-102">    }</span>
<span id="cb4-103">  })</span>
<span id="cb4-104">  </span>
<span id="cb4-105">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb4-106">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb4-107">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb4-108">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-109">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb4-110">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb4-111">  })</span>
<span id="cb4-112">  </span>
<span id="cb4-113">  model_engine <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-114">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-115">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-116">        <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-117">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-118">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-119">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-120">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-121">        <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-122">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-123">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-124">    }</span>
<span id="cb4-125">  })</span>
<span id="cb4-126">  </span>
<span id="cb4-127">  model_fns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-128">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-129">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-130">        <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-131">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-132">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-133">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-134">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-135">        <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-136">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-137">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-138">    }</span>
<span id="cb4-139">  })</span>
<span id="cb4-140">  </span>
<span id="cb4-141">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb4-142">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-143">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-144">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-145">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-146">                             <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-147">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-148">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-149">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-150">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-151">                                 <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-152">    }</span>
<span id="cb4-153">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb4-154">  })</span>
<span id="cb4-155">  </span>
<span id="cb4-156">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-157">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb4-158">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb4-159">    }</span>
<span id="cb4-160">  })</span>
<span id="cb4-161">  </span>
<span id="cb4-162">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-163">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-164">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-165">    }</span>
<span id="cb4-166">  })</span>
<span id="cb4-167">  </span>
<span id="cb4-168">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb4-169">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-170">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-171">    }</span>
<span id="cb4-172">  })</span>
<span id="cb4-173">  </span>
<span id="cb4-174">}</span>
<span id="cb4-175"></span>
<span id="cb4-176"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-29/index.html</guid>
  <pubDate>Sat, 29 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As data science continues to be a sought-after field, creating a reliable and accurate model is essential. While there are various machine learning algorithms available, the process of selecting the correct algorithm can be complex. The <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> package, part of the <code>tidymodels</code> suite, offers an easy-to-use, consistent interface for building machine learning models. In this post, we will explore a Shiny application that utilizes <code>tidyAML</code> to build a machine learning model.</p>
<p>Today I have updated the <code>tidyAML</code> shiny app to include the ability to set the parameter of the <code>fast_regression()</code> function <code>.parsnip_fns</code> and this is things like <code>linear_reg</code>.</p>
<p>Here is a full list of what is available:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb1-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "all"              "linear_reg"       "cubist_rules"     "poisson_reg"     
 [5] "bag_mars"         "bag_tree"         "bart"             "boost_tree"      
 [9] "decision_tree"    "gen_additive_mod" "mars"             "mlp"             
[13] "nearest_neighbor" "rand_forest"      "rule_fit"         "svm_linear"      
[17] "svm_poly"         "svm_rbf"         </code></pre>
</div>
</div>
<p>I have updated the UI to reflect using that method as well. Here is the UI changes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-2">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-3">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-4">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-5">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb3-6">                  )</span>
<span id="cb3-7">      ),</span>
<span id="cb3-8">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>,</span>
<span id="cb3-9">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-10">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-11">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-12">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb3-13">                              )</span></code></pre></div>
</div>
<p>Here are some pictures showing the changes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">UI Change</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">UI Change 2</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Output</figcaption><p></p>
</figure>
</div>
<p>So what this means is that we can just pick a function like <code>parsnip::linear_reg()</code> and leave the <strong>engine</strong> set to <code>"all"</code> and it will build models for all engines supported that work with <code>linear_reg()</code>.</p>
</section>
<section id="the-shiny-application" class="level1">
<h1>The Shiny Application</h1>
<p>The Shiny application is a graphical user interface (GUI) that allows users to select a dataset, predictor column, model type, and engine, and then build a machine learning model. The user can upload a CSV or TXT file or choose one of two built-in datasets: “mtcars” or “iris”. The user can select the predictor column, which is the variable used to predict the outcome, and then choose the model type, either “regression” or “classification”. Next, the user can select a model engine and a model function to use in building the model. Once the user has made all the selections, they can click the “Build Model” button to create the model.</p>
<p>The code for the Shiny application can be broken down into two parts, the User Interface (UI) and the Server. Let’s take a closer look at each of these parts.</p>
</section>
<section id="the-ui" class="level1">
<h1>The UI</h1>
<p>The UI is created using the <code>fluidPage()</code> function from the shiny package. The <code>titlePanel()</code> function creates the title of the application. The <code>sidebarLayout()</code> function creates the sidebar and main panel. The sidebar contains input controls such as file input, select input, and an action button. The main panel displays the outputs generated by the model.</p>
<p>The <code>fileInput()</code> function creates a widget that allows the user to upload a data file. The <code>selectInput()</code> function creates dropdown menus for the user to select the dataset, predictor column, model type, model engine, and model function. The <code>actionButton()</code> function creates a button that the user clicks to build the model. The <code>verbatimTextOutput()</code> function and <code>reactableOutput()</code> function display the output generated by the model.</p>
</section>
<section id="the-server" class="level1">
<h1>The Server</h1>
<p>The Server is where the input data is processed, the model is built, and the output is generated. The Server is created using the server() function from the shiny package.</p>
<p>The <code>reactive()</code> function is used to create a reactive object called data that reads in the data file or built-in dataset selected by the user. The <code>eventReactive()</code> function is used to create a reactive object called recipe_obj that creates a recipe for preprocessing the data. The recipe includes steps to normalize the numeric variables and remove the outcome variable from the recipe.</p>
<p>Two other reactive objects, model_engine and model_fns, are created using the switch() function. These objects contain a list of available engines and model functions for the user to choose from.</p>
<p>Finally, the <code>eventReactive()</code> function is used to create a reactive object called model that builds the machine learning model. The <code>fast_regression()</code> and <code>fast_classification()</code> functions from the tidyAML package are used to build the regression and classification models, respectively.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post, we explored a Shiny application that uses tidyAML to build a machine learning model. The application allows users to select a dataset, predictor column, model type, engine, and function to build a machine learning model. The Shiny application is an excellent tool for those who are new to machine learning or those who want to streamline the rapid prototyping process.</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>This is a work in progress, and I want you to steal this code and see what you can come up with!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb4-17">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb4-18">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb4-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb4-20">      ),</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-22">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb4-23">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb4-24">      ),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb4-26">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb4-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb4-28">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-29">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-30">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-31">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-32">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb4-33">                  )</span>
<span id="cb4-34">      ),</span>
<span id="cb4-35">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>,</span>
<span id="cb4-36">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-37">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-38">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-39">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb4-40">                              )</span>
<span id="cb4-41">      ),</span>
<span id="cb4-42">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb4-43">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb4-44">    ),</span>
<span id="cb4-45">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-46">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb4-47">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb4-48">    )</span>
<span id="cb4-49">  )</span>
<span id="cb4-50">)</span>
<span id="cb4-51"></span>
<span id="cb4-52">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb4-53">  </span>
<span id="cb4-54">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-55">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-56">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-57">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-58">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-59">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-60">      )</span>
<span id="cb4-61">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-62">        session, </span>
<span id="cb4-63">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-64">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-65">      )</span>
<span id="cb4-66">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-67">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-68">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-69">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-70">        session, </span>
<span id="cb4-71">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-72">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-73">      )</span>
<span id="cb4-74">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-75">    }</span>
<span id="cb4-76">  })</span>
<span id="cb4-77">  </span>
<span id="cb4-78">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb4-79">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb4-80">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb4-81">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-82">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb4-83">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb4-84">  })</span>
<span id="cb4-85">  </span>
<span id="cb4-86">  model_engine <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-87">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_engine,</span>
<span id="cb4-88">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-89">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb4-90">           <span class="st" style="color: #20794D;">"brulee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"brulee"</span>,</span>
<span id="cb4-91">           <span class="st" style="color: #20794D;">"gee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gee"</span>,</span>
<span id="cb4-92">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb4-93">           <span class="st" style="color: #20794D;">"glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmer"</span>,</span>
<span id="cb4-94">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>,</span>
<span id="cb4-95">           <span class="st" style="color: #20794D;">"gls"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gls"</span>,</span>
<span id="cb4-96">           <span class="st" style="color: #20794D;">"lme"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb4-97">           <span class="st" style="color: #20794D;">"lmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lmer"</span>,</span>
<span id="cb4-98">           <span class="st" style="color: #20794D;">"stan"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan"</span>,</span>
<span id="cb4-99">           <span class="st" style="color: #20794D;">"stan_glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb4-100">           <span class="st" style="color: #20794D;">"Cubist"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"Cubist"</span>,</span>
<span id="cb4-101">           <span class="st" style="color: #20794D;">"hurdle"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"hurdle"</span>,</span>
<span id="cb4-102">           <span class="st" style="color: #20794D;">"zeroinfl"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"zeroinfl"</span>,</span>
<span id="cb4-103">           <span class="st" style="color: #20794D;">"earth"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb4-104">           <span class="st" style="color: #20794D;">"rpart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rpart"</span>,</span>
<span id="cb4-105">           <span class="st" style="color: #20794D;">"dbarts"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"dbarts"</span>,</span>
<span id="cb4-106">           <span class="st" style="color: #20794D;">"xgboost"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xgboost"</span>          ,</span>
<span id="cb4-107">           <span class="st" style="color: #20794D;">"lightgbm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb4-108">           <span class="st" style="color: #20794D;">"partykit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"partykit"</span>,</span>
<span id="cb4-109">           <span class="st" style="color: #20794D;">"mgcv"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mgcv"</span>,</span>
<span id="cb4-110">           <span class="st" style="color: #20794D;">"nnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nnet"</span>,</span>
<span id="cb4-111">           <span class="st" style="color: #20794D;">"kknn"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"kknn"</span>,</span>
<span id="cb4-112">           <span class="st" style="color: #20794D;">"ranger"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb4-113">           <span class="st" style="color: #20794D;">"randomForest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"randomForest"</span>,</span>
<span id="cb4-114">           <span class="st" style="color: #20794D;">"xrf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xrf"</span>,</span>
<span id="cb4-115">           <span class="st" style="color: #20794D;">"LiblineaR"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"LiblineaR"</span>,</span>
<span id="cb4-116">           <span class="st" style="color: #20794D;">"kernlab = kernlab"</span>)</span>
<span id="cb4-117">  })</span>
<span id="cb4-118">  </span>
<span id="cb4-119">  model_fns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-120">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fns,</span>
<span id="cb4-121">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-122">           <span class="st" style="color: #20794D;">"linear_reg"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"linear_reg"</span>,</span>
<span id="cb4-123">           <span class="st" style="color: #20794D;">"cubist_rules"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"cubist_rules"</span>,</span>
<span id="cb4-124">           <span class="st" style="color: #20794D;">"poisson_reg"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"poisson_reg"</span>,</span>
<span id="cb4-125">           <span class="st" style="color: #20794D;">"bag_mars"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bag_mars"</span>,</span>
<span id="cb4-126">           <span class="st" style="color: #20794D;">"bag_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bag_tree"</span>,</span>
<span id="cb4-127">           <span class="st" style="color: #20794D;">"bart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bart"</span>,</span>
<span id="cb4-128">           <span class="st" style="color: #20794D;">"boost_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"boost_tree"</span>,</span>
<span id="cb4-129">           <span class="st" style="color: #20794D;">"decision_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"decision_tree"</span>,</span>
<span id="cb4-130">           <span class="st" style="color: #20794D;">"gen_additive_mod"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gen_additive_mod"</span>,</span>
<span id="cb4-131">           <span class="st" style="color: #20794D;">"mars"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mars"</span>,</span>
<span id="cb4-132">           <span class="st" style="color: #20794D;">"mlp"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mlp"</span>,</span>
<span id="cb4-133">           <span class="st" style="color: #20794D;">"nearest_neighbor"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nearest_neighbor"</span>,</span>
<span id="cb4-134">           <span class="st" style="color: #20794D;">"rand_forest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rand_forest"</span>,</span>
<span id="cb4-135">           <span class="st" style="color: #20794D;">"rule_fit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rule_fit"</span>,</span>
<span id="cb4-136">           <span class="st" style="color: #20794D;">"svm_linear"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_linear"</span>,</span>
<span id="cb4-137">           <span class="st" style="color: #20794D;">"svm_poly"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_poly"</span>,</span>
<span id="cb4-138">           <span class="st" style="color: #20794D;">"svm_rbf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_rbf"</span></span>
<span id="cb4-139">    )</span>
<span id="cb4-140">  })</span>
<span id="cb4-141">  </span>
<span id="cb4-142">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb4-143">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-144">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-145">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-146">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-147">                             <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-148">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-149">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-150">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-151">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-152">                                 <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-153">    }</span>
<span id="cb4-154">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb4-155">  })</span>
<span id="cb4-156">  </span>
<span id="cb4-157">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-158">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb4-159">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb4-160">    }</span>
<span id="cb4-161">  })</span>
<span id="cb4-162">  </span>
<span id="cb4-163">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-164">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-165">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-166">    }</span>
<span id="cb4-167">  })</span>
<span id="cb4-168">  </span>
<span id="cb4-169">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb4-170">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-171">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-172">    }</span>
<span id="cb4-173">  })</span>
<span id="cb4-174">  </span>
<span id="cb4-175">}</span>
<span id="cb4-176"></span>
<span id="cb4-177"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/index.html</guid>
  <pubDate>Thu, 27 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/1.PNG" medium="image"/>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I spoke about building <code>tidymodels</code> models using my package <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> and <code>{shiny}</code>. I have made an update to it, and will continue to make updates to it this week.</p>
<p>I have added all of the supported engines for <strong>regression</strong> problems only, <em>NOT</em> <strong>classification</strong> yet, that will be tomorrow’s work. I will then add a drop down for users to pick which backend function they want to use from <code>{parsnp}</code> like <code>linear_reg()</code>.</p>
<p>Here are some pictures of the udpates.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">New Drop Down Additions</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reactable Error, not sure on how to fix yet</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reactable output</figcaption><p></p>
</figure>
</div>
<p>Here is the full application, please steal this code and modify for yourself, you never know what you might come up with!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb1-10"></span>
<span id="cb1-11">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb1-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb1-17">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb1-18">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb1-19">                  ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-21">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb1-22">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb1-23">                  ),</span>
<span id="cb1-24">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb1-25">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb1-26">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb1-27">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fn"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb1-28">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,<span class="st" style="color: #20794D;">"lm"</span>,<span class="st" style="color: #20794D;">"brulee"</span>,<span class="st" style="color: #20794D;">"gee"</span>,<span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb1-29">                              <span class="st" style="color: #20794D;">"glmer"</span>,<span class="st" style="color: #20794D;">"glmnet"</span>,<span class="st" style="color: #20794D;">"gls"</span>,<span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb1-30">                              <span class="st" style="color: #20794D;">"lmer"</span>,<span class="st" style="color: #20794D;">"stan"</span>,<span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb1-31">                              <span class="st" style="color: #20794D;">"Cubist"</span>,<span class="st" style="color: #20794D;">"hurdle"</span>,<span class="st" style="color: #20794D;">"zeroinfl"</span>,<span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb1-32">                              <span class="st" style="color: #20794D;">"rpart"</span>,<span class="st" style="color: #20794D;">"dbarts"</span>,<span class="st" style="color: #20794D;">"xgboost"</span>,<span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb1-33">                              <span class="st" style="color: #20794D;">"partykit"</span>,<span class="st" style="color: #20794D;">"mgcv"</span>,<span class="st" style="color: #20794D;">"nnet"</span>,<span class="st" style="color: #20794D;">"kknn"</span>,<span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb1-34">                              <span class="st" style="color: #20794D;">"randomForest"</span>,<span class="st" style="color: #20794D;">"xrf"</span>,<span class="st" style="color: #20794D;">"LiblineaR"</span>,<span class="st" style="color: #20794D;">"kernlab"</span></span>
<span id="cb1-35">                            )</span>
<span id="cb1-36">                  ),</span>
<span id="cb1-37">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb1-38">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb1-39">    ),</span>
<span id="cb1-40">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-41">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb1-43">    )</span>
<span id="cb1-44">  )</span>
<span id="cb1-45">)</span>
<span id="cb1-46"></span>
<span id="cb1-47">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb1-48">  </span>
<span id="cb1-49">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb1-51">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb1-52">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb1-53">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb1-54">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-55">        )</span>
<span id="cb1-56">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb1-57">        session, </span>
<span id="cb1-58">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-59">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb1-60">        )</span>
<span id="cb1-61">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb1-62">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb1-63">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb1-64">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb1-65">        session, </span>
<span id="cb1-66">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-67">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb1-68">        )</span>
<span id="cb1-69">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb1-70">    }</span>
<span id="cb1-71">  })</span>
<span id="cb1-72">  </span>
<span id="cb1-73">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb1-74">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb1-75">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb1-76">                  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-77">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb1-78">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb1-79">  })</span>
<span id="cb1-80">  </span>
<span id="cb1-81">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb1-82">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb1-83">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-84">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb1-85">           <span class="st" style="color: #20794D;">"brulee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"brulee"</span>,</span>
<span id="cb1-86">           <span class="st" style="color: #20794D;">"gee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gee"</span>,</span>
<span id="cb1-87">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb1-88">           <span class="st" style="color: #20794D;">"glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmer"</span>,</span>
<span id="cb1-89">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>,</span>
<span id="cb1-90">           <span class="st" style="color: #20794D;">"gls"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gls"</span>,</span>
<span id="cb1-91">           <span class="st" style="color: #20794D;">"lme"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb1-92">           <span class="st" style="color: #20794D;">"lmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lmer"</span>,</span>
<span id="cb1-93">           <span class="st" style="color: #20794D;">"stan"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan"</span>,</span>
<span id="cb1-94">           <span class="st" style="color: #20794D;">"stan_glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb1-95">           <span class="st" style="color: #20794D;">"Cubist"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"Cubist"</span>,</span>
<span id="cb1-96">           <span class="st" style="color: #20794D;">"hurdle"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"hurdle"</span>,</span>
<span id="cb1-97">           <span class="st" style="color: #20794D;">"zeroinfl"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"zeroinfl"</span>,</span>
<span id="cb1-98">           <span class="st" style="color: #20794D;">"earth"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb1-99">           <span class="st" style="color: #20794D;">"rpart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rpart"</span>,</span>
<span id="cb1-100">           <span class="st" style="color: #20794D;">"dbarts"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"dbarts"</span>,</span>
<span id="cb1-101">           <span class="st" style="color: #20794D;">"xgboost"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xgboost"</span>          ,</span>
<span id="cb1-102">           <span class="st" style="color: #20794D;">"lightgbm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb1-103">           <span class="st" style="color: #20794D;">"partykit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"partykit"</span>,</span>
<span id="cb1-104">           <span class="st" style="color: #20794D;">"mgcv"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mgcv"</span>,</span>
<span id="cb1-105">           <span class="st" style="color: #20794D;">"nnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nnet"</span>,</span>
<span id="cb1-106">           <span class="st" style="color: #20794D;">"kknn"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"kknn"</span>,</span>
<span id="cb1-107">           <span class="st" style="color: #20794D;">"ranger"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb1-108">           <span class="st" style="color: #20794D;">"randomForest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"randomForest"</span>,</span>
<span id="cb1-109">           <span class="st" style="color: #20794D;">"xrf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xrf"</span>,</span>
<span id="cb1-110">           <span class="st" style="color: #20794D;">"LiblineaR"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"LiblineaR"</span>,</span>
<span id="cb1-111">           <span class="st" style="color: #20794D;">"kernlab = kernlab"</span>)</span>
<span id="cb1-112">  })</span>
<span id="cb1-113">  </span>
<span id="cb1-114">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb1-115">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb1-116">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb1-117">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb1-118">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb1-119">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb1-120">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb1-121">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb1-122">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb1-123">    }</span>
<span id="cb1-124">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb1-125">  })</span>
<span id="cb1-126">  </span>
<span id="cb1-127">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb1-128">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb1-129">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb1-130">    }</span>
<span id="cb1-131">  })</span>
<span id="cb1-132">  </span>
<span id="cb1-133">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb1-134">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-135">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb1-136">    }</span>
<span id="cb1-137">  })</span>
<span id="cb1-138">  </span>
<span id="cb1-139">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb1-140">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-141">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb1-142">    }</span>
<span id="cb1-143">  })</span>
<span id="cb1-144">  </span>
<span id="cb1-145">}</span>
<span id="cb1-146"></span>
<span id="cb1-147"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/1.PNG" medium="image"/>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 1</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to the <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> Model Builder, a Shiny web application that allows you to build predictive models using the <code>tidyAML</code> and Parsnip packages in R.</p>
<p>Let’s dive into the code to understand how it works!</p>
</section>
<section id="load-libraries" class="level1">
<h1>Load Libraries</h1>
<p>First, we load the necessary packages:</p>
<ul>
<li><code>shiny</code></li>
<li><code>tidyAML</code></li>
<li><code>recipes</code></li>
<li><code>DT</code></li>
<li><code>glmnet.</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span></code></pre></div>
</div>
</section>
<section id="ui" class="level1">
<h1>UI</h1>
<p>Next, we define the user interface (UI) of the Shiny app using the <code>fluidPage()</code> function from the <code>shiny</code> package. The UI consists of a title panel, a sidebar panel, and a main panel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-5">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb2-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb2-8">        <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb2-9">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb2-10">      ),</span>
<span id="cb2-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-12">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb2-13">        <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb2-14">        <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb2-15">      ),</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-17">        <span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb2-18">        <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb2-19">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb2-20">      ),</span>
<span id="cb2-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-22">        <span class="st" style="color: #20794D;">"model_fn"</span>, </span>
<span id="cb2-23">        <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb2-24">         <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>, <span class="st" style="color: #20794D;">"glm"</span>, <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb2-25">      ),</span>
<span id="cb2-26">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb2-27">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb2-28">    ),</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-30">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>)</span>
<span id="cb2-31">    )</span>
<span id="cb2-32">  )</span>
<span id="cb2-33">)</span></code></pre></div>
</div>
<p>The <code>sidebarPanel()</code> contains several input elements that allow the user to specify the dataset, the predictor column, the type of model, and the model function. There is also an input element that allows the user to upload their own data file. The <code>actionButton()</code> is used to trigger the model building process. Finally, the <code>verbatimTextOutput()</code> element is used to display the output of the model building process.</p>
<p>The <code>mainPanel()</code> contains a single <code>verbatimTextOutput()</code> element that displays the output of the model building process.</p>
<p>Next, we define the server function, which is responsible for handling the user inputs and building the predictive models. The server function takes three arguments:<code>input</code>, <code>output</code>, and <code>session</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb3-2">  ...</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>We start by defining a reactive expression called <code>data</code>. This expression reads in the user-specified dataset or data file and updates the <code>predictor_col</code> select input with the names of the columns of the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-3">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-4">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-5">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-6">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-7">        )</span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-9">        session, </span>
<span id="cb4-10">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-11">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-12">        )</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-14">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-15">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-17">        session, </span>
<span id="cb4-18">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-19">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-20">        )</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-22">    }</span>
<span id="cb4-23">  })</span></code></pre></div>
</div>
<p>The first reactive expression, <code>data</code>, reads in the data file uploaded by the user or selects a built-in dataset, depending on which option the user chooses. If the user uploads a file, the <code>read.csv()</code> function is used to read the data file into a data frame. If the user selects a built-in dataset, the <code>get()</code> function is used to retrieve the data frame associated with that dataset. In both cases, the column names of the data frame are used to update the choices in the <code>predictor_col</code> select input, so that the user can select which column to use as the predictor variable.</p>
<p>The next reactive expression, <code>recipe_obj</code>, creates a recipe object based on the<code>predictor_col</code> selected by the user and the data frame returned by <code>data()</code>. The <code>as.formula()</code> function is used to create a formula that specifies the predictor column as the response variable and all other columns as the predictors. The resulting formula is passed to the <code>recipe()</code> function, along with the data frame. The <code>step_normalize()</code> function is then used to standardize all numeric predictors (except for the outcome variable) to have a mean of 0 and a standard deviation of 1. The resulting recipe object is returned by the reactive expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb5-2">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb5-3">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-4">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb5-7">  })</span></code></pre></div>
</div>
<p>The model_fn reactive expression uses a <code>switch()</code> statement to determine which model function to use based on the <code>model_fn</code> select input. The available options are <code>"lm"</code> (for linear regression), <code>"glm"</code> (for generalized linear models), and <code>"glmnet"</code> (for regularized linear models).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;">switch</span>(</span>
<span id="cb6-3">      input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb6-4">      <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb6-5">      <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb6-6">      <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span></span>
<span id="cb6-7">    )</span>
<span id="cb6-8">  })</span></code></pre></div>
</div>
<p>The last reactive expression, model, uses the <code>fast_regression()</code> or <code>fast_classification()</code> functions from the <code>tidyAML</code> package to build a regression or classification model based on the data, recipe, and model function selected by the user. The resulting model object is returned by the reactive expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb7-3">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(</span>
<span id="cb7-4">        <span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb7-5">        <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb7-6">        <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>()</span>
<span id="cb7-7">      )</span>
<span id="cb7-8">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb7-9">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(</span>
<span id="cb7-10">        <span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb7-11">        <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb7-12">        <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>()</span>
<span id="cb7-13">      )</span>
<span id="cb7-14">    }</span>
<span id="cb7-15">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb7-16">  })</span></code></pre></div>
</div>
<p>Finally we output the summary of the <code>recipe_obj</code> and print the resulting <code>tibble</code> of model(s) to the screen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb8-3">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb8-4">    }</span>
<span id="cb8-5">  })</span>
<span id="cb8-6">  </span>
<span id="cb8-7">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb8-9">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb8-10">    }</span>
<span id="cb8-11">  })</span></code></pre></div>
</div>
<p>And of course, we cannot serve our app until we run the following line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>I hope you have enjoyed this post. Please steal this code and see what you can do with it. I am trying to figure out how to print the tibble using the DT package so maybe in another post.</p>
</section>
<section id="full-shiny-app" class="level1">
<h1>Full Shiny App</h1>
<p>Here are some pictures <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/1.PNG" class="img-fluid" alt="Initial Panel"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Making a recipe change</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Single Model Output</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Two Model Output with one successful failure</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb10-6"></span>
<span id="cb10-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb10-11">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb10-12">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb10-13">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb10-14">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb10-15">                  ),</span>
<span id="cb10-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-17">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb10-18">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb10-19">                  ),</span>
<span id="cb10-20">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb10-21">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb10-22">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb10-23">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fn"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb10-24">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>, <span class="st" style="color: #20794D;">"glm"</span>, <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb10-25">                  ),</span>
<span id="cb10-26">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb10-27">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb10-28">    ),</span>
<span id="cb10-29">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb10-30">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>)</span>
<span id="cb10-31">    )</span>
<span id="cb10-32">  )</span>
<span id="cb10-33">)</span>
<span id="cb10-34"></span>
<span id="cb10-35">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb10-36">  </span>
<span id="cb10-37">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb10-38">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb10-39">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb10-40">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb10-41">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb10-42">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb10-43">        )</span>
<span id="cb10-44">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb10-45">        session, </span>
<span id="cb10-46">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-47">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb10-48">        )</span>
<span id="cb10-49">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb10-50">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb10-51">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb10-52">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb10-53">        session, </span>
<span id="cb10-54">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-55">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb10-56">        )</span>
<span id="cb10-57">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb10-58">    }</span>
<span id="cb10-59">  })</span>
<span id="cb10-60">  </span>
<span id="cb10-61">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb10-62">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb10-63">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb10-64">                  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-65">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb10-66">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb10-67">  })</span>
<span id="cb10-68">  </span>
<span id="cb10-69">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb10-70">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb10-71">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb10-72">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb10-73">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb10-74">  })</span>
<span id="cb10-75">  </span>
<span id="cb10-76">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb10-77">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb10-78">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb10-79">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb10-80">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb10-81">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb10-82">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb10-83">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb10-84">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb10-85">    }</span>
<span id="cb10-86">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb10-87">  })</span>
<span id="cb10-88">  </span>
<span id="cb10-89">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb10-90">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb10-91">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb10-92">    }</span>
<span id="cb10-93">  })</span>
<span id="cb10-94">  </span>
<span id="cb10-95">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb10-96">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb10-97">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb10-98">    }</span>
<span id="cb10-99">  })</span>
<span id="cb10-100">  </span>
<span id="cb10-101">}</span>
<span id="cb10-102"></span>
<span id="cb10-103"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/1.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny}, {TidyDensity} and {plotly} Part 5</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I have been writing about using the <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> package with <code>shiny</code> for the last few posts, and this one is the last. This post will go over the app and discuss how to change the output of the graph from a <code>ggplot2</code> object into a <code>plotly</code> object. So we will end up with something like this in the menu panel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Plotly Output</figcaption><p></p>
</figure>
</div>
<p>And here is the difference between the plots, first the <strong>ggplot2</strong> plot: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture3.PNG" class="img-fluid" alt="ggplot2 Plot"></p>
<p>And the <strong>plotly_plot</strong>: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture2.PNG" class="img-fluid" alt="plotly plot"></p>
<p>First, the required libraries are loaded: <code>shiny</code>, <code>TidyDensity</code>, <code>tidyverse</code>, <code>DT</code>, and <code>plotly</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span></code></pre></div>
</div>
</section>
<section id="ui" class="level1">
<h1>UI</h1>
<p>The user interface (UI) is defined using the <code>fluidPage()</code> function from the <code>shiny</code> package. The UI consists of a title panel, a sidebar panel, and a main panel. The title panel simply displays the title of the app, while the sidebar panel contains user input elements such as radio buttons, text inputs, and numeric inputs. The main panel displays the plot, data table, and download button.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-5">      <span class="co" style="color: #5E5E5E;"># user input elements</span></span>
<span id="cb2-6">    ),</span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-8">      <span class="co" style="color: #5E5E5E;"># plot, data table, and download button</span></span>
<span id="cb2-9">    )</span>
<span id="cb2-10">  )</span>
<span id="cb2-11">)</span></code></pre></div>
</div>
<p>Next, the server is defined using the <code>server()</code> function from the <code>shiny</code> package. The server is responsible for generating the output based on the user inputs. The first step is to create reactive data using the <code>reactive()</code> function. The reactive data is created based on the user inputs for the distribution function or the entered data. The <code>match.fun()</code> function is used to match the selected function with the corresponding function in the <code>TidyDensity package</code>. The <code>tidy_empirical()</code> function is used if the user entered their own data.</p>
</section>
<section id="server" class="level1">
<h1>Server</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-4">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-7">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb3-8">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb3-9">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb3-10">      }</span>
<span id="cb3-11">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb3-12">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb3-13">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-14">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-15">    }</span>
<span id="cb3-16">  })</span></code></pre></div>
</div>
<p>After the reactive data is created, the output is generated. The output consists of the density plot, data table, and download button. The <code>renderPlot()</code> and <code>renderPlotly()</code> functions are used to generate the plot output. The <code>renderDataTable()</code> function is used to generate the data table output. The <code>downloadHandler()</code> function is used to generate the download button.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb4-2">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-5">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-6">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-7">      </span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb4-9">      </span>
<span id="cb4-10">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb4-11">    }</span>
<span id="cb4-12">  })</span>
<span id="cb4-13">  </span>
<span id="cb4-14">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-16">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-18">      </span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb4-20">    }</span>
<span id="cb4-21">  })</span>
<span id="cb4-22">  </span>
<span id="cb4-23">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb4-24">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-27">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span></code></pre></div>
</div>
<p>Next, we define the server function, which contains the code that will run in response to user input. We start by creating a reactive data object called data. This object will store the data that will be used to generate the plots and tables in the app.</p>
<p>The data that data stores depends on the user’s input. If the user selects “Enter Data” in the sidebar, then data will be set to a <code>tidy_empirical()</code> object generated from the user-entered data. Otherwise, if the user selects “Select Function”, then data will be set to a <code>tidy_</code> function object generated using the user’s choices for number of simulations and sample size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb5-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb5-3">  </span>
<span id="cb5-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb5-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb5-8">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb5-9">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb5-10">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb5-11">      }</span>
<span id="cb5-12">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb5-13">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb5-14">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-15">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb5-16">    }</span>
<span id="cb5-17">  })</span>
<span id="cb5-18">  ...</span>
<span id="cb5-19">}</span></code></pre></div>
</div>
<p>The <code>tidy_empirical()</code> function is used to generate a density plot of the empirical distribution of the user-entered data. This function takes the user-entered data as input and returns a tidy data frame that can be used to create a density plot.</p>
<p>The <code>tidy_</code> functions are used to simulate data from various distributions and generate plots based on that data. These functions take the number of simulations and sample size as input and return a tidy data frame that can be used to create various types of plots.</p>
<p>Next, we define the code for generating the density plot. This code uses the data object that was created earlier to generate a plot. The <code>tidy_autoplot()</code> function is used to generate the plot based on the user’s selected plot type. If the user selects the “Use Plotly” option, then the plot is generated using the <code>ggplotly()</code> function from the <code>plotly</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"> <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb6-2">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb6-5">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-6">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb6-7">      </span>
<span id="cb6-8">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb6-9">      </span>
<span id="cb6-10">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb6-11">    }</span>
<span id="cb6-12">  })</span>
<span id="cb6-13">  </span>
<span id="cb6-14">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb6-16">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-17">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb6-18">      </span>
<span id="cb6-19">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb6-20">    }</span>
<span id="cb6-21">  })</span></code></pre></div>
</div>
<p>The <code>ggplotly()</code> function is used to generate an interactive version of the plot that can be zoomed in and out of and hovered over to see details about specific data points.</p>
<p>Next, we define the code for generating the data table. This code simply displays the data object as a table using the <code>datatable()</code> function from the DT package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb7-2">output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb7-5">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">})</span></code></pre></div>
</div>
<p>Finally, we define the code for downloading the data as a CSV file. This code uses the <code>downloadHandler()</code> function to generate a file download link that, when clicked, will download the data as a CSV file. The name of the CSV file depends on the user’s input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb8-2">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb8-4">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb8-5">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb8-6">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-7">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb8-8">      }</span>
<span id="cb8-9">    },</span>
<span id="cb8-10">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb8-11">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb8-12">    }</span>
<span id="cb8-13">  )</span></code></pre></div>
</div>
<p>Finally, here is the script in it’s entirety, steal it and see what you can come up with!!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb9-8">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb9-11">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb9-12">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb9-13">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb9-14">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb9-15">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb9-16">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-17">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb9-18">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb9-19">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb9-20">      ),</span>
<span id="cb9-21">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-22">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb9-23">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb9-24">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb9-25">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb9-26">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb9-27">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb9-28">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb9-29">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb9-30">                    )</span>
<span id="cb9-31">        )</span>
<span id="cb9-32">      ),</span>
<span id="cb9-33">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb9-34">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb9-35">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb9-36">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb9-37">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb9-38">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb9-39">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb9-40">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb9-41">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb9-42">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb9-43">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb9-44">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb9-45">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb9-46">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb9-47">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb9-48">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb9-49">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb9-50">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb9-51">                  )</span>
<span id="cb9-52">      ),</span>
<span id="cb9-53">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plotly_option"</span>,</span>
<span id="cb9-54">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Use Plotly"</span>,</span>
<span id="cb9-55">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"TRUE"</span>, <span class="st" style="color: #20794D;">"FALSE"</span>),</span>
<span id="cb9-56">                  <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"FALSE"</span></span>
<span id="cb9-57">      ),</span>
<span id="cb9-58">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb9-59">    ),</span>
<span id="cb9-60">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-61">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-62">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.plotly_option == 'TRUE'"</span>,</span>
<span id="cb9-63">        <span class="fu" style="color: #4758AB;">plotlyOutput</span>(<span class="st" style="color: #20794D;">"density_plotly"</span>)</span>
<span id="cb9-64">      ),</span>
<span id="cb9-65">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-66">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.plotly_option == 'FALSE'"</span>,</span>
<span id="cb9-67">        <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>)</span>
<span id="cb9-68">      ),</span>
<span id="cb9-69">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb9-70">    )</span>
<span id="cb9-71">  )</span>
<span id="cb9-72">)</span>
<span id="cb9-73"></span>
<span id="cb9-74"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb9-75">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb9-76">  </span>
<span id="cb9-77">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb9-78">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb9-79">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb9-80">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb9-81">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb9-82">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb9-83">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb9-84">      }</span>
<span id="cb9-85">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb9-86">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb9-87">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-88">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb9-89">    }</span>
<span id="cb9-90">  })</span>
<span id="cb9-91">  </span>
<span id="cb9-92">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb9-93">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb9-94">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb9-95">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-96">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb9-97">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb9-98">      </span>
<span id="cb9-99">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb9-100">      </span>
<span id="cb9-101">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb9-102">    }</span>
<span id="cb9-103">  })</span>
<span id="cb9-104">  </span>
<span id="cb9-105">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb9-106">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-107">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb9-108">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb9-109">      </span>
<span id="cb9-110">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb9-111">    }</span>
<span id="cb9-112">  })</span>
<span id="cb9-113">  </span>
<span id="cb9-114">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb9-115">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb9-116">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb9-117">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-118">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb9-119">    }</span>
<span id="cb9-120">  })</span>
<span id="cb9-121">  </span>
<span id="cb9-122">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb9-123">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb9-124">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-125">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb9-126">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb9-127">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-128">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb9-129">      }</span>
<span id="cb9-130">    },</span>
<span id="cb9-131">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb9-132">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb9-133">    }</span>
<span id="cb9-134">  )</span>
<span id="cb9-135">  </span>
<span id="cb9-136">}</span>
<span id="cb9-137"></span>
<span id="cb9-138"><span class="co" style="color: #5E5E5E;"># Run</span></span>
<span id="cb9-139"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <category>plotly</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/index.html</guid>
  <pubDate>Mon, 24 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture1.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re new to data science or statistics, you may have heard about probability distributions. Probability distributions are mathematical functions that help us understand the probability of a random variable taking on a certain value. For example, if we’re rolling a fair six-sided die, we know that each number has an equal chance of being rolled (1/6 or about 17% chance). We can represent this using a probability distribution, specifically a discrete uniform distribution.</p>
<p>However, not all probability distributions are as simple as a uniform distribution. Many real-world phenomena, such as the heights of people, the number of cars passing through a toll booth in a day, or the amount of rainfall in a particular area, are continuous and can’t be represented using a discrete distribution. Instead, we use continuous probability distributions, which describe the probability of a continuous variable taking on a range of values.</p>
<p>There are many different types of continuous probability distributions, each with their own properties and use cases. For example, the normal distribution, also known as the bell curve, is commonly used to model many natural phenomena, such as human heights and weights. The beta distribution is used to model proportions or percentages, such as the proportion of voters who support a particular candidate. The gamma distribution is used to model the time between events in a Poisson process, such as the time between customers arriving at a store.</p>
<p>The sample <code>TidyDensity App</code> is a tool that helps us explore and visualize these different types of probability distributions. It’s a web application built using the R programming language and the Shiny framework, which allows us to create interactive web applications with R.</p>
<p>Let’s break down the different components of the TidyDensity App.</p>
</section>
<section id="user-interface" class="level1">
<h1>User Interface</h1>
<p>The user interface, or UI for short, is what the user sees and interacts with when they use the app. It’s built using HTML, CSS, and JavaScript, and it’s the first thing the user sees when they open the app.</p>
<p>The TidyDensity App has a simple UI that allows the user to select from four different probability distributions: normal, Bernoulli, beta, and gamma. Each of these distributions has its own properties and use cases, and the user can select which one they want to explore using a dropdown menu.</p>
<p>In addition, the user can specify the number of simulations they want to run, which determines how many times the probability distribution is sampled to generate data. They can also specify the sample size, which determines how many data points are generated in each simulation.</p>
<p>Finally, the user can select which type of plot they want to see, such as a density plot, a quantile plot, a probability plot, or a QQ plot. Each of these plots shows a different aspect of the data generated from the probability distribution, and the user can choose which one to explore.</p>
<p>Here is the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb1-12">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb1-13">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb1-14">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb1-16">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb1-17">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb1-18">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb1-19">      ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb1-21">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb1-22">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-23">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-24">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-25">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-26">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-27">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-28">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-29">                    )</span>
<span id="cb1-30">        )</span>
<span id="cb1-31">      ),</span>
<span id="cb1-32">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-33">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-34">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-35">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-36">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-37">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-38">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-39">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-40">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-41">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-43">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-44">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-45">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-46">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-47">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-48">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-49">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-50">                  )</span>
<span id="cb1-51">      ),</span>
<span id="cb1-52">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb1-53">    ),</span>
<span id="cb1-54">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-55">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-56">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-57">    )</span>
<span id="cb1-58">  )</span>
<span id="cb1-59">)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/InputData.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Here is the new addition to the UI</figcaption><p></p>
</figure>
</div>
</section>
<section id="server" class="level1">
<h1>Server</h1>
<p>The server is the back-end of the <code>TidyDensity App</code>. It’s responsible for generating the data based on the user’s inputs, and for creating the plots and tables that the user sees on the UI.</p>
<p>The server is written in R, and it uses several R packages to generate the data and create the plots. For example, the <code>TidyDensity</code> package is used to generate data from the selected probability distribution, and the <code>ggplot2</code> package is used to create the plots.</p>
<p>The server is also responsible for handling user inputs, such as which probability distribution to use, how many simulations to run, and which plot type to show. It then generates the appropriate data and plot based on these inputs and sends them back to the UI for display.</p>
<p>The first thing we do is create a reactive variable data that will store the output of the <code>match.fun()</code> function, which is called with the arguments <code>.num_sims</code> and <code>.n</code> obtained from the user interface. We use the reactive variable because it will update automatically whenever the inputs are changed.</p>
<p>The <code>output$density_plot</code> object is created with <code>renderPlot()</code>, which takes the reactive variable <code>data(</code>) and passes it to <code>tidy_autoplot()</code> with the plot type selected by the user in the input$plot_type object. The resulting plot is then printed to the user interface.</p>
<p>The <code>output$data_table</code> object is created with <code>DT::renderDataTable()</code>, which takes the reactive variable <code>data()</code> and returns a table to the user interface using the <code>DT::datatable(</code>) function.</p>
<p>Finally, the <code>output$download_data</code> object is created using <code>downloadHandler()</code>, which creates a download button for the user to download a .csv file of the data. The filename argument specifies the name of the file, and the content argument writes the data to a .csv file.</p>
<p>Here is the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb2-8">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb2-9">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb2-10">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb2-11">      }</span>
<span id="cb2-12">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb2-14">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-16">    }</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb2-23">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-24">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-25">      </span>
<span id="cb2-26">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-27">    }</span>
<span id="cb2-28">  })</span>
<span id="cb2-29">  </span>
<span id="cb2-30">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-31">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-32">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-33">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb2-34">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-35">    }</span>
<span id="cb2-36">  })</span>
<span id="cb2-37">  </span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb2-39">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb2-40">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-41">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb2-42">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb2-43">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-44">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb2-45">      }</span>
<span id="cb2-46">    },</span>
<span id="cb2-47">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-48">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-49">    }</span>
<span id="cb2-50">  )</span>
<span id="cb2-51">  </span>
<span id="cb2-52">}</span></code></pre></div>
</div>
</section>
<section id="data-table" class="level1">
<h1>Data Table</h1>
<p>The data table is a table that shows the data generated from the probability distribution. It’s displayed on.</p>
<p>Overall, this app is designed to allow users to generate various types of probability density plots and accompanying data tables based on user input. By allowing users to select different functions, sample sizes, and plot types, this app provides a flexible and customizable tool for exploring and visualizing probability distributions.</p>
</section>
<section id="full-shiny-app" class="level1">
<h1>Full Shiny App</h1>
<p>Here is the full script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb3-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-11">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb3-12">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb3-13">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb3-14">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb3-15">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-16">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb3-17">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb3-18">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb3-19">      ),</span>
<span id="cb3-20">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-21">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb3-22">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb3-23">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb3-24">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-25">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb3-26">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb3-27">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb3-28">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb3-29">                    )</span>
<span id="cb3-30">        )</span>
<span id="cb3-31">      ),</span>
<span id="cb3-32">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb3-33">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb3-34">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-35">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-36">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb3-37">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb3-38">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb3-39">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb3-40">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb3-41">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb3-42">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb3-43">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb3-44">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-45">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb3-46">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb3-47">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb3-48">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb3-49">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb3-50">                  )</span>
<span id="cb3-51">      ),</span>
<span id="cb3-52">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb3-53">    ),</span>
<span id="cb3-54">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-55">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb3-56">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb3-57">    )</span>
<span id="cb3-58">  )</span>
<span id="cb3-59">)</span>
<span id="cb3-60"></span>
<span id="cb3-61"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb3-62">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-63">  </span>
<span id="cb3-64">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-65">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-66">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb3-67">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-68">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb3-69">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb3-70">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb3-71">      }</span>
<span id="cb3-72">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb3-73">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb3-74">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-75">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-76">    }</span>
<span id="cb3-77">  })</span>
<span id="cb3-78">  </span>
<span id="cb3-79">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb3-80">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-81">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb3-82">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb3-83">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-84">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb3-85">      </span>
<span id="cb3-86">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb3-87">    }</span>
<span id="cb3-88">  })</span>
<span id="cb3-89">  </span>
<span id="cb3-90">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb3-91">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb3-92">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb3-93">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb3-94">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb3-95">    }</span>
<span id="cb3-96">  })</span>
<span id="cb3-97">  </span>
<span id="cb3-98">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb3-99">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb3-100">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb3-101">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-102">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb3-103">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-104">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb3-105">      }</span>
<span id="cb3-106">    },</span>
<span id="cb3-107">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb3-108">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb3-109">    }</span>
<span id="cb3-110">  )</span>
<span id="cb3-111">  </span>
<span id="cb3-112">}</span>
<span id="cb3-113"></span>
<span id="cb3-114"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb3-115"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/index.html</guid>
  <pubDate>Fri, 21 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/InputData.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the previous post we allowed users to choose a distribution and a plot type. Now, we want to allow users to download a <strong>.csv</strong> file of the data that is generated.</p>
<p>In the UI, we added a <code>downloadButton</code> with <code>outputId = "download_data"</code> and <code>label = "Download Data"</code>. In the server, we added a <code>downloadHandler</code> that takes a <code>filename</code> and content function. The <code>filename</code> function returns the name of the file to be downloaded (in this case, we used the selected function name as the file name with “.csv” extension). The content function writes the reactive data to a CSV file using the write.csv function. The <code>downloadHandler</code> returns the file to be downloaded when the button is clicked.</p>
<p>See here: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/DownloadData.PNG" class="img-fluid" alt="Download Buttong"></p>
</section>
<section id="ui-section" class="level1">
<h1>UI Section</h1>
<p>Here is the update to the UI Section</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-2">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-7">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-8">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-9">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-10">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-11">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-12">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-13">                  )</span>
<span id="cb1-14">      ),</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-16">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-17">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-18">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-19">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-26">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-28">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-29">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-30">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-31">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-32">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-33">                  )</span>
<span id="cb1-34">      ),</span>
<span id="cb1-35">      <span class="co" style="color: #5E5E5E;"># Download the data</span></span>
<span id="cb1-36">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb1-37">    ),</span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-39">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-40">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-41">    )</span>
<span id="cb1-42">  )</span>
<span id="cb1-43">)</span></code></pre></div>
</div>
</section>
<section id="server-section" class="level1">
<h1>Server Section</h1>
<p>Here is the update to the Server section.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-8">  })</span>
<span id="cb2-9">  </span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-11">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-13">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-14">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-22">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-23">  })</span>
<span id="cb2-24">  </span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb2-26">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb2-27">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-28">      <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb2-29">    },</span>
<span id="cb2-30">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-31">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-32">    }</span>
<span id="cb2-33">  )</span>
<span id="cb2-34">  </span>
<span id="cb2-35">}</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb2-38"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With these changes, the user can now export the data to a <strong>.csv</strong> file by clicking the “Export Data” button and selecting where to save the file.</p>
<p>I hope this update to the TidyDensity app will make it more useful for your data analysis needs. If you have any questions or feedback, please feel free to let me know, and as usual…Steal this Code!! Modify for yourself and see what you come up with.</p>
<p>Here is the entire script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb3-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb3-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb3-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb3-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb3-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb3-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb3-18">                  )</span>
<span id="cb3-19">      ),</span>
<span id="cb3-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb3-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb3-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb3-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb3-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb3-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb3-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb3-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb3-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb3-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb3-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb3-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb3-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb3-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb3-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb3-38">                  )</span>
<span id="cb3-39">      ),</span>
<span id="cb3-40">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb3-41">    ),</span>
<span id="cb3-42">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-43">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb3-44">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb3-45">    )</span>
<span id="cb3-46">  )</span>
<span id="cb3-47">)</span>
<span id="cb3-48"></span>
<span id="cb3-49"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb3-50">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-51">  </span>
<span id="cb3-52">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-53">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb3-55">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-56">  })</span>
<span id="cb3-57">  </span>
<span id="cb3-58">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb3-59">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-60">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb3-61">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-62">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb3-63">    </span>
<span id="cb3-64">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb3-65">  })</span>
<span id="cb3-66">  </span>
<span id="cb3-67">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb3-68">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb3-69">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb3-70">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb3-71">  })</span>
<span id="cb3-72">  </span>
<span id="cb3-73">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb3-74">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb3-75">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb3-76">      <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb3-77">    },</span>
<span id="cb3-78">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb3-79">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb3-80">    }</span>
<span id="cb3-81">  )</span>
<span id="cb3-82">  </span>
<span id="cb3-83">}</span>
<span id="cb3-84"></span>
<span id="cb3-85"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb3-86"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/index.html</guid>
  <pubDate>Thu, 20 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/DownloadData.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Shiny is an R package that allows you to create interactive web applications from R code. In this blog post, we’ll explore the different components of a Shiny application and show how they work together to create an interactive data visualization app. This is a part 2 with a small enhancement.</p>
</section>
<section id="the-app" class="level1">
<h1>The App</h1>
<p>Our Shiny app will generate density plots for different statistical distributions based on user input. The user will be able to select a distribution, set the number of simulations, and choose the plot type from a dropdown menu. The app will also display a table of data generated by the selected distribution.</p>
<p>Here’s a preview of what the app will look like: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/image.PNG" class="img-fluid" alt="TidyDensity with Shiny"></p>
<section id="the-ui" class="level2">
<h2 class="anchored" data-anchor-id="the-ui">The UI</h2>
<p>The user interface (UI) is the visual part of the app that the user interacts with. In our app, the UI is defined using the fluidPage() function from the shiny package. It consists of a title panel, a sidebar layout, and a main panel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-18">                  )</span>
<span id="cb1-19">      ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-38">                  )</span>
<span id="cb1-39">      )</span>
<span id="cb1-40">    ),</span>
<span id="cb1-41">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-43">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-44">    )</span>
<span id="cb1-45">  )</span>
<span id="cb1-46">)</span></code></pre></div>
</div>
<p>The title panel displays the app name, while the sidebar layout contains the input controls for the user. In this case, we have four input elements:</p>
<ul>
<li><code>selectInput()</code> allows the user to choose a statistical distribution to generate data from.</li>
<li><code>numericInput()</code> allows the user to set the number of simulations.</li>
<li>Another <code>numericInput()</code> allows the user to set the sample size.</li>
<li><code>selectInput()</code> allows the user to choose the type of plot to display.</li>
</ul>
<p>The main panel contains the output elements for the app, in this case a plot and a table.</p>
</section>
<section id="the-server" class="level2">
<h2 class="anchored" data-anchor-id="the-server">The Server</h2>
<p>The server is the backend of the app that handles the logic and generates the output based on user input. In our app, the server is defined using the <code>server()</code> function from the shiny package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-8">  })</span>
<span id="cb2-9">  </span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-11">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-13">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-14">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-22">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-23">  })</span>
<span id="cb2-24">  </span>
<span id="cb2-25">}</span></code></pre></div>
</div>
<p>The <code>server()</code> function takes two arguments, input and output. These arguments allow the server to interact with the user interface.</p>
<p>First, we create a reactive data object data, which takes in the user’s input for the function, number of simulations, and sample size, and passes it to the appropriate function using <code>match.fun()</code>.</p>
<p>Next, we create the density_plot output. We use the <code>renderPlot()</code> function to create a reactive plot of the data using the tidy_autoplot() function from the <code>{TidyDensity}</code> package. The <code>tidy_autoplot()</code> function allows the user to choose from several plot types, including density, quantile, probability, qq, and mcmc. We then print the plot using the <code>print()</code> function.</p>
<p>Finally, we create the <code>data_table</code> output using the <code>DT::renderDataTable()</code> function. This output displays the reactive data as a table using the <code>DT::datatable()</code> function.</p>
</section>
<section id="the-shiny-app" class="level2">
<h2 class="anchored" data-anchor-id="the-shiny-app">The Shiny App</h2>
<p>Finally, we run the Shiny app using the <code>shinyApp()</code> function, which takes the <code>ui</code> and <code>server</code> functions as arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>This launches the app and displays the user interface. The user can interact with the app by selecting a function, specifying the number of simulations and sample size, and viewing the resulting density plot and data table. The app provides a simple and interactive way to explore the TidyDensity package and its functionality.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Here is the entire app! Steal this code and modify it for yourself, see what you can do!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb4-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb4-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb4-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb4-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb4-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb4-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb4-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb4-18">                  )</span>
<span id="cb4-19">      ),</span>
<span id="cb4-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb4-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb4-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb4-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb4-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb4-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb4-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb4-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb4-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb4-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb4-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb4-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb4-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb4-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb4-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb4-38">                  )</span>
<span id="cb4-39">      )</span>
<span id="cb4-40">    ),</span>
<span id="cb4-41">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-42">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb4-43">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb4-44">    )</span>
<span id="cb4-45">  )</span>
<span id="cb4-46">)</span>
<span id="cb4-47"></span>
<span id="cb4-48"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb4-49">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb4-50">  </span>
<span id="cb4-51">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb4-52">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-53">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb4-54">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb4-55">  })</span>
<span id="cb4-56">  </span>
<span id="cb4-57">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb4-58">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-59">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb4-60">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-61">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-62">    </span>
<span id="cb4-63">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb4-64">  })</span>
<span id="cb4-65">  </span>
<span id="cb4-66">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb4-67">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb4-68">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb4-69">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb4-70">  })</span>
<span id="cb4-71">  </span>
<span id="cb4-72">}</span>
<span id="cb4-73"></span>
<span id="cb4-74"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb4-75"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/image.PNG" medium="image"/>
</item>
</channel>
</rss>
