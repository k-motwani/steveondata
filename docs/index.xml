<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Fri, 03 Mar 2023 05:00:00 GMT</lastBuildDate>
<item>
  <title>Simple examples of pmap() from {purrr}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The pmap() function in R is part of the purrr library, which is a package designed to make it easier to work with functions that operate on vectors, lists, and other types of data structures.</p>
<p>The pmap() function is used to apply a function to a list of arguments, where each element in the list contains the arguments for a single function call. The function is applied in parallel, meaning that each call is executed concurrently, which can help speed up computations when working with large datasets.</p>
<p>Here is the basic syntax of the pmap() function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">pmap</span>(.l, .f, ...)</span></code></pre></div>
</div>
<p>where:</p>
<ul>
<li><code>.l</code> - is a list of arguments, where each element of the list contains the arguments for a single function call.</li>
<li><code>.f</code> - is the function to apply to the arguments in .l.</li>
<li><code>...</code> - is used to pass additional arguments to .f.</li>
</ul>
<p>The <code>pmap()</code> function returns a list, where each element of the list contains the output of a single function call.</p>
<p>Let’s define a function for an example.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">my_function <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(a, b, c) {</span>
<span id="cb2-2">  <span class="co" style="color: #5E5E5E;"># do something with a, b, and c</span></span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">return</span>(a <span class="sc" style="color: #5E5E5E;">+</span> b <span class="sc" style="color: #5E5E5E;">+</span> c)</span>
<span id="cb2-4">}</span></code></pre></div>
</div>
<p>A very simple function that just adds up the elements passed.</p>
<p>Now let’s go over a couple simple examples.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># create a list of vectors with your arguments</span></span>
<span id="cb3-6">my_args <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>),</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>)</span>
<span id="cb3-10">)</span>
<span id="cb3-11"></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;"># apply your function to each combination of arguments in parallel</span></span>
<span id="cb3-13">results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pmap</span>(my_args, my_function)</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;"># print the results</span></span>
<span id="cb3-16"><span class="fu" style="color: #4758AB;">print</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[1] 12

[[2]]
[1] 15

[[3]]
[1] 18</code></pre>
</div>
</div>
<p>Now lets see a couple more examples.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">argsl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">100</span>), <span class="co" style="color: #5E5E5E;"># this is .n</span></span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>),            <span class="co" style="color: #5E5E5E;"># this is .mean</span></span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>),            <span class="co" style="color: #5E5E5E;"># this is .sd</span></span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>)         <span class="co" style="color: #5E5E5E;"># this is .num_sims</span></span>
<span id="cb5-6">)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;">pmap</span>(argsl, tidy_normal)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx        dy     p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1  3.56  -15.0 0.0000353 0.814  3.56 
 2 1              2 -0.433 -14.6 0.0000679 0.457 -0.433
 3 1              3 -1.93  -14.3 0.000125  0.315 -1.93 
 4 1              4  1.68  -14.0 0.000219  0.663  1.68 
 5 1              5  4.18  -13.7 0.000369  0.852  4.18 
 6 1              6  0.805 -13.4 0.000596  0.580  0.805
 7 1              7  7.99  -13.1 0.000922  0.977  7.99 
 8 1              8 -1.61  -12.8 0.00137   0.344 -1.61 
 9 1              9  1.83  -12.5 0.00195   0.676  1.83 
10 1             10  6.66  -12.1 0.00267   0.952  6.66 
# … with 990 more rows

[[2]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx        dy      p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1 -0.335 -9.02 0.0000814 0.328  -0.335
 2 1              2  2.00  -8.82 0.000162  0.630   2.00 
 3 1              3 -0.238 -8.62 0.000304  0.340  -0.238
 4 1              4  1.17  -8.41 0.000544  0.523   1.17 
 5 1              5  1.50  -8.21 0.000921  0.567   1.50 
 6 1              6  4.68  -8.01 0.00148   0.890   4.68 
 7 1              7  4.59  -7.81 0.00227   0.884   4.59 
 8 1              8 -1.18  -7.61 0.00331   0.233  -1.18 
 9 1              9  2.35  -7.40 0.00460   0.673   2.35 
10 1             10 -3.73  -7.20 0.00610   0.0574 -3.73 
# … with 990 more rows

[[3]]
# A tibble: 1,000 × 7
   sim_number     x      y    dx       dy     p      q
   &lt;fct&gt;      &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 1              1  4.42  -3.98 0.000118 0.886  4.42 
 2 1              2  2.24  -3.86 0.000211 0.547  2.24 
 3 1              3 -0.207 -3.73 0.000369 0.135 -0.207
 4 1              4  3.32  -3.61 0.000622 0.745  3.32 
 5 1              5  0.999 -3.48 0.00101  0.308  0.999
 6 1              6  4.08  -3.36 0.00160  0.851  4.08 
 7 1              7  5.81  -3.23 0.00244  0.972  5.81 
 8 1              8  6.11  -3.11 0.00362  0.980  6.11 
 9 1              9  2.30  -2.98 0.00518  0.560  2.30 
10 1             10  0.231 -2.86 0.00718  0.188  0.231
# … with 990 more rows

[[4]]
# A tibble: 1,000 × 7
   sim_number     x     y      dx       dy       p     q
   &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;
 1 1              1 3.41  -0.635  0.000128 0.658   3.41 
 2 1              2 0.415 -0.557  0.000243 0.00487 0.415
 3 1              3 3.24  -0.479  0.000440 0.593   3.24 
 4 1              4 3.73  -0.401  0.000758 0.768   3.73 
 5 1              5 4.22  -0.324  0.00124  0.889   4.22 
 6 1              6 3.70  -0.246  0.00193  0.757   3.70 
 7 1              7 4.35  -0.168  0.00288  0.911   4.35 
 8 1              8 1.50  -0.0899 0.00408  0.0672  1.50 
 9 1              9 2.58  -0.0120 0.00551  0.336   2.58 
10 1             10 3.41   0.0658 0.00713  0.661   3.41 
# … with 990 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">pmap</span>(argsl, tidy_normal) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">map</span>(tidy_autoplot)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[2]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[3]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>
[[4]]</code></pre>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index_files/figure-html/unnamed-chunk-4-4.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>purrr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-03/index.html</guid>
  <pubDate>Fri, 03 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Forecasting Timeseries in a list with R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this article, we will discuss how to perform an ARIMA forecast on nested data or data that is in a list using R programming language. This is a common scenario in which we have data stored in a list format, where each element of the list corresponds to a different time series. We will use the R programming language, specifically the “forecast” package, to perform the ARIMA forecast.</p>
<p>First, we will need to load the required packages and data. For this example, we will use the “AirPassengers” dataset which is included in the “datasets” package. This dataset contains the number of international airline passengers per month from 1949 to 1960. We will then create a list containing subsets of this data for each year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-2"></span>
<span id="cb1-3">yearly_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">split</span>(AirPassengers, <span class="at" style="color: #657422;">f =</span> <span class="fu" style="color: #4758AB;">ceiling</span>(<span class="fu" style="color: #4758AB;">seq_along</span>(AirPassengers)<span class="sc" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb1-4"></span>
<span id="cb1-5">yearly_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
 [1] 112 118 132 129 121 135 148 148 136 119 104 118

$`2`
 [1] 115 126 141 135 125 149 170 170 158 133 114 140

$`3`
 [1] 145 150 178 163 172 178 199 199 184 162 146 166

$`4`
 [1] 171 180 193 181 183 218 230 242 209 191 172 194

$`5`
 [1] 196 196 236 235 229 243 264 272 237 211 180 201

$`6`
 [1] 204 188 235 227 234 264 302 293 259 229 203 229

$`7`
 [1] 242 233 267 269 270 315 364 347 312 274 237 278

$`8`
 [1] 284 277 317 313 318 374 413 405 355 306 271 306

$`9`
 [1] 315 301 356 348 355 422 465 467 404 347 305 336

$`10`
 [1] 340 318 362 348 363 435 491 505 404 359 310 337

$`11`
 [1] 360 342 406 396 420 472 548 559 463 407 362 405

$`12`
 [1] 417 391 419 461 472 535 622 606 508 461 390 432</code></pre>
</div>
</div>
<p>In the above code, we use the “split” function to split the data into yearly subsets. The “f” parameter is used to specify the grouping variable which, in this case, is the sequence of numbers from 1 to the length of the dataset divided by 12, rounded up to the nearest integer. This creates a list of 12 elements, one for each year.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Next, we will define a function that takes a single element of the list, fits an ARIMA model, and generates a forecast.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">arima_forecast <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x){</span>
<span id="cb3-2">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(x)</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb3-4">}</span></code></pre></div>
</div>
<p>This function takes a single argument “x” which is one of the elements of the list. We use the “auto.arima” function from the “forecast” package to fit an ARIMA model to the data. The “forecast” function is then used to generate a forecast based on this model.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>We can now use the “lapply” function to apply this function to each element of the list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">forecasts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(yearly_data, arima_forecast)</span></code></pre></div>
</div>
<p>The “lapply” function applies the “arima_forecast” function to each element of the “yearly_data” list and returns a list of forecasts.</p>
<p>Finally, we can extract and plot the forecasts for a specific year.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">plot</span>(forecasts[[<span class="dv" style="color: #AD0000;">5</span>]])</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now lets take a look at them all.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb6-2"></span>
<span id="cb6-3">purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map</span>(forecasts, plot)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-2.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-3.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-4.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-5.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index_files/figure-html/unnamed-chunk-5-6.png" class="img-fluid" width="672"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>$`1`
$`1`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 132.2237 126.4744 126.4744 126.4744 126.4744 126.4744 126.4744 126.4744
 [9] 126.4744 126.4744

$`1`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 120.1608 113.7751
14 110.0828 101.4056
15 110.0828 101.4056
16 110.0828 101.4056
17 110.0828 101.4056
18 110.0828 101.4056
19 110.0828 101.4056
20 110.0828 101.4056
21 110.0828 101.4056
22 110.0828 101.4056

$`1`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 144.2865 150.6722
14 142.8660 151.5432
15 142.8660 151.5432
16 142.8660 151.5432
17 142.8660 151.5432
18 142.8660 151.5432
19 142.8660 151.5432
20 142.8660 151.5432
21 142.8660 151.5432
22 142.8660 151.5432


$`2`
$`2`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 153.8708 139.5919 139.5919 139.5919 139.5919 139.5919 139.5919 139.5919
 [9] 139.5919 139.5919

$`2`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 136.3778 127.1175
14 115.8789 103.3260
15 115.8789 103.3260
16 115.8789 103.3260
17 115.8789 103.3260
18 115.8789 103.3260
19 115.8789 103.3260
20 115.8789 103.3260
21 115.8789 103.3260
22 115.8789 103.3260

$`2`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 171.3638 180.6240
14 163.3048 175.8577
15 163.3048 175.8577
16 163.3048 175.8577
17 163.3048 175.8577
18 163.3048 175.8577
19 163.3048 175.8577
20 163.3048 175.8577
21 163.3048 175.8577
22 163.3048 175.8577


$`3`
$`3`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 173.6413 170.0479 170.0479 170.0479 170.0479 170.0479 170.0479 170.0479
 [9] 170.0479 170.0479

$`3`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 153.5404 142.8995
14 146.6452 134.2565
15 146.6452 134.2565
16 146.6452 134.2565
17 146.6452 134.2565
18 146.6452 134.2565
19 146.6452 134.2565
20 146.6452 134.2565
21 146.6452 134.2565
22 146.6452 134.2565

$`3`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 193.7423 204.3831
14 193.4506 205.8393
15 193.4506 205.8393
16 193.4506 205.8393
17 193.4506 205.8393
18 193.4506 205.8393
19 193.4506 205.8393
20 193.4506 205.8393
21 193.4506 205.8393
22 193.4506 205.8393


$`4`
$`4`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 194.0074 194.0119 194.0147 194.0164 194.0174 194.0180 194.0184 194.0186
 [9] 194.0187 194.0188

$`4`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 169.7973 156.9812
14 165.6741 150.6730
15 164.2944 148.5614
16 163.8005 147.8051
17 163.6201 147.5288
18 163.5539 147.4272
19 163.5296 147.3898
20 163.5207 147.3761
21 163.5175 147.3711
22 163.5163 147.3692

$`4`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 218.2176 231.0336
14 222.3497 237.3509
15 223.7350 239.4680
16 224.2322 240.2276
17 224.4146 240.5059
18 224.4821 240.6088
19 224.5071 240.6469
20 224.5165 240.6611
21 224.5200 240.6664
22 224.5213 240.6684


$`5`
$`5`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 206.8929 210.7977 213.3851 215.0996 216.2356 216.9884 217.4872 217.8178
 [9] 218.0368 218.1819

$`5`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 178.2600 163.1026
14 176.4492 158.2662
15 176.8082 157.4455
16 177.5860 157.7275
17 178.3181 158.2458
18 178.8949 158.7294
19 179.3167 159.1104
20 179.6134 159.3893
21 179.8176 159.5856
22 179.9562 159.7208

$`5`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 235.5258 250.6831
14 245.1461 263.3291
15 249.9620 269.3246
16 252.6131 272.4716
17 254.1531 274.2255
18 255.0819 275.2475
19 255.6578 275.8641
20 256.0221 276.2462
21 256.2559 276.4879
22 256.4076 276.6430


$`6`
$`6`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 245.0709 240.0400 240.0400 240.0400 240.0400 240.0400 240.0400 240.0400
 [9] 240.0400 240.0400

$`6`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 212.6687 195.5160
14 196.9893 174.1996
15 196.9893 174.1996
16 196.9893 174.1996
17 196.9893 174.1996
18 196.9893 174.1996
19 196.9893 174.1996
20 196.9893 174.1996
21 196.9893 174.1996
22 196.9893 174.1996

$`6`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 277.4731 294.6259
14 283.0907 305.8803
15 283.0907 305.8803
16 283.0907 305.8803
17 283.0907 305.8803
18 283.0907 305.8803
19 283.0907 305.8803
20 283.0907 305.8803
21 283.0907 305.8803
22 283.0907 305.8803


$`7`
$`7`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 278.0001 278.0001 278.0002 278.0002 278.0002 278.0002 278.0002 278.0002
 [9] 278.0002 278.0002

$`7`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 236.8903 215.1282
14 228.5879 202.4307
15 225.3145 197.4243
16 223.9224 195.2953
17 223.3147 194.3659
18 223.0466 193.9559
19 222.9278 193.7742
20 222.8751 193.6936
21 222.8516 193.6577
22 222.8412 193.6418

$`7`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 319.1098 340.8720
14 327.4123 353.5695
15 330.6859 358.5760
16 332.0780 360.7051
17 332.6857 361.6345
18 332.9538 362.0445
19 333.0726 362.2262
20 333.1254 362.3069
21 333.1488 362.3427
22 333.1592 362.3587


$`8`
$`8`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 349.0540 373.2678 369.7906 348.0549 325.4487 315.1915 319.8599 332.7645
 [9] 344.2812 348.1670

$`8`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 315.6225 297.9249
14 322.1404 295.0752
15 314.7795 285.6584
16 292.8344 263.6024
17 266.5768 235.4118
18 252.9822 220.0505
19 257.0954 223.8699
20 269.7958 236.4622
21 280.1875 246.2583
22 283.2781 248.9280

$`8`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 382.4855 400.1831
14 424.3952 451.4604
15 424.8018 453.9229
16 403.2754 432.5074
17 384.3206 415.4855
18 377.4009 410.3325
19 382.6243 415.8498
20 395.7332 429.0668
21 408.3750 442.3042
22 413.0559 447.4061


$`9`
$`9`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 378.9729 406.5723 408.7509 392.6048 372.9147 361.5778 362.0569 370.2398
 [9] 379.1516 383.6927

$`9`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 336.2126 313.5766
14 342.0963 307.9648
15 339.3660 302.6358
16 323.1265 286.3469
17 300.2319 261.7560
18 285.7363 245.5882
19 285.5516 245.0521
20 293.6654 253.1294
21 301.8675 260.9558
22 305.8147 264.5885

$`9`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 421.7333 444.3692
14 471.0482 505.1797
15 478.1359 514.8660
16 462.0831 498.8627
17 445.5975 484.0734
18 437.4193 477.5674
19 438.5622 479.0617
20 446.8142 487.3503
21 456.4356 497.3473
22 461.5707 502.7968


$`10`
$`10`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 391.9249 381.5489 381.5489 381.5489 381.5489 381.5489 381.5489 381.5489
 [9] 381.5489 381.5489

$`10`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 331.8921 300.1126
14 304.6704 263.9734
15 304.6704 263.9734
16 304.6704 263.9734
17 304.6704 263.9734
18 304.6704 263.9734
19 304.6704 263.9734
20 304.6704 263.9734
21 304.6704 263.9734
22 304.6704 263.9734

$`10`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 451.9577 483.7372
14 458.4274 499.1244
15 458.4274 499.1244
16 458.4274 499.1244
17 458.4274 499.1244
18 458.4274 499.1244
19 458.4274 499.1244
20 458.4274 499.1244
21 458.4274 499.1244
22 458.4274 499.1244


$`11`
$`11`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 408.4203 410.7762 412.3990 413.5168 414.2868 414.8171 415.1824 415.4340
 [9] 415.6074 415.7268

$`11`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 342.2241 307.1820
14 330.3960 287.8452
15 326.1006 280.4170
16 324.5481 277.4509
17 324.0788 276.3255
18 324.0270 275.9656
19 324.1175 275.9106
20 324.2390 275.9632
21 324.3506 276.0422
22 324.4407 276.1168

$`11`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 474.6165 509.6586
14 491.1565 533.7072
15 498.6974 544.3810
16 502.4855 549.5827
17 504.4948 552.2480
18 505.6072 553.6686
19 506.2474 554.4543
20 506.6291 554.9049
21 506.8641 555.1726
22 507.0128 555.3367


$`12`
$`12`$mean
Time Series:
Start = 13 
End = 22 
Frequency = 1 
 [1] 502.9998 476.0531 476.0531 476.0531 476.0531 476.0531 476.0531 476.0531
 [9] 476.0531 476.0531

$`12`$lower
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 437.2687 402.4728
14 387.1722 340.1214
15 387.1722 340.1214
16 387.1722 340.1214
17 387.1722 340.1214
18 387.1722 340.1214
19 387.1722 340.1214
20 387.1722 340.1214
21 387.1722 340.1214
22 387.1722 340.1214

$`12`$upper
Time Series:
Start = 13 
End = 22 
Frequency = 1 
        80%      95%
13 568.7308 603.5267
14 564.9341 611.9848
15 564.9341 611.9848
16 564.9341 611.9848
17 564.9341 611.9848
18 564.9341 611.9848
19 564.9341 611.9848
20 564.9341 611.9848
21 564.9341 611.9848
22 564.9341 611.9848</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">dev.off</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>null device 
          1 </code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>purrr</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-02/index.html</guid>
  <pubDate>Thu, 02 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Text Processing Made Easy with {healthyR}’s sql_left(), sql_mid(), and sql_right() Functions in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you tired of manually manipulating text data in R? Do you find yourself frequently needing to extract substrings from long strings or to grab just the first few characters of a string? If so, you’re in luck! The <a href="https://www.spsanderson.com/healthyR/"><code>{healthyR}</code></a> library has three <a href="https://github.com/spsanderson/healthyR/blob/HEAD/R/sql_string_split.R">functions</a> that will make your text processing tasks much easier: <code>sql_left()</code>, <code>sql_mid()</code>, and <code>sql_right()</code>.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here are the function calls, I will also make the source avilable in the same cell so steal this code!!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># LEFT</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">sql_left</span>(<span class="st" style="color: #20794D;">"text"</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4">sql_left <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.text, .num_char) {</span>
<span id="cb1-5">    base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">substr</span>(.text, <span class="dv" style="color: #AD0000;">1</span>, .num_char)</span>
<span id="cb1-6">}</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># MID</span></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">sql_mid</span>(<span class="st" style="color: #20794D;">"this is some text"</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">sql_mid <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.text, .start_num, .num_char) {</span>
<span id="cb1-12">    base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">substr</span>(.text, .start_num, .start_num <span class="sc" style="color: #5E5E5E;">+</span> .num_char <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-13">}</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># RIGHT</span></span>
<span id="cb1-16"><span class="fu" style="color: #4758AB;">sql_right</span>(<span class="st" style="color: #20794D;">"this is some more text"</span>, <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18">sql_right <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.text, .num_char) {</span>
<span id="cb1-19">    base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">substr</span>(.text, base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">nchar</span>(.text) <span class="sc" style="color: #5E5E5E;">-</span> (.num_char<span class="dv" style="color: #AD0000;">-1</span>), base<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">nchar</span>(.text))</span>
<span id="cb1-20">}</span></code></pre></div>
</div>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s start with sql_left(). This function is similar to the LEFT() function in SQL and Excel, in that it returns the specified number of characters from the beginning of a string. For example, if we have the string “Hello, world!”, and we want to grab just the first three characters, we can use sql_left() like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">sql_left</span>(<span class="st" style="color: #20794D;">"Hello, world!"</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Hel"</code></pre>
</div>
</div>
<p>This will return the string “Hel”.</p>
<p>Next up is sql_mid(). This function is similar to the SUBSTRING() and MID() functions in SQL and Excel, in that it returns a specified portion of a string. The first argument is the string itself, the second argument is the starting position of the substring, and the third argument is the length of the substring. For example, if we have the string “This is some text”, and we want to grab the two characters starting at position six, we can use sql_mid() like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">sql_mid</span>(<span class="st" style="color: #20794D;">"This is some text"</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "is"</code></pre>
</div>
</div>
<p>This will return the string “is”.</p>
<p>Finally, we have sql_right(). This function is similar to the RIGHT() function in SQL and Excel, in that it returns the specified number of characters from the end of a string. For example, if we have the string “This is some more text”, and we want to grab just the last three characters, we can use sql_right() like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">sql_right</span>(<span class="st" style="color: #20794D;">"This is some more text"</span>, <span class="dv" style="color: #AD0000;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "ext"</code></pre>
</div>
</div>
<p>This will return the string “ext”.</p>
<p>These three functions can be extremely helpful when working with text data in R. They can save you time and effort, and make your code more concise and readable. So next time you find yourself needing to manipulate text data, remember to reach for sql_left(), sql_mid(), and sql_right()!</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>sql</category>
  <category>healthyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-01/index.html</guid>
  <pubDate>Wed, 01 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Open a File Folder in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-28/index.html</link>
  <description><![CDATA[ 




<section id="inroduction" class="level1">
<h1>Inroduction</h1>
<p>When writing a function, it is possible that you may want to ask the user where they want the data stored and if they want to open the file folder after the download has taken place. Well we can do this in R by invoking the <code>shell.exec()</code> command where we use a variable like <code>f_path</code> that is the path to the folder. We are going to go over a super simple example.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">shell.exec</span>(file)</span></code></pre></div>
</div>
<p>Here are the arguments.</p>
<ul>
<li><code>file</code> - file, directory or URL to be opened.</li>
</ul>
<p>Now let’s go over a simple example</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here we go.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Create a temporary file to store the zip file</span></span>
<span id="cb2-2">f_path <span class="ot" style="color: #003B4F;">&lt;-</span> utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">choose.dir</span>()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Open file folder?</span></span>
<span id="cb2-5"><span class="cf" style="color: #003B4F;">if</span> (.open_folder){</span>
<span id="cb2-6">    <span class="fu" style="color: #4758AB;">shell.exec</span>(f_path)</span>
<span id="cb2-7">}</span></code></pre></div>
</div>
<p>If in our function creation we make a variable <code>.open_folder</code> and set it equal to <strong>TRUE</strong> then the if statement will execute and <code>shell.exec(f_path)</code> will open the specified path set by <code>utils::choose.dir()</code></p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>shell</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-28/index.html</guid>
  <pubDate>Tue, 28 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Quickly Generate Nested Time Series Models</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>There are many approaches to modeling time series data in R. One of the types of data that we might come across is a nested time series. This means the data is grouped simply by one or more keys. There are many methods in which to accomplish this task. This will be a quick post, but if you want a longer more detailed and quite frankly well written out one, then <a href="https://rpubs.com/alfado/purrr">this is a really good article</a></p>
</section>
<section id="exampmle" class="level1">
<h1>Exampmle</h1>
<p>Let’s just get to it with a very simple example, the motivation here isn’t to be all encompassing, but rather to just showcase it is possible for those who may not know it is.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR.data)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(timetk)</span>
<span id="cb1-4"></span>
<span id="cb1-5">ts_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> healthyR_data <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">filter</span>(ip_op_flag <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"I"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">select</span>(visit_end_date_time, service_line, length_of_stay) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">visit_end_date_time =</span> <span class="fu" style="color: #4758AB;">as.Date</span>(visit_end_date_time)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">group_by</span>(service_line) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;">summarise_by_time</span>(</span>
<span id="cb1-11">    <span class="at" style="color: #657422;">.date_var =</span> visit_end_date_time,</span>
<span id="cb1-12">    <span class="at" style="color: #657422;">.by =</span> <span class="st" style="color: #20794D;">"month"</span>,</span>
<span id="cb1-13">    <span class="at" style="color: #657422;">los =</span> <span class="fu" style="color: #4758AB;">mean</span>(length_of_stay)</span>
<span id="cb1-14">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-15">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="fu" style="color: #4758AB;">glimpse</span>(ts_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2,148
Columns: 3
$ service_line        &lt;chr&gt; "Alcohol Abuse", "Alcohol Abuse", "Alcohol Abuse",…
$ visit_end_date_time &lt;date&gt; 2011-09-01, 2011-10-01, 2011-11-01, 2011-12-01, 2…
$ los                 &lt;dbl&gt; 3.666667, 3.181818, 4.380952, 3.464286, 3.677419, …</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(broom)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb3-4"></span>
<span id="cb3-5">glanced_models <span class="ot" style="color: #003B4F;">&lt;-</span> ts_tbl <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">nest_by</span>(service_line) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">AA =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">auto.arima</span>(data<span class="sc" style="color: #5E5E5E;">$</span>los))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">perf =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">glance</span>(AA))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(perf))</span>
<span id="cb3-10"></span>
<span id="cb3-11">glanced_models <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>data)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 23 × 7
# Groups:   service_line [23]
   service_line                  AA         sigma logLik   AIC   BIC  nobs
   &lt;chr&gt;                         &lt;list&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;
 1 Alcohol Abuse                 &lt;fr_ARIMA&gt; 2.22  -241.   493.  506.   109
 2 Bariatric Surgery For Obesity &lt;fr_ARIMA&gt; 0.609  -80.1  168.  178.    88
 3 CHF                           &lt;fr_ARIMA&gt; 0.963 -152.   309.  314.   110
 4 COPD                          &lt;fr_ARIMA&gt; 0.987 -155.   315.  320.   110
 5 CVA                           &lt;fr_ARIMA&gt; 1.50  -201.   407.  412.   110
 6 Carotid Endarterectomy        &lt;fr_ARIMA&gt; 6.27  -166.   335.  339.    51
 7 Cellulitis                    &lt;fr_ARIMA&gt; 1.07  -163.   329.  335.   110
 8 Chest Pain                    &lt;fr_ARIMA&gt; 0.848 -139.   281.  287.   110
 9 GI Hemorrhage                 &lt;fr_ARIMA&gt; 1.21  -179.   361.  366.   111
10 Joint Replacement             &lt;fr_ARIMA&gt; 1.65  -196.   396.  401.   102
# … with 13 more rows</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <category>autoarima</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-27/index.html</guid>
  <pubDate>Mon, 27 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Preppers with {healthyR.ai}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-23/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>There are many different methods that one can choose from in order to model their data. This brings with it a fundamental issue of how to prepare your data for the specified algorithm. With the [<code>{healthyR.ai}</code>] package there are many different functions in this family that will help solve this issue for some algorithms but of course not all, that would be utterly exhausting for me to do on my own.</p>
<p>In <strong>healthyR.ai</strong> I call these <em>Data Preppers</em> because they prep the data you supply to the format necessary for the algorithm to function properly.</p>
<p>Let’s take a look at one.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here we are going to use the <code>hai_c50_data_prepper(.data, .recipe_formula)</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">hai_c50_data_prepper</span>(.data, .recipe_formula)</span></code></pre></div>
</div>
<p>Here are the simple arguments:</p>
<ul>
<li><code>.data</code> - The data that you are passing to the function. Can be any type of data that is accepted by the data parameter of the recipes::recipe() function.</li>
<li><code>.recipe_formula</code> - The formula that is going to be passed. For example if you are using the iris data then the formula would most likely be something like <code>Species ~</code> .</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is a small example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR.ai)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">hai_c50_data_prepper</span>(<span class="at" style="color: #657422;">.data =</span> Titanic, <span class="at" style="color: #657422;">.recipe_formula =</span> Survived <span class="sc" style="color: #5E5E5E;">~</span> .)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Recipe

Inputs:

      role #variables
   outcome          1
 predictor          4

Operations:

Factor variables from tidyselect::vars_select_helpers$where(is.charac...</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hai_c50_data_prepper</span>(Titanic, Survived <span class="sc" style="color: #5E5E5E;">~</span> .)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">get_juiced_data</span>(rec_obj)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 32 × 5
   Class Sex    Age       n Survived
   &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt; &lt;dbl&gt; &lt;fct&gt;   
 1 1st   Male   Child     0 No      
 2 2nd   Male   Child     0 No      
 3 3rd   Male   Child    35 No      
 4 Crew  Male   Child     0 No      
 5 1st   Female Child     0 No      
 6 2nd   Female Child     0 No      
 7 3rd   Female Child    17 No      
 8 Crew  Female Child     0 No      
 9 1st   Male   Adult   118 No      
10 2nd   Male   Adult   154 No      
# … with 22 more rows</code></pre>
</div>
</div>
<p>Here are the rest of the data-preppers at the time of writing this article:</p>
<ul>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_c50_data_prepper.html">hai_c50_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_cubist_data_prepper.html">hai_cubist_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_earth_data_prepper.html">hai_earth_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_glmnet_data_prepper.html">hai_glmnet_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_knn_data_prepper.html">hai_knn_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_ranger_data_prepper.html">hai_ranger_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_svm_poly_data_prepper.html">hai_svm_poly_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_svm_rbf_data_prepper.html">hai_svm_rbf_data_prepper()</a></li>
<li><a href="https://www.spsanderson.com/healthyR.ai/reference/hai_xgboost_data_prepper.html">hai_xgboost_data_prepper()</a></li>
</ul>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrai</category>
  <category>preprocessor</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-23/index.html</guid>
  <pubDate>Fri, 24 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Calibrate and Plot a Time Series with {healthyR.ts}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In time series analysis, it is common to split the data into training and testing sets to evaluate the accuracy of a model. However, it is important to ensure that the model is calibrated on the training set before evaluating its performance on the testing set. The <a href="https://www.spsanderson.com/healthyR.ts/"><code>{healthyR.ts}</code></a> library provides a function called <a href="https://www.spsanderson.com/healthyR.ts/reference/calibrate_and_plot.html"><code>calibrate_and_plot()</code></a> that simplifies this process.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the full function call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">calibrate_and_plot</span>(</span>
<span id="cb1-2">  ...,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">.type =</span> <span class="st" style="color: #20794D;">"testing"</span>,</span>
<span id="cb1-4">  .splits_obj,</span>
<span id="cb1-5">  .data,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">.print_info =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">.interactive =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<p>Here are the arguments to the parameters:</p>
<ul>
<li><code>...</code> - The workflow(s) you want to add to the function.</li>
<li><code>.type</code> - Either the training(splits) or testing(splits) data.</li>
<li><code>.splits_obj</code> - The splits object.</li>
<li><code>.data</code> - The full data set.</li>
<li><code>.print_info</code> - The default is TRUE and will print out the calibration accuracy tibble and the resulting plotly plot.</li>
<li><code>.interactive</code> - The defaults is FALSE. This controls if a forecast plot is interactive or not via plotly.</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>By default, <code>calibrate_and_plot()</code> will print out a calibration accuracy tibble and a resulting plotly plot. This can be controlled with the print_info argument, which is set to TRUE by default. If you prefer a non-interactive forecast plot, you can set the interactive argument to FALSE.</p>
<p>Here’s an example of how to use the <code>calibrate_and_plot()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR.ts)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(timetk)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(parsnip)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">library</span>(workflows)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;"># Get the Data</span></span>
<span id="cb2-10">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ts_to_tbl</span>(AirPassengers) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>index)</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;"># Split the data into training and testing sets</span></span>
<span id="cb2-14">splits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">time_series_split</span>(</span>
<span id="cb2-15">   data</span>
<span id="cb2-16">  , date_col</span>
<span id="cb2-17">  , <span class="at" style="color: #657422;">assess =</span> <span class="dv" style="color: #AD0000;">12</span></span>
<span id="cb2-18">  , <span class="at" style="color: #657422;">skip =</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb2-19">  , <span class="at" style="color: #657422;">cumulative =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb2-20">)</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;"># Make the recipe object</span></span>
<span id="cb2-23">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(value <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">training</span>(splits))</span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;"># Make the Model</span></span>
<span id="cb2-26">model_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>(</span>
<span id="cb2-27">   <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"regression"</span></span>
<span id="cb2-28">   , <span class="at" style="color: #657422;">penalty =</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb2-29">   , <span class="at" style="color: #657422;">mixture =</span> <span class="fl" style="color: #AD0000;">0.5</span></span>
<span id="cb2-30">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-31">   <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"lm"</span>)</span>
<span id="cb2-32"></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;"># Make the workflow object</span></span>
<span id="cb2-34">wflw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-35">   <span class="fu" style="color: #4758AB;">add_recipe</span>(rec_obj) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-36">   <span class="fu" style="color: #4758AB;">add_model</span>(model_spec) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-37">   <span class="fu" style="color: #4758AB;">fit</span>(<span class="fu" style="color: #4758AB;">training</span>(splits))</span>
<span id="cb2-38"></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;"># Get our output</span></span>
<span id="cb2-40">output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">calibrate_and_plot</span>(</span>
<span id="cb2-41">  wflw</span>
<span id="cb2-42">  , <span class="at" style="color: #657422;">.type =</span> <span class="st" style="color: #20794D;">"training"</span></span>
<span id="cb2-43">  , <span class="at" style="color: #657422;">.splits_obj =</span> splits</span>
<span id="cb2-44">  , <span class="at" style="color: #657422;">.data =</span> data</span>
<span id="cb2-45">  , <span class="at" style="color: #657422;">.print_info =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb2-46">  , <span class="at" style="color: #657422;">.interactive =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb2-47"> )</span></code></pre></div>
</div>
<p>The resulting output will include a calibration accuracy tibble and a plotly plot showing the original time series data along with the fitted values for the training set.</p>
<p>Let’s take a look at the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">output<span class="sc" style="color: #5E5E5E;">$</span>calibration_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># Modeltime Table
# A tibble: 1 × 5
  .model_id .model     .model_desc .type .calibration_data 
      &lt;int&gt; &lt;list&gt;     &lt;chr&gt;       &lt;chr&gt; &lt;list&gt;            
1         1 &lt;workflow&gt; LM          Test  &lt;tibble [132 × 4]&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">output<span class="sc" style="color: #5E5E5E;">$</span>model_accuracy</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 9
  .model_id .model_desc .type   mae  mape  mase smape  rmse   rsq
      &lt;int&gt; &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1         1 LM          Test   31.4  12.0  1.31  11.9  41.7 0.846</code></pre>
</div>
</div>
<p>And…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">output<span class="sc" style="color: #5E5E5E;">$</span>plot</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item-overflow-hidden html-fill-item" id="htmlwidget-c3aa97bc77e43571b46c" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-c3aa97bc77e43571b46c">{"x":{"data":[{"x":["1949-01-01","1949-02-01","1949-03-01","1949-04-01","1949-05-01","1949-06-01","1949-07-01","1949-08-01","1949-09-01","1949-10-01","1949-11-01","1949-12-01","1950-01-01","1950-02-01","1950-03-01","1950-04-01","1950-05-01","1950-06-01","1950-07-01","1950-08-01","1950-09-01","1950-10-01","1950-11-01","1950-12-01","1951-01-01","1951-02-01","1951-03-01","1951-04-01","1951-05-01","1951-06-01","1951-07-01","1951-08-01","1951-09-01","1951-10-01","1951-11-01","1951-12-01","1952-01-01","1952-02-01","1952-03-01","1952-04-01","1952-05-01","1952-06-01","1952-07-01","1952-08-01","1952-09-01","1952-10-01","1952-11-01","1952-12-01","1953-01-01","1953-02-01","1953-03-01","1953-04-01","1953-05-01","1953-06-01","1953-07-01","1953-08-01","1953-09-01","1953-10-01","1953-11-01","1953-12-01","1954-01-01","1954-02-01","1954-03-01","1954-04-01","1954-05-01","1954-06-01","1954-07-01","1954-08-01","1954-09-01","1954-10-01","1954-11-01","1954-12-01","1955-01-01","1955-02-01","1955-03-01","1955-04-01","1955-05-01","1955-06-01","1955-07-01","1955-08-01","1955-09-01","1955-10-01","1955-11-01","1955-12-01","1956-01-01","1956-02-01","1956-03-01","1956-04-01","1956-05-01","1956-06-01","1956-07-01","1956-08-01","1956-09-01","1956-10-01","1956-11-01","1956-12-01","1957-01-01","1957-02-01","1957-03-01","1957-04-01","1957-05-01","1957-06-01","1957-07-01","1957-08-01","1957-09-01","1957-10-01","1957-11-01","1957-12-01","1958-01-01","1958-02-01","1958-03-01","1958-04-01","1958-05-01","1958-06-01","1958-07-01","1958-08-01","1958-09-01","1958-10-01","1958-11-01","1958-12-01","1959-01-01","1959-02-01","1959-03-01","1959-04-01","1959-05-01","1959-06-01","1959-07-01","1959-08-01","1959-09-01","1959-10-01","1959-11-01","1959-12-01","1960-01-01","1960-02-01","1960-03-01","1960-04-01","1960-05-01","1960-06-01","1960-07-01","1960-08-01","1960-09-01","1960-10-01","1960-11-01","1960-12-01"],"y":[112,118,132,129,121,135,148,148,136,119,104,118,115,126,141,135,125,149,170,170,158,133,114,140,145,150,178,163,172,178,199,199,184,162,146,166,171,180,193,181,183,218,230,242,209,191,172,194,196,196,236,235,229,243,264,272,237,211,180,201,204,188,235,227,234,264,302,293,259,229,203,229,242,233,267,269,270,315,364,347,312,274,237,278,284,277,317,313,318,374,413,405,355,306,271,306,315,301,356,348,355,422,465,467,404,347,305,336,340,318,362,348,363,435,491,505,404,359,310,337,360,342,406,396,420,472,548,559,463,407,362,405,417,391,419,461,472,535,622,606,508,461,390,432],"text":[".index: 1949-01-01<br />.value: 112.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-02-01<br />.value: 118.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-03-01<br />.value: 132.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-04-01<br />.value: 129.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-05-01<br />.value: 121.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-06-01<br />.value: 135.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-07-01<br />.value: 148.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-08-01<br />.value: 148.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-09-01<br />.value: 136.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-10-01<br />.value: 119.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-11-01<br />.value: 104.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1949-12-01<br />.value: 118.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-01-01<br />.value: 115.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-02-01<br />.value: 126.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-03-01<br />.value: 141.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-04-01<br />.value: 135.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-05-01<br />.value: 125.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-06-01<br />.value: 149.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-07-01<br />.value: 170.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-08-01<br />.value: 170.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-09-01<br />.value: 158.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-10-01<br />.value: 133.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-11-01<br />.value: 114.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1950-12-01<br />.value: 140.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-01-01<br />.value: 145.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-02-01<br />.value: 150.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-03-01<br />.value: 178.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-04-01<br />.value: 163.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-05-01<br />.value: 172.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-06-01<br />.value: 178.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-07-01<br />.value: 199.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-08-01<br />.value: 199.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-09-01<br />.value: 184.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-10-01<br />.value: 162.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-11-01<br />.value: 146.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1951-12-01<br />.value: 166.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-01-01<br />.value: 171.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-02-01<br />.value: 180.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-03-01<br />.value: 193.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-04-01<br />.value: 181.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-05-01<br />.value: 183.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-06-01<br />.value: 218.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-07-01<br />.value: 230.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-08-01<br />.value: 242.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-09-01<br />.value: 209.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-10-01<br />.value: 191.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-11-01<br />.value: 172.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1952-12-01<br />.value: 194.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-01-01<br />.value: 196.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-02-01<br />.value: 196.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-03-01<br />.value: 236.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-04-01<br />.value: 235.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-05-01<br />.value: 229.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-06-01<br />.value: 243.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-07-01<br />.value: 264.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-08-01<br />.value: 272.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-09-01<br />.value: 237.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-10-01<br />.value: 211.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-11-01<br />.value: 180.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1953-12-01<br />.value: 201.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-01-01<br />.value: 204.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-02-01<br />.value: 188.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-03-01<br />.value: 235.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-04-01<br />.value: 227.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-05-01<br />.value: 234.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-06-01<br />.value: 264.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-07-01<br />.value: 302.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-08-01<br />.value: 293.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-09-01<br />.value: 259.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-10-01<br />.value: 229.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-11-01<br />.value: 203.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1954-12-01<br />.value: 229.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-01-01<br />.value: 242.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-02-01<br />.value: 233.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-03-01<br />.value: 267.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-04-01<br />.value: 269.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-05-01<br />.value: 270.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-06-01<br />.value: 315.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-07-01<br />.value: 364.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-08-01<br />.value: 347.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-09-01<br />.value: 312.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-10-01<br />.value: 274.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-11-01<br />.value: 237.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1955-12-01<br />.value: 278.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-01-01<br />.value: 284.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-02-01<br />.value: 277.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-03-01<br />.value: 317.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-04-01<br />.value: 313.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-05-01<br />.value: 318.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-06-01<br />.value: 374.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-07-01<br />.value: 413.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-08-01<br />.value: 405.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-09-01<br />.value: 355.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-10-01<br />.value: 306.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-11-01<br />.value: 271.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1956-12-01<br />.value: 306.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-01-01<br />.value: 315.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-02-01<br />.value: 301.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-03-01<br />.value: 356.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-04-01<br />.value: 348.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-05-01<br />.value: 355.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-06-01<br />.value: 422.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-07-01<br />.value: 465.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-08-01<br />.value: 467.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-09-01<br />.value: 404.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-10-01<br />.value: 347.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-11-01<br />.value: 305.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1957-12-01<br />.value: 336.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-01-01<br />.value: 340.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-02-01<br />.value: 318.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-03-01<br />.value: 362.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-04-01<br />.value: 348.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-05-01<br />.value: 363.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-06-01<br />.value: 435.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-07-01<br />.value: 491.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-08-01<br />.value: 505.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-09-01<br />.value: 404.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-10-01<br />.value: 359.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-11-01<br />.value: 310.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1958-12-01<br />.value: 337.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-01-01<br />.value: 360.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-02-01<br />.value: 342.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-03-01<br />.value: 406.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-04-01<br />.value: 396.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-05-01<br />.value: 420.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-06-01<br />.value: 472.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-07-01<br />.value: 548.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-08-01<br />.value: 559.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-09-01<br />.value: 463.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-10-01<br />.value: 407.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-11-01<br />.value: 362.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1959-12-01<br />.value: 405.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-01-01<br />.value: 417.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-02-01<br />.value: 391.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-03-01<br />.value: 419.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-04-01<br />.value: 461.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-05-01<br />.value: 472.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-06-01<br />.value: 535.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-07-01<br />.value: 622.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-08-01<br />.value: 606.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-09-01<br />.value: 508.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-10-01<br />.value: 461.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-11-01<br />.value: 390.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL",".index: 1960-12-01<br />.value: 432.00000<br />.color_mod: ACTUAL<br />.color_mod: ACTUAL"],"type":"scatter","mode":"lines","line":{"width":1.88976377952756,"color":"rgba(44,62,80,1)","dash":"solid"},"hoveron":"points","name":"ACTUAL","legendgroup":"ACTUAL","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":["1949-01-01","1949-02-01","1949-03-01","1949-04-01","1949-05-01","1949-06-01","1949-07-01","1949-08-01","1949-09-01","1949-10-01","1949-11-01","1949-12-01","1950-01-01","1950-02-01","1950-03-01","1950-04-01","1950-05-01","1950-06-01","1950-07-01","1950-08-01","1950-09-01","1950-10-01","1950-11-01","1950-12-01","1951-01-01","1951-02-01","1951-03-01","1951-04-01","1951-05-01","1951-06-01","1951-07-01","1951-08-01","1951-09-01","1951-10-01","1951-11-01","1951-12-01","1952-01-01","1952-02-01","1952-03-01","1952-04-01","1952-05-01","1952-06-01","1952-07-01","1952-08-01","1952-09-01","1952-10-01","1952-11-01","1952-12-01","1953-01-01","1953-02-01","1953-03-01","1953-04-01","1953-05-01","1953-06-01","1953-07-01","1953-08-01","1953-09-01","1953-10-01","1953-11-01","1953-12-01","1954-01-01","1954-02-01","1954-03-01","1954-04-01","1954-05-01","1954-06-01","1954-07-01","1954-08-01","1954-09-01","1954-10-01","1954-11-01","1954-12-01","1955-01-01","1955-02-01","1955-03-01","1955-04-01","1955-05-01","1955-06-01","1955-07-01","1955-08-01","1955-09-01","1955-10-01","1955-11-01","1955-12-01","1956-01-01","1956-02-01","1956-03-01","1956-04-01","1956-05-01","1956-06-01","1956-07-01","1956-08-01","1956-09-01","1956-10-01","1956-11-01","1956-12-01","1957-01-01","1957-02-01","1957-03-01","1957-04-01","1957-05-01","1957-06-01","1957-07-01","1957-08-01","1957-09-01","1957-10-01","1957-11-01","1957-12-01","1958-01-01","1958-02-01","1958-03-01","1958-04-01","1958-05-01","1958-06-01","1958-07-01","1958-08-01","1958-09-01","1958-10-01","1958-11-01","1958-12-01","1959-01-01","1959-02-01","1959-03-01","1959-04-01","1959-05-01","1959-06-01","1959-07-01","1959-08-01","1959-09-01","1959-10-01","1959-11-01","1959-12-01"],"y":[94.6717960311422,97.2827276428212,99.6409884533699,102.251920065049,104.778628076351,107.38955968803,109.916267699332,112.527199311011,115.13813092269,117.664838933992,120.275770545671,122.802478556973,125.413410168652,128.024341780331,130.38260259088,132.993534202559,135.520242213861,138.13117382554,140.657881836842,143.268813448521,145.8797450602,148.406453071502,151.017384683181,153.544092694483,156.155024306162,158.765955917841,161.12421672839,163.735148340068,166.261856351371,168.87278796305,171.399495974352,174.010427586031,176.62135919771,179.148067209012,181.758998820691,184.285706831993,186.896638443672,189.507570055351,191.950054466276,194.560986077955,197.087694089257,199.698625700936,202.225333712238,204.836265323917,207.447196935596,209.973904946898,212.584836558577,215.111544569879,217.722476181558,220.333407793237,222.691668603786,225.302600215465,227.829308226767,230.440239838446,232.966947849748,235.577879461427,238.188811073106,240.715519084408,243.326450696087,245.853158707389,248.464090319068,251.075021930747,253.433282741296,256.044214352975,258.570922364277,261.181853975956,263.708561987258,266.319493598937,268.930425210616,271.457133221918,274.068064833597,276.594772844899,279.205704456578,281.816636068257,284.174896878806,286.785828490485,289.312536501787,291.923468113466,294.450176124768,297.061107736447,299.672039348126,302.198747359428,304.809678971107,307.336386982409,309.947318594088,312.558250205767,315.000734616692,317.611666228371,320.138374239673,322.749305851352,325.276013862655,327.886945474333,330.497877086012,333.024585097315,335.635516708993,338.162224720296,340.773156331975,343.384087943653,345.742348754202,348.353280365881,350.879988377183,353.490919988862,356.017628000164,358.628559611843,361.239491223522,363.766199234824,366.377130846503,368.903838857805,371.514770469484,374.125702081163,376.483962891712,379.094894503391,381.621602514693,384.232534126372,386.759242137674,389.370173749353,391.981105361032,394.507813372334,397.118744984013,399.645452995315,402.256384606994,404.867316218673,407.225577029222,409.836508640901,412.363216652203,414.974148263882,417.500856275184,420.111787886863,422.722719498542,425.249427509844,427.860359121523,430.387067132825],"text":[".index: 1949-01-01<br />.value:  94.67180<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-02-01<br />.value:  97.28273<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-03-01<br />.value:  99.64099<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-04-01<br />.value: 102.25192<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-05-01<br />.value: 104.77863<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-06-01<br />.value: 107.38956<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-07-01<br />.value: 109.91627<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-08-01<br />.value: 112.52720<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-09-01<br />.value: 115.13813<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-10-01<br />.value: 117.66484<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-11-01<br />.value: 120.27577<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1949-12-01<br />.value: 122.80248<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-01-01<br />.value: 125.41341<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-02-01<br />.value: 128.02434<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-03-01<br />.value: 130.38260<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-04-01<br />.value: 132.99353<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-05-01<br />.value: 135.52024<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-06-01<br />.value: 138.13117<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-07-01<br />.value: 140.65788<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-08-01<br />.value: 143.26881<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-09-01<br />.value: 145.87975<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-10-01<br />.value: 148.40645<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-11-01<br />.value: 151.01738<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1950-12-01<br />.value: 153.54409<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-01-01<br />.value: 156.15502<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-02-01<br />.value: 158.76596<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-03-01<br />.value: 161.12422<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-04-01<br />.value: 163.73515<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-05-01<br />.value: 166.26186<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-06-01<br />.value: 168.87279<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-07-01<br />.value: 171.39950<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-08-01<br />.value: 174.01043<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-09-01<br />.value: 176.62136<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-10-01<br />.value: 179.14807<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-11-01<br />.value: 181.75900<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1951-12-01<br />.value: 184.28571<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-01-01<br />.value: 186.89664<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-02-01<br />.value: 189.50757<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-03-01<br />.value: 191.95005<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-04-01<br />.value: 194.56099<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-05-01<br />.value: 197.08769<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-06-01<br />.value: 199.69863<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-07-01<br />.value: 202.22533<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-08-01<br />.value: 204.83627<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-09-01<br />.value: 207.44720<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-10-01<br />.value: 209.97390<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-11-01<br />.value: 212.58484<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1952-12-01<br />.value: 215.11154<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-01-01<br />.value: 217.72248<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-02-01<br />.value: 220.33341<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-03-01<br />.value: 222.69167<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-04-01<br />.value: 225.30260<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-05-01<br />.value: 227.82931<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-06-01<br />.value: 230.44024<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-07-01<br />.value: 232.96695<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-08-01<br />.value: 235.57788<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-09-01<br />.value: 238.18881<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-10-01<br />.value: 240.71552<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-11-01<br />.value: 243.32645<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1953-12-01<br />.value: 245.85316<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-01-01<br />.value: 248.46409<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-02-01<br />.value: 251.07502<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-03-01<br />.value: 253.43328<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-04-01<br />.value: 256.04421<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-05-01<br />.value: 258.57092<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-06-01<br />.value: 261.18185<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-07-01<br />.value: 263.70856<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-08-01<br />.value: 266.31949<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-09-01<br />.value: 268.93043<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-10-01<br />.value: 271.45713<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-11-01<br />.value: 274.06806<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1954-12-01<br />.value: 276.59477<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-01-01<br />.value: 279.20570<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-02-01<br />.value: 281.81664<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-03-01<br />.value: 284.17490<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-04-01<br />.value: 286.78583<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-05-01<br />.value: 289.31254<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-06-01<br />.value: 291.92347<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-07-01<br />.value: 294.45018<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-08-01<br />.value: 297.06111<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-09-01<br />.value: 299.67204<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-10-01<br />.value: 302.19875<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-11-01<br />.value: 304.80968<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1955-12-01<br />.value: 307.33639<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-01-01<br />.value: 309.94732<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-02-01<br />.value: 312.55825<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-03-01<br />.value: 315.00073<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-04-01<br />.value: 317.61167<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-05-01<br />.value: 320.13837<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-06-01<br />.value: 322.74931<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-07-01<br />.value: 325.27601<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-08-01<br />.value: 327.88695<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-09-01<br />.value: 330.49788<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-10-01<br />.value: 333.02459<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-11-01<br />.value: 335.63552<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1956-12-01<br />.value: 338.16222<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-01-01<br />.value: 340.77316<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-02-01<br />.value: 343.38409<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-03-01<br />.value: 345.74235<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-04-01<br />.value: 348.35328<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-05-01<br />.value: 350.87999<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-06-01<br />.value: 353.49092<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-07-01<br />.value: 356.01763<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-08-01<br />.value: 358.62856<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-09-01<br />.value: 361.23949<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-10-01<br />.value: 363.76620<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-11-01<br />.value: 366.37713<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1957-12-01<br />.value: 368.90384<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-01-01<br />.value: 371.51477<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-02-01<br />.value: 374.12570<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-03-01<br />.value: 376.48396<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-04-01<br />.value: 379.09489<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-05-01<br />.value: 381.62160<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-06-01<br />.value: 384.23253<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-07-01<br />.value: 386.75924<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-08-01<br />.value: 389.37017<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-09-01<br />.value: 391.98111<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-10-01<br />.value: 394.50781<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-11-01<br />.value: 397.11874<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1958-12-01<br />.value: 399.64545<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-01-01<br />.value: 402.25638<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-02-01<br />.value: 404.86732<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-03-01<br />.value: 407.22558<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-04-01<br />.value: 409.83651<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-05-01<br />.value: 412.36322<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-06-01<br />.value: 414.97415<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-07-01<br />.value: 417.50086<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-08-01<br />.value: 420.11179<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-09-01<br />.value: 422.72272<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-10-01<br />.value: 425.24943<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-11-01<br />.value: 427.86036<br />.color_mod: 1_LM<br />.color_mod: 1_LM",".index: 1959-12-01<br />.value: 430.38707<br />.color_mod: 1_LM<br />.color_mod: 1_LM"],"type":"scatter","mode":"lines","line":{"width":1.88976377952756,"color":"rgba(227,26,28,1)","dash":"solid"},"hoveron":"points","name":"1_LM","legendgroup":"1_LM","showlegend":true,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":43.7625570776256,"r":7.30593607305936,"b":25.5707762557078,"l":28.4931506849315},"plot_bgcolor":"rgba(255,255,255,1)","paper_bgcolor":"rgba(255,255,255,1)","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187},"title":{"text":"Forecast Plot","font":{"color":"rgba(44,62,80,1)","family":"","size":17.5342465753425},"x":0,"xref":"paper"},"xaxis":{"domain":[0,1],"automargin":true,"type":"date","autorange":true,"range":["1948-05-28","1961-07-06"],"tickmode":"auto","ticktext":["1950","1955","1960"],"tickvals":[-7305,-5479,-3653],"categoryorder":"array","categoryarray":["1950","1955","1960"],"nticks":null,"ticks":"outside","tickcolor":"rgba(204,204,204,1)","ticklen":3.65296803652968,"tickwidth":0.22139200221392,"showticklabels":true,"tickfont":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(204,204,204,1)","gridwidth":0.22139200221392,"zeroline":false,"anchor":"y","title":{"text":"","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":true,"range":[68.3053858326993,648.366410198443],"tickmode":"auto","ticktext":["200","400","600"],"tickvals":[200,400,600],"categoryorder":"array","categoryarray":["200","400","600"],"nticks":null,"ticks":"outside","tickcolor":"rgba(204,204,204,1)","ticklen":3.65296803652968,"tickwidth":0.22139200221392,"showticklabels":true,"tickfont":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(204,204,204,1)","gridwidth":0.22139200221392,"zeroline":false,"anchor":"x","title":{"text":"","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":"transparent","line":{"color":"rgba(44,62,80,1)","width":0.33208800332088,"linetype":"solid"},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":true,"legend":{"bgcolor":"rgba(255,255,255,1)","bordercolor":"transparent","borderwidth":1.88976377952756,"font":{"color":"rgba(44,62,80,1)","family":"","size":11.689497716895},"title":{"text":"Legend","font":{"color":"rgba(44,62,80,1)","family":"","size":14.6118721461187}}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"5d085039619e":{"x":{},"y":{},"colour":{},"type":"scatter"}},"cur_data":"5d085039619e","visdat":{"5d085039619e":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Overall, the calibrate_and_plot() function is a useful tool for simplifying the process of calibrating time series models on a training set and evaluating their performance on a testing set.</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrts</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-22/index.html</guid>
  <pubDate>Wed, 22 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Converting a {tidyAML} tibble to a {workflowsets}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-17/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> package is an R package that provides a set of tools for building regression/classification models on the fly with minimal input required. In this post we will discuss the <a href="https://www.spsanderson.com/tidyAML/reference/create_workflow_set.html"><code>create_workflow_set()</code></a> function.</p>
<p>The <code>create_workflow_set</code> function is a function in the <code>tidyAML</code> package that is used to create a <code>workflowset</code> object from the <code>workflowsets</code> package. A workflow is a sequence of tasks that can be executed in a specific order, and is often used in data analysis and machine learning to automate data processing and model fitting. The <code>create_workflow_set</code> function takes as input a YAML specification of a set of workflows, and returns a list of workflow objects that can be executed using the <code>tidymodels</code> package and its associated packages.</p>
<p>The <code>create_workflow_set</code> function is particularly useful when working with the <code>tidymodels</code> package and the <code>parsnip</code> framework. The <code>tidymodels</code> package is a collection of packages for modeling and machine learning in R that provides a consistent interface for building, tuning, and evaluating machine learning models. The parsnip package is part of the <code>tidymodels</code> ecosystem and provides a way to specify a wide range of models in a consistent manner.</p>
<section id="using-the-create_workflow_set-function-with-tidymodels-and-parsnip" class="level2">
<h2 class="anchored" data-anchor-id="using-the-create_workflow_set-function-with-tidymodels-and-parsnip">Using the create_workflow_set function with tidymodels and parsnip</h2>
<p>To use the <code>create_workflow_set</code> function with <code>tidymodels</code> and<code>parsnip</code>, you will need to provide a recipe or recipes as a list to the <strong>.recipe_list</strong> parameter and a model_spec tibble that you would get from something like <code>fast_regression_parsnip_spec_tbl()</code>, other classes will be supported in the future.</p>
<p>The reason this was done was because I did not want to force users to remain inside of <code>tidyAML</code> perhaps and most likely there are other packages out there that are more suited to an end users specific problem at hand.</p>
</section>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Let’s take a look at the function and it’s arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">create_workflow_set</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">.model_tbl =</span> <span class="cn" style="color: #8f5902;">NULL</span>, </span>
<span id="cb1-3">  <span class="at" style="color: #657422;">.recipe_list =</span> <span class="fu" style="color: #4758AB;">list</span>(), </span>
<span id="cb1-4">  <span class="at" style="color: #657422;">.cross =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb1-5">)</span></code></pre></div>
</div>
<ul>
<li><code>.model_tbl</code> - The model table that is generated from a function like <code>fast_regression_parsnip_spec_tbl()</code>. The model spec column will be grabbed automatically as the class of the object must be <code>tidyaml_base_tbl</code></li>
<li><code>.recipe_list</code> - Provide a list of recipes here that will get added to the workflow set object.</li>
<li><code>.cross</code> - The default is TRUE, can be set to FALSE. This is passed to the cross parameter as an argument to the workflow_set() function.</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is a simple example. Remember you really only want to use this if you have a model_spec tibble not a tibble with workflows that have already been fit.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-3"></span>
<span id="cb2-4">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb2-5">spec_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression_parsnip_spec_tbl</span>(</span>
<span id="cb2-6">  <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="st" style="color: #20794D;">"linear_reg"</span>,</span>
<span id="cb2-7">  <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>,<span class="st" style="color: #20794D;">"glm"</span>)</span>
<span id="cb2-8">)</span>
<span id="cb2-9"></span>
<span id="cb2-10">wfs_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">create_workflow_set</span>(</span>
<span id="cb2-11">  spec_tbl,</span>
<span id="cb2-12">  <span class="fu" style="color: #4758AB;">list</span>(rec_obj)</span>
<span id="cb2-13">)</span></code></pre></div>
</div>
<p>Now let’s inspect.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb3-2"></span>
<span id="cb3-3">wfs_tbl <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A workflow set/tibble: 1 × 4
  wflow_id            info             option    result    
  &lt;chr&gt;               &lt;list&gt;           &lt;list&gt;    &lt;list&gt;    
1 recipe_linear_reg_1 &lt;tibble [1 × 4]&gt; &lt;opts[0]&gt; &lt;list [0]&gt;</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">class</span>(wfs_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "workflow_set" "tbl_df"       "tbl"          "data.frame"  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">wfs_tbl<span class="sc" style="color: #5E5E5E;">$</span>info</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 1 × 4
  workflow   preproc model      comment
  &lt;list&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;  
1 &lt;workflow&gt; recipe  linear_reg ""     

[[2]]
# A tibble: 1 × 4
  workflow   preproc model      comment
  &lt;list&gt;     &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;  
1 &lt;workflow&gt; recipe  linear_reg ""     </code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">wfs_tbl<span class="sc" style="color: #5E5E5E;">$</span>info[[<span class="dv" style="color: #AD0000;">1</span>]]<span class="sc" style="color: #5E5E5E;">$</span>workflow[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <category>workflowsets</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-17/index.html</guid>
  <pubDate>Fri, 17 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Officially on CRAN {tidyAML}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’m excited to announce that the R package {tidyAML} is now officially available on CRAN! This package is designed to make it easy for users to perform automated machine learning (AutoML) using the tidymodels ecosystem. With a simple and intuitive interface, tidyAML allows users to quickly generate high-quality machine learning models without worrying about the underlying details.</p>
<p>One of the key features of tidyAML is its ability to generate regression models on the fly, without the need to build a full specification or tune hyper-parameters. This makes it ideal for users who want to quickly build a machine learning model without spending a lot of time on the setup process.</p>
<p>tidyAML is also designed to be easy to use, with a set of functions that are straightforward and can generate many models and predictions at once. And because it’s built on top of the tidymodels ecosystem, users don’t need to worry about setting up additional packages or dependencies.</p>
<p>We’re also happy to announce that tidyAML will be added to the R package {healthyverse} and pushed to CRAN this week. This means that users who install {healthyverse} will automatically get access to tidyAML, as well as other popular packages like ggplot2, dplyr, and tidyr.</p>
<p>Whether you’re a beginner or an experienced machine learning practitioner, tidyAML is a powerful tool that can help you quickly generate high-quality models with minimal setup. We hope you’ll give it a try and let us know what you think!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-16/index.html</guid>
  <pubDate>Thu, 16 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Moving Average Plots with {healthyR.ts}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-15/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you interested in visualizing time series data in a clear and concise way? The R package <a href="https://www.spsanderson.com/healthyR.ts/"><code>{healthyR.ts}</code></a> provides a variety of tools for time series analysis and visualization, including the <strong>ts_ma_plot()</strong> function.</p>
<p>The <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_ma_plot.html"><code>ts_ma_plot()</code></a> function is designed to help you quickly and easily create moving average plots for time series data. This function takes several arguments, including the data you want to visualize, the date column from your data, the value column from your data, and the frequency of the aggregation.</p>
<p>One of the great features of ts_ma_plot() is that it can handle both weekly and monthly data frequencies, making it a flexible tool for analyzing a variety of time series data. If you pass in a frequency other than “weekly” or “monthly”, the function will default to weekly, so it’s important to ensure that your data is aggregated at the appropriate frequency.</p>
<p>With ts_ma_plot(), you can create a variety of plots to help you better understand your time series data. The function allows you to add up to three different titles to your plot, helping you to organize and communicate your findings effectively. The main_title argument sets the title for the main plot, while the secondary_title and tertiary_title arguments set the titles for the second and third plots, respectively.</p>
<p>If you’re interested in using ts_ma_plot() for your own time series data, you’ll first need to preprocess your data so that it’s in the appropriate format for this function. Once you’ve done that, though, ts_ma_plot() can help you to quickly identify trends and patterns in your data that might not be immediately apparent from a raw data set.</p>
<p>In summary, ts_ma_plot() is a powerful and flexible tool for visualizing time series data. Whether you’re working with weekly or monthly data, this function can help you to quickly and easily create moving average plots that can help you to better understand your data. If you’re interested in time series analysis, be sure to check out {healthyR.ts} and give ts_ma_plot() a try!</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the full function call.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">ts_ma_plot</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .date_col,</span>
<span id="cb1-4">  .value_col,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;">.ts_frequency =</span> <span class="st" style="color: #20794D;">"monthly"</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">.main_title =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">.secondary_title =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">.tertiary_title =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb1-9">)</span></code></pre></div>
</div>
<p>Now for the arguments to the parameters.</p>
<ul>
<li><code>.data</code>: the data you want to visualize, which should be pre-processed and the aggregation should match the .frequency argument.</li>
<li><code>.date_col</code>: the data column from the .data argument that contains the dates for your time series.</li>
<li><code>.value_col</code>: the data column from the .data argument that contains the values for your time series.</li>
<li><code>.ts_frequency</code>: the frequency of the aggregation, which should be quoted as “weekly” or “monthly”. If not specified, the function defaults to weekly.</li>
<li><code>.main_title</code>: the title of the main plot.</li>
<li><code>.secondary_title</code>: the title of the second plot.</li>
<li><code>.tertiary_title</code>: the title of the third plot.</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Now for an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR.ts)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"></span>
<span id="cb2-4">data_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ts_to_tbl</span>(AirPassengers) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>index)</span>
<span id="cb2-6"></span>
<span id="cb2-7">output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ts_ma_plot</span>(</span>
<span id="cb2-8">  <span class="at" style="color: #657422;">.data =</span> data_tbl,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;">.date_col =</span> date_col,</span>
<span id="cb2-10">  <span class="at" style="color: #657422;">.value_col =</span> value</span>
<span id="cb2-11">)</span></code></pre></div>
</div>
<p>Let’s take a look at each piece of the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">output<span class="sc" style="color: #5E5E5E;">$</span>data_trans_xts <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           value ma12
1949-01-01   112   NA
1949-02-01   118   NA
1949-03-01   132   NA
1949-04-01   129   NA
1949-05-01   121   NA
1949-06-01   135   NA</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">output<span class="sc" style="color: #5E5E5E;">$</span>data_diff_xts_a <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              diff_a
1949-01-01        NA
1949-02-01  5.357143
1949-03-01 11.864407
1949-04-01 -2.272727
1949-05-01 -6.201550
1949-06-01 11.570248</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">output<span class="sc" style="color: #5E5E5E;">$</span>data_diff_xts_b <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           diff_b
1949-01-01     NA
1949-02-01     NA
1949-03-01     NA
1949-04-01     NA
1949-05-01     NA
1949-06-01     NA</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">output<span class="sc" style="color: #5E5E5E;">$</span>data_summary_tbl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 144 × 5
   date_col   value  ma12 diff_a diff_b
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;
 1 1949-01-01   112    NA   0         0
 2 1949-02-01   118    NA   5.36      0
 3 1949-03-01   132    NA  11.9       0
 4 1949-04-01   129    NA  -2.27      0
 5 1949-05-01   121    NA  -6.20      0
 6 1949-06-01   135    NA  11.6       0
 7 1949-07-01   148    NA   9.63      0
 8 1949-08-01   148    NA   0         0
 9 1949-09-01   136    NA  -8.11      0
10 1949-10-01   119    NA -12.5       0
# … with 134 more rows</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">output<span class="sc" style="color: #5E5E5E;">$</span>pgrid</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-15/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">output<span class="sc" style="color: #5E5E5E;">$</span>xts_plt</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-15/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>timeseries</category>
  <category>healthyrts</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-15/index.html</guid>
  <pubDate>Wed, 15 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>An example of using {box}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-14/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today I am going to make a short post on the R package <a href="https://klmr.me/box/"><code>{box}</code></a> which was showcased to me quite nicely by <a href="https://www.linkedin.com/in/milesmichaeld/"><strong>Michael Miles</strong></a>. It was informative and I was able to immediately see the usefulness of the <code>{box}</code> library.</p>
<p>So what is ‘box’? Well here is the description straight from their site:</p>
<blockquote class="blockquote">
<p>‘box’ allows organising R code in a more modular way, via two mechanisms:</p>
<ul>
<li>It enables writing modular code by treating files and folders of R code as independent (potentially nested) modules, without requiring the user to wrap reusable code into packages.</li>
<li>It provides a new syntax to import reusable code (both from packages and from modules) which is more powerful and less error-prone than library or require, by limiting the number of names that are made available.</li>
</ul>
</blockquote>
<p>So let’s see how it all works.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The main portion of the script looks like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Main script</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Script setup --------------------------------------</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Load box modules</span></span>
<span id="cb1-6">box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(. <span class="sc" style="color: #5E5E5E;">/</span> box <span class="sc" style="color: #5E5E5E;">/</span> global_options <span class="sc" style="color: #5E5E5E;">/</span> global_options)</span>
<span id="cb1-7">box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(. <span class="sc" style="color: #5E5E5E;">/</span> box <span class="sc" style="color: #5E5E5E;">/</span> io <span class="sc" style="color: #5E5E5E;">/</span> imports)</span>
<span id="cb1-8">box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(. <span class="sc" style="color: #5E5E5E;">/</span> box <span class="sc" style="color: #5E5E5E;">/</span> io <span class="sc" style="color: #5E5E5E;">/</span> exports)</span>
<span id="cb1-9">box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(. <span class="sc" style="color: #5E5E5E;">/</span> box <span class="sc" style="color: #5E5E5E;">/</span> mod <span class="sc" style="color: #5E5E5E;">/</span> mod)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># Load global options</span></span>
<span id="cb1-12">global_options<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">set_global_options</span>() </span>
<span id="cb1-13"></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Main script ---------------------------------------</span></span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Load data, process it, and export results</span></span>
<span id="cb1-18">all_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">getOption</span>(<span class="st" style="color: #20794D;">'data_dir'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-19">  </span>
<span id="cb1-20">  <span class="co" style="color: #5E5E5E;"># Load all data</span></span>
<span id="cb1-21">  imports<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">load_all</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-22">  </span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;"># Modify dataset</span></span>
<span id="cb1-24">  mod<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">modify_data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-25">  </span>
<span id="cb1-26">  <span class="co" style="color: #5E5E5E;"># Export data</span></span>
<span id="cb1-27">  exports<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">export_data</span>()</span></code></pre></div>
</div>
<p>So what does this do? Well it is grabbing data from a predefined location, modifying it and then re-exporting it. Now let’s look at all the code that is behind it, which allows us to do these things and then you will see the power of using <strong>box</strong></p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s take a look at the global options settings.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Set global options</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb2-3">set_global_options <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">options</span>(</span>
<span id="cb2-5">    <span class="at" style="color: #657422;">look_ups =</span> <span class="st" style="color: #20794D;">'look-ups/'</span>,</span>
<span id="cb2-6">    <span class="at" style="color: #657422;">data_dir =</span> <span class="st" style="color: #20794D;">'data/input/'</span></span>
<span id="cb2-7">  )</span>
<span id="cb2-8">}</span></code></pre></div>
</div>
<p>Ok 6 lines, boxed down to one.</p>
<p>Now the import function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Function for importing data</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb3-4">load_all <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file_path) {</span>
<span id="cb3-5">  </span>
<span id="cb3-6">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(purrr)</span>
<span id="cb3-7">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(vroom)</span>
<span id="cb3-8">  </span>
<span id="cb3-9">  file_path <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-10">    </span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;"># Get all csv files from folder</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-13">    </span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;"># Set list names</span></span>
<span id="cb3-15">    purrr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">set_names</span>(\(file) <span class="fu" style="color: #4758AB;">basename</span>(file)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-16">    </span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># Load all csvs into list</span></span>
<span id="cb3-18">    purrr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">map</span>(\(file) vroom<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">vroom</span>(file))</span>
<span id="cb3-19"></span>
<span id="cb3-20">}</span></code></pre></div>
</div>
<p>Now the <code>modify_data</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Function for modifying data</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb4-4">modify_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df_list) {</span>
<span id="cb4-5">  </span>
<span id="cb4-6">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(dplyr)</span>
<span id="cb4-7">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(purrr)</span>
<span id="cb4-8">  </span>
<span id="cb4-9">  map_fun <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb4-10">    </span>
<span id="cb4-11">    df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-12">      dplyr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">select</span>(name<span class="sc" style="color: #5E5E5E;">:</span>mass) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-13">      dplyr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">lol =</span> height <span class="sc" style="color: #5E5E5E;">*</span> mass) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-14">      dplyr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">filter</span>(lol <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">1500</span>)</span>
<span id="cb4-15">  }</span>
<span id="cb4-16">  </span>
<span id="cb4-17">  <span class="co" style="color: #5E5E5E;"># Apply mapping function to list</span></span>
<span id="cb4-18">  purrr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">map</span>(df_list, map_fun)</span>
<span id="cb4-19">  </span>
<span id="cb4-20">}</span></code></pre></div>
</div>
<p>Ok again, a big savings here, instead of the above we simply call <code>mod$modify_data()</code> which makes things clearner and also modular in that we can go to a very specific spot in our proejct to fix an error or add/subtract functionality.</p>
<p>Lastly the export.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Function for exporting data</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">#' @export</span></span>
<span id="cb5-4">export_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df_list) {</span>
<span id="cb5-5">  </span>
<span id="cb5-6">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(vroom)</span>
<span id="cb5-7">  box<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">use</span>(purrr)</span>
<span id="cb5-8">  </span>
<span id="cb5-9">  <span class="co" style="color: #5E5E5E;"># Export data</span></span>
<span id="cb5-10">  purrr<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">map2</span>(<span class="at" style="color: #657422;">.x =</span> df_list,</span>
<span id="cb5-11">             <span class="at" style="color: #657422;">.y =</span> <span class="fu" style="color: #4758AB;">names</span>(df_list),</span>
<span id="cb5-12">             <span class="sc" style="color: #5E5E5E;">~</span>vroom<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">vroom_write</span>(<span class="at" style="color: #657422;">x =</span> .x,</span>
<span id="cb5-13">                               <span class="at" style="color: #657422;">file =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'data/output/'</span>, </span>
<span id="cb5-14">                                             .y),</span>
<span id="cb5-15">                               <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">','</span>))</span>
<span id="cb5-16">  </span>
<span id="cb5-17">}</span></code></pre></div>
</div>
<p>Voila! I think to even a fresh user, the power of boxing your functions is fairly apparent and to the advanced user, eyes are most likely glowing!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>box</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-14/index.html</guid>
  <pubDate>Tue, 14 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Off to CRAN! {tidyAML}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-13/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Are you tired of spending hours tuning and testing different machine learning models for your regression or classification problems? The new R package <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> is here to simplify the process for you! tidyAML is a simple interface for automatic machine learning that fits the tidymodels framework, making it easier for you to solve regression and classification problems.</p>
<p>The tidyAML package has been designed with the goal of providing a simple API that automates the entire machine learning pipeline, from data preparation to model selection, training, and prediction. This means that you no longer have to spend hours tuning and testing different models; tidyAML will do it all for you, saving you time and effort.</p>
<p>In this initial release (version 0.0.1), tidyAML introduces a number of new features and minor fixes to improve the overall user experience. Here are some of the updates in this release:</p>
<p>New Features:</p>
<ul>
<li><code>make_regression_base_tbl()</code> and <code>make_classification_base_tbl()</code> functions for creating base tables for regression and classification problems, respectively.</li>
<li><code>internal_make_spec_tbl()</code> function for making the specification table for the machine learning pipeline.</li>
<li><code>internal_set_args_to_tune()</code> function for setting arguments to tune the models. This has not yet been implemented in a true working fashion but might be useful for feedback in this initial release.</li>
<li><code>create_workflow_set()</code> function for creating a set of workflows to test different models.</li>
<li><code>get_model()</code>, <code>extract_model_spec()</code>, <code>extract_wflw()</code>, <code>extract_wflw_fit()</code>, and <code>extract_wflw_pred()</code> functions for extracting different parts of the machine learning pipeline.</li>
<li><code>match_args()</code> function for matching arguments between the base and specification tables.</li>
</ul>
<p>Minor Fixes and Improvements:</p>
<ul>
<li>Updates to <code>fast_classification_parsnip_spec_tbl()</code> and <code>fast_regression_parsnip_spec_tbl()</code> to use the <code>make_regression</code> and <code>make_classification</code> functions and the <code>internal_make_spec_tbl()</code> function.</li>
<li>Addition of a class for the base table functions and using that class in <code>internal_make_spec_tbl()</code>.</li>
<li>Update to the DESCRIPTION for R &gt;= 3.4.0.</li>
</ul>
<p>In conclusion, tidyAML is a game-changer for those looking to automate the machine learning pipeline. It provides a simple API that eliminates the need for manual tuning and testing of different models. With the updates in this initial release, the tidyAML package is sure to make your machine learning journey easier and more efficient.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>There are too many functions to go over in this post so <a href="https://www.spsanderson.com/tidyAML/reference/index.html">you can find them all here</a></p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Even though there are many functions to go over, we can showcase some with a small useful example. So let’s get at it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-4"></span>
<span id="cb1-5">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb1-6"></span>
<span id="cb1-7">frt_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">.data =</span> mtcars, </span>
<span id="cb1-9">  <span class="at" style="color: #657422;">.rec_obj =</span> rec_obj, </span>
<span id="cb1-10">  <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>,<span class="st" style="color: #20794D;">"glm"</span>),</span>
<span id="cb1-11">  <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="st" style="color: #20794D;">"linear_reg"</span></span>
<span id="cb1-12">  )</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;">glimpse</span>(frt_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2
Columns: 8
$ .model_id       &lt;int&gt; 1, 2
$ .parsnip_engine &lt;chr&gt; "lm", "glm"
$ .parsnip_mode   &lt;chr&gt; "regression", "regression"
$ .parsnip_fns    &lt;chr&gt; "linear_reg", "linear_reg"
$ model_spec      &lt;list&gt; [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…
$ wflw            &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ fitted_wflw     &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ pred_wflw       &lt;list&gt; [&lt;tbl_df[24 x 1]&gt;], [&lt;tbl_df[24 x 1]&gt;]</code></pre>
</div>
</div>
<p>Now let’s go through the extractors.</p>
<p>The <code>get_model()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">get_model</span>(frt_tbl, <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">glimpse</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1
Columns: 8
$ .model_id       &lt;int&gt; 2
$ .parsnip_engine &lt;chr&gt; "glm"
$ .parsnip_mode   &lt;chr&gt; "regression"
$ .parsnip_fns    &lt;chr&gt; "linear_reg"
$ model_spec      &lt;list&gt; [~NULL, ~NULL, NULL, regression, TRUE, NULL, glm, TRUE…
$ wflw            &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ fitted_wflw     &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ pred_wflw       &lt;list&gt; [&lt;tbl_df[24 x 1]&gt;]</code></pre>
</div>
</div>
<p>The <code>extract_model_spec()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">extract_model_spec</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Or do multiples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">extract_model_spec</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
Linear Regression Model Specification (regression)

Computational engine: lm 


[[2]]
Linear Regression Model Specification (regression)

Computational engine: glm </code></pre>
</div>
</div>
<p>The <code>extract_wflw()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">extract_wflw</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Or do multiples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">extract_wflw</span>(frt_tbl, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm 


[[2]]
══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: glm </code></pre>
</div>
</div>
<p>The <code>extract_wflw_fit()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">extract_wflw_fit</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:
stats::lm(formula = ..y ~ ., data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  
       qsec           vs           am         gear         carb  
    0.69956      0.39398      1.50212     -0.35338      0.48289  </code></pre>
</div>
</div>
<p>Or do multiples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">extract_wflw_fit</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:
stats::lm(formula = ..y ~ ., data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  
       qsec           vs           am         gear         carb  
    0.69956      0.39398      1.50212     -0.35338      0.48289  


[[2]]
══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:  stats::glm(formula = ..y ~ ., family = stats::gaussian, data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
   28.21291     -1.60712      0.03458     -0.02189      0.56925     -5.69276  
       qsec           vs           am         gear         carb  
    0.69956      0.39398      1.50212     -0.35338      0.48289  

Degrees of Freedom: 23 Total (i.e. Null);  13 Residual
Null Deviance:      935.1 
Residual Deviance: 121.5    AIC: 131</code></pre>
</div>
</div>
<p>Finally the <code>extract_wflw_pred()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 24 × 1
   .pred
   &lt;dbl&gt;
 1  24.8
 2  26.5
 3  18.5
 4  13.9
 5  24.6
 6  29.1
 7  14.0
 8  17.9
 9  10.0
10  23.4
# … with 14 more rows</code></pre>
</div>
</div>
<p>Or do multiples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">extract_wflw_pred</span>(frt_tbl, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 24 × 1
   .pred
   &lt;dbl&gt;
 1  24.8
 2  26.5
 3  18.5
 4  13.9
 5  24.6
 6  29.1
 7  14.0
 8  17.9
 9  10.0
10  23.4
# … with 14 more rows

[[2]]
# A tibble: 24 × 1
   .pred
   &lt;dbl&gt;
 1  24.8
 2  26.5
 3  18.5
 4  13.9
 5  24.6
 6  29.1
 7  14.0
 8  17.9
 9  10.0
10  23.4
# … with 14 more rows</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-13/index.html</guid>
  <pubDate>Mon, 13 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Get the Current Hospital Data Set from CMS with {healthyR.data}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/weekly-rtip-healthyrdata-2023-02-10/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Getting data for health care in the US can sometimes be hard. With my R package <a href="https://www.spsanderson.com/healthyR.data/"><code>{healthyR.data}</code></a> I am hoping to alleviate some of that pain.</p>
<p>Right now the package is bring actively developed from what was a simple yet sleepy simulated administrative data set is getting supercharged into a a full blow package that will retrieve data from outside sources. One such source is <a href="https://data.cms.gov/">CMS</a>.</p>
<p>At the start, and this is going to be a long road, I have started to build some functionality around getting the current hospital data from <strong>CMS</strong>. Let’s take a look at how it works.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the function which has no parameters. This function will download the current and the official hospital data sets from the CMS.gov website.</p>
<p>The function makes use of a temporary directory and file to save and unzip the data. This will grab the current Hospital Data Files, unzip them and return a list of tibbles with each tibble named after the data file.</p>
<p>The function returns a list object with all of the current hospital data as a tibble. It does not save the data anywhere so if you want to save it you will have to do that manually.</p>
<p>This also means that you would have to store the data as a variable in order to access the data later on. It does have a given attributes and a class so that it can be piped into other functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">current_hosp_data</span>()</span></code></pre></div>
</div>
<p>Now let’s see it in action.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>We will download the current hospital data sets and take a look.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR.data)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"></span>
<span id="cb2-4">current_hospital_dataset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">current_hosp_data</span>()</span></code></pre></div>
</div>
<p>This function downloads 70 files. Let’s see which ones have been downloaded.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">names</span>(current_hospital_dataset)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "ASC_Facility.csv"                                                
 [2] "ASC_National.csv"                                                
 [3] "ASC_State.csv"                                                   
 [4] "ASCQR_OAS_CAHPS_BY_ASC.csv"                                      
 [5] "ASCQR_OAS_CAHPS_NATIONAL.csv"                                    
 [6] "ASCQR_OAS_CAHPS_STATE.csv"                                       
 [7] "CJR_PY6_Quality_Reporting_July_2022_Production_File.csv"         
 [8] "CMS_PSI_6_decimal_file.csv"                                      
 [9] "Complications_and_Deaths_Hospital.csv"                           
[10] "Complications_and_Deaths_National.csv"                           
[11] "Complications_and_Deaths_State.csv"                              
[12] "Data_Updates_January_2023.csv"                                   
[13] "Footnote_Crosswalk.csv"                                          
[14] "FY_2023_HAC_Reduction_Program_Hospital.csv"                      
[15] "FY_2023_Hospital_Readmissions_Reduction_Program_Hospital.csv"    
[16] "FY2021_Distribution_of_Net_Change_in_Base_Op_DRG_Payment_Amt.csv"
[17] "FY2021_Net_Change_in_Base_Op_DRG_Payment_Amt.csv"                
[18] "FY2021_Percent_Change_in_Medicare_Payments.csv"                  
[19] "FY2021_Value_Based_Incentive_Payment_Amount.csv"                 
[20] "HCAHPS_Hospital.csv"                                             
[21] "HCAHPS_National.csv"                                             
[22] "HCAHPS_State.csv"                                                
[23] "Healthcare_Associated_Infections_Hospital.csv"                   
[24] "Healthcare_Associated_Infections_National.csv"                   
[25] "Healthcare_Associated_Infections_State.csv"                      
[26] "Hospital_General_Information.csv"                                
[27] "HOSPITAL_QUARTERLY_MSPB_6_DECIMALS.csv"                          
[28] "hvbp_clinical_outcomes.csv"                                      
[29] "hvbp_efficiency_and_cost_reduction.csv"                          
[30] "hvbp_person_and_community_engagement.csv"                        
[31] "hvbp_safety.csv"                                                 
[32] "hvbp_tps.csv"                                                    
[33] "IPFQR_QualityMeasures_Facility.csv"                              
[34] "IPFQR_QualityMeasures_National.csv"                              
[35] "IPFQR_QualityMeasures_State.csv"                                 
[36] "Maternal_Health_Hospital.csv"                                    
[37] "Maternal_Health_National.csv"                                    
[38] "Maternal_Health_State.csv"                                       
[39] "Measure_Dates.csv"                                               
[40] "Medicare_Hospital_Spending_by_Claim.csv"                         
[41] "Medicare_Hospital_Spending_Per_Patient_Hospital.csv"             
[42] "Medicare_Hospital_Spending_Per_Patient_National.csv"             
[43] "Medicare_Hospital_Spending_Per_Patient_State.csv"                
[44] "OAS_CAHPS_Footnotes.csv"                                         
[45] "OQR_OAS_CAHPS_BY_HOSPITAL.csv"                                   
[46] "OQR_OAS_CAHPS_NATIONAL.csv"                                      
[47] "OQR_OAS_CAHPS_STATE.csv"                                         
[48] "Outpatient_Imaging_Efficiency_Hospital.csv"                      
[49] "Outpatient_Imaging_Efficiency_National.csv"                      
[50] "Outpatient_Imaging_Efficiency_State.csv"                         
[51] "Payment_National.csv"                                            
[52] "Payment_State.csv"                                               
[53] "Payment_and_Value_of_Care_Hospital.csv"                          
[54] "PCH_HCAHPS_HOSPITAL.csv"                                         
[55] "PCH_HCAHPS_NATIONAL.csv"                                         
[56] "PCH_HCAHPS_STATE.csv"                                            
[57] "PCH_HEALTHCARE_ASSOCIATED_INFECTIONS_HOSPITAL.csv"               
[58] "PCH_ONCOLOGY_CARE_MEASURES_HOSPITAL.csv"                         
[59] "PCH_OUTCOMES_HOSPITAL.csv"                                       
[60] "PCH_OUTCOMES_NATIONAL.csv"                                       
[61] "Timely_and_Effective_Care_Hospital.csv"                          
[62] "Timely_and_Effective_Care_National.csv"                          
[63] "Timely_and_Effective_Care_State.csv"                             
[64] "Unplanned_Hospital_Visits_Hospital.csv"                          
[65] "Unplanned_Hospital_Visits_National.csv"                          
[66] "Unplanned_Hospital_Visits_State.csv"                             
[67] "VA_IPF.csv"                                                      
[68] "VA_TE.csv"                                                       
[69] "Value_of_Care_National.csv"                                      
[70] "Veterans_Health_Administration_Provider_Level_Data.csv"          </code></pre>
</div>
</div>
<p>More to come in the future!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyrdata</category>
  <guid>https://www.spsanderson.com/steveondata/posts/weekly-rtip-healthyrdata-2023-02-10/index.html</guid>
  <pubDate>Fri, 10 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating and Predicting Fast Regression Parsnip Models with {tidyAML}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-09/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I am almost ready for a first release of my R package <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a>. The purpose of this is to act as a way of quickly generating models using the <strong>parsnip</strong> package and keeping things inside of the <strong>tidymodels</strong> framework allowing users to seamlessly create models in <strong>tidyAML</strong> but pluck and move them over to <strong>tidymodels</strong> should they prefer. This is because I believe that software should be interchangeable and work well with other libraries. Today I am going to showcase how the function <a href="https://www.spsanderson.com/tidyAML/reference/fast_regression.html"><code>fast_regression()</code></a></p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Let’s take a look at the function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">fast_regression</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .rec_obj,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">.split_type =</span> <span class="st" style="color: #20794D;">"initial_split"</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">.split_args =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<p>Here are the arguments to the function:</p>
<ul>
<li><code>.data</code> - The data being passed to the function for the regression problem</li>
<li><code>.rec_obj</code> - The recipe object being passed.</li>
<li><code>.parsnip_fns</code> - The default is ‘all’ which will create all possible regression model specifications supported.</li>
<li><code>.parsnip_eng</code> - The default is ‘all’ which will create all possible regression model specifications supported.</li>
<li><code>.split_type</code> - The default is ‘initial_split’, you can pass any type of split supported by <strong>rsample</strong></li>
<li><code>.split_args</code> - The default is NULL, when NULL then the default parameters of the split type will be executed for the rsample split type.</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s take a look at an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb2-5"></span>
<span id="cb2-6">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb2-7">fast_reg_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(</span>
<span id="cb2-8">  <span class="at" style="color: #657422;">.data =</span> mtcars,</span>
<span id="cb2-9">  <span class="at" style="color: #657422;">.rec_obj =</span> rec_obj,</span>
<span id="cb2-10">  <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>,<span class="st" style="color: #20794D;">"glm"</span>),</span>
<span id="cb2-11">  <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="st" style="color: #20794D;">"linear_reg"</span></span>
<span id="cb2-12">)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="fu" style="color: #4758AB;">glimpse</span>(fast_reg_tbl)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 2
Columns: 8
$ .model_id       &lt;int&gt; 1, 2
$ .parsnip_engine &lt;chr&gt; "lm", "glm"
$ .parsnip_mode   &lt;chr&gt; "regression", "regression"
$ .parsnip_fns    &lt;chr&gt; "linear_reg", "linear_reg"
$ model_spec      &lt;list&gt; [~NULL, ~NULL, NULL, regression, TRUE, NULL, lm, TRUE]…
$ wflw            &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ fitted_wflw     &lt;list&gt; [cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb, mp…
$ pred_wflw       &lt;list&gt; [&lt;tbl_df[24 x 1]&gt;], [&lt;tbl_df[24 x 1]&gt;]</code></pre>
</div>
</div>
<p>Let’s take a look at the model spec.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">fast_reg_tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(model_spec) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Now the <code>wflw</code> column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">fast_reg_tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(wflw) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>The Fitted workflow.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">fast_reg_tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(fitted_wflw) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:
stats::lm(formula = ..y ~ ., data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
 -15.077267     1.107474     0.001161    -0.001014     4.010199    -1.280324  
       qsec           vs           am         gear         carb  
   0.512318    -0.488014     2.430052     4.353568    -2.546043  </code></pre>
</div>
</div>
<p>And lastly tne predicted workflow column.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">fast_reg_tbl <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pull</span>(pred_wflw) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">pluck</span>(<span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 24 × 1
   .pred
   &lt;dbl&gt;
 1  24.7
 2  28.2
 3  18.9
 4  12.0
 5  14.8
 6  15.4
 7  14.7
 8  20.0
 9  11.2
10  19.1
# … with 14 more rows</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-09/index.html</guid>
  <pubDate>Thu, 09 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating an R Project Directory</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working in R I find it best to create a new project when working on something. This keeps all of the data and scripts in one location. This also means that if you are not careful the directory you have your project in can become quite messy. This used to happen to me with regularity, then I got smart and wrote a script that would standardize how projects are built for me.</p>
<p>I find it important to have different fodlers for different parts of a project. This does not mean I will use them all for every project but that is fine, you can either comment that portion out or just delete the files that are created.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is what I do broken down into different steps. First, I see if the package <code>{fs}</code> is installed, and if not, then install it, and finally load it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(fs)) {</span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"fs"</span>)</span>
<span id="cb1-3">}</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;">library</span>(fs))</span></code></pre></div>
</div>
<p>Next we create a character vector of folder paths that will exist inside of the main project folder itself.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">folders <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-2">  <span class="st" style="color: #20794D;">"00_Scripts"</span></span>
<span id="cb2-3">  , <span class="st" style="color: #20794D;">"00_Data"</span></span>
<span id="cb2-4">  , <span class="st" style="color: #20794D;">"01_Queries"</span></span>
<span id="cb2-5">  , <span class="st" style="color: #20794D;">"02_Data_Manipulation"</span></span>
<span id="cb2-6">  , <span class="st" style="color: #20794D;">"03_Viz"</span></span>
<span id="cb2-7">  , <span class="st" style="color: #20794D;">"04_TS_Modeling"</span></span>
<span id="cb2-8">  , <span class="st" style="color: #20794D;">"99_Automations"</span></span>
<span id="cb2-9">)</span></code></pre></div>
</div>
<p>Now that the folders we want are spelt out, we can create them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">fs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dir_create</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">path =</span> folders</span>
<span id="cb3-3">)</span></code></pre></div>
</div>
<p>Now that is done, it’s off to creating a few files that I personally almost always use. I do a lot of work out of a data warehouse so a connection file is needed. We also need a disconnection function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># DSS Connection </span></span>
<span id="cb4-2">db_connect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb4-3">  db_con <span class="ot" style="color: #003B4F;">&lt;-</span> LICHospitalR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">db_connect</span>()</span>
<span id="cb4-4">  </span>
<span id="cb4-5">  <span class="fu" style="color: #4758AB;">return</span>(db_con)</span>
<span id="cb4-6">  </span>
<span id="cb4-7">}</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;"># Disconnect from Database</span></span>
<span id="cb4-10">db_disconnect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.connection) {</span>
<span id="cb4-11">  </span>
<span id="cb4-12">  DBI<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dbDisconnect</span>(</span>
<span id="cb4-13">    <span class="at" style="color: #657422;">conn =</span> <span class="fu" style="color: #4758AB;">db_connect</span>()</span>
<span id="cb4-14">  )</span>
<span id="cb4-15">  </span>
<span id="cb4-16">}</span></code></pre></div>
</div>
<p>Now, let’s load in the typical libraries. You can modify this to suit your own needs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Library Load</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">library_load <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(){</span>
<span id="cb5-4">  </span>
<span id="cb5-5">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(pacman)){<span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"pacman"</span>)}</span>
<span id="cb5-6">  pacman<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">p_load</span>(</span>
<span id="cb5-7">    <span class="st" style="color: #20794D;">"DBI"</span></span>
<span id="cb5-8">    , <span class="st" style="color: #20794D;">"odbc"</span></span>
<span id="cb5-9">    , <span class="st" style="color: #20794D;">"janitor"</span></span>
<span id="cb5-10">    , <span class="st" style="color: #20794D;">"dplyr"</span></span>
<span id="cb5-11">    , <span class="st" style="color: #20794D;">"tibble"</span></span>
<span id="cb5-12">    , <span class="st" style="color: #20794D;">"tidyr"</span></span>
<span id="cb5-13">    , <span class="st" style="color: #20794D;">"LICHospitalR"</span></span>
<span id="cb5-14">    , <span class="st" style="color: #20794D;">"modeltime"</span></span>
<span id="cb5-15">  )</span>
<span id="cb5-16">  </span>
<span id="cb5-17">}</span></code></pre></div>
</div>
<p>Ok so now the functions have been created, let’s dump them!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">db_funs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"db_connect"</span>,<span class="st" style="color: #20794D;">"db_disconnect"</span>)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">dump</span>(</span>
<span id="cb6-3">  <span class="at" style="color: #657422;">list =</span> db_funs,</span>
<span id="cb6-4">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"00_Scripts/db_con_obj.R"</span></span>
<span id="cb6-5">)</span>
<span id="cb6-6"></span>
<span id="cb6-7">lib_funs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"library_load"</span></span>
<span id="cb6-8"><span class="fu" style="color: #4758AB;">dump</span>(</span>
<span id="cb6-9">  <span class="at" style="color: #657422;">list =</span> lib_funs,</span>
<span id="cb6-10">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"00_Scripts/library_load.R"</span></span>
<span id="cb6-11">)</span></code></pre></div>
</div>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is the full script!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(fs)) {</span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"fs"</span>)</span>
<span id="cb7-3">}</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;">library</span>(fs))</span>
<span id="cb7-5"></span>
<span id="cb7-6">folders <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-7">  <span class="st" style="color: #20794D;">"00_Scripts"</span></span>
<span id="cb7-8">  , <span class="st" style="color: #20794D;">"00_Data"</span></span>
<span id="cb7-9">  , <span class="st" style="color: #20794D;">"01_Queries"</span></span>
<span id="cb7-10">  , <span class="st" style="color: #20794D;">"02_Data_Manipulation"</span></span>
<span id="cb7-11">  , <span class="st" style="color: #20794D;">"03_Viz"</span></span>
<span id="cb7-12">  , <span class="st" style="color: #20794D;">"04_TS_Modeling"</span></span>
<span id="cb7-13">  , <span class="st" style="color: #20794D;">"99_Automations"</span></span>
<span id="cb7-14">)</span>
<span id="cb7-15"></span>
<span id="cb7-16">fs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dir_create</span>(</span>
<span id="cb7-17">  <span class="at" style="color: #657422;">path =</span> folders</span>
<span id="cb7-18">)</span>
<span id="cb7-19"></span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="fu" style="color: #4758AB;">file_create</span>(<span class="st" style="color: #20794D;">"01_Queries/query_functions.R"</span>)</span>
<span id="cb7-22"><span class="fu" style="color: #4758AB;">file_create</span>(<span class="st" style="color: #20794D;">"02_Data_Manipulation/data_functions.R"</span>)</span>
<span id="cb7-23"><span class="fu" style="color: #4758AB;">file_create</span>(<span class="st" style="color: #20794D;">"03_Viz/viz_functions.R"</span>)</span>
<span id="cb7-24"><span class="fu" style="color: #4758AB;">file_create</span>(<span class="st" style="color: #20794D;">"04_TS_Modeling/ts_functions.R"</span>)</span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="co" style="color: #5E5E5E;"># DSS Connection </span></span>
<span id="cb7-27">db_connect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb7-28">  db_con <span class="ot" style="color: #003B4F;">&lt;-</span> LICHospitalR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">db_connect</span>()</span>
<span id="cb7-29">  </span>
<span id="cb7-30">  <span class="fu" style="color: #4758AB;">return</span>(db_con)</span>
<span id="cb7-31">  </span>
<span id="cb7-32">}</span>
<span id="cb7-33"></span>
<span id="cb7-34"><span class="co" style="color: #5E5E5E;"># Disconnect from Database</span></span>
<span id="cb7-35">db_disconnect <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.connection) {</span>
<span id="cb7-36">  </span>
<span id="cb7-37">  DBI<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dbDisconnect</span>(</span>
<span id="cb7-38">    <span class="at" style="color: #657422;">conn =</span> <span class="fu" style="color: #4758AB;">db_connect</span>()</span>
<span id="cb7-39">  )</span>
<span id="cb7-40">  </span>
<span id="cb7-41">}</span>
<span id="cb7-42"></span>
<span id="cb7-43"><span class="co" style="color: #5E5E5E;"># Library Load</span></span>
<span id="cb7-44"></span>
<span id="cb7-45">library_load <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(){</span>
<span id="cb7-46">  </span>
<span id="cb7-47">  <span class="cf" style="color: #003B4F;">if</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">require</span>(pacman)){<span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"pacman"</span>)}</span>
<span id="cb7-48">  pacman<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">p_load</span>(</span>
<span id="cb7-49">    <span class="st" style="color: #20794D;">"DBI"</span></span>
<span id="cb7-50">    , <span class="st" style="color: #20794D;">"odbc"</span></span>
<span id="cb7-51">    , <span class="st" style="color: #20794D;">"janitor"</span></span>
<span id="cb7-52">    , <span class="st" style="color: #20794D;">"dplyr"</span></span>
<span id="cb7-53">    , <span class="st" style="color: #20794D;">"tibble"</span></span>
<span id="cb7-54">    , <span class="st" style="color: #20794D;">"tidyr"</span></span>
<span id="cb7-55">    , <span class="st" style="color: #20794D;">"LICHospitalR"</span></span>
<span id="cb7-56">    , <span class="st" style="color: #20794D;">"modeltime"</span></span>
<span id="cb7-57">  )</span>
<span id="cb7-58">  </span>
<span id="cb7-59">}</span>
<span id="cb7-60"></span>
<span id="cb7-61">db_funs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"db_connect"</span>,<span class="st" style="color: #20794D;">"db_disconnect"</span>)</span>
<span id="cb7-62"><span class="fu" style="color: #4758AB;">dump</span>(</span>
<span id="cb7-63">  <span class="at" style="color: #657422;">list =</span> db_funs,</span>
<span id="cb7-64">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"00_Scripts/db_con_obj.R"</span></span>
<span id="cb7-65">)</span>
<span id="cb7-66"></span>
<span id="cb7-67">lib_funs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"library_load"</span></span>
<span id="cb7-68"><span class="fu" style="color: #4758AB;">dump</span>(</span>
<span id="cb7-69">  <span class="at" style="color: #657422;">list =</span> lib_funs,</span>
<span id="cb7-70">  <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"00_Scripts/library_load.R"</span></span>
<span id="cb7-71">)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-08/index.html</guid>
  <pubDate>Wed, 08 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Subsetting Named Lists in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-07/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, lists are a fundamental data structure that allows us to store multiple objects of different data types under a single name. Often times, we want to extract certain elements of a list based on their names, and this can be accomplished through the use of the subset function. In this blog post, we will take a look at how to use the grep function to subset named lists in R.</p>
<p>First, we will create a list object as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">asc_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-2">  <span class="at" style="color: #657422;">Facility =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-3">  <span class="at" style="color: #657422;">State =</span> <span class="dv" style="color: #AD0000;">11</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb1-4">  <span class="at" style="color: #657422;">National =</span> <span class="dv" style="color: #AD0000;">21</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb1-5">)</span></code></pre></div>
</div>
<p>We now have a list with three elements, each with a different name. Next, we want to make sure that our list does not contain any 0 length items. This can be achieved by using the lapply function and the length function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">asc_list <span class="ot" style="color: #003B4F;">&lt;-</span> asc_list[<span class="fu" style="color: #4758AB;">lapply</span>(asc_list, length) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>]</span></code></pre></div>
</div>
<p>The <code>lapply</code> function applies the length function to each element of the list, and returns a logical vector indicating whether each element is of length greater than 0. By using the square bracket operator, we can extract only those elements for which the logical value is TRUE.</p>
<p>Next, we create a character vector of possible items that we want to match on:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">patterns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"state"</span>,<span class="st" style="color: #20794D;">"faci"</span>)</span></code></pre></div>
</div>
<p>We can now pass this vector of patterns to the grep function, along with the names of our list and the ignore.case argument set to TRUE. The grep function returns the indices of the elements in our list that match the given pattern:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">asc_list[<span class="fu" style="color: #4758AB;">grep</span>(</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">paste</span>(patterns, <span class="at" style="color: #657422;">collapse =</span> <span class="st" style="color: #20794D;">"|"</span>),</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">names</span>(asc_list),</span>
<span id="cb4-4">  <span class="at" style="color: #657422;">ignore.case =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb4-5">  )]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$Facility
 [1]  1  2  3  4  5  6  7  8  9 10

$State
 [1] 11 12 13 14 15 16 17 18 19 20</code></pre>
</div>
</div>
<p>The result of this code is a new list that contains only the elements of our original list whose names match either “state” or “faci”. The paste function is used to join the patterns in the vector into a single string, with the | character separating each pattern. This allows us to search for multiple patterns at once.</p>
<p>In conclusion, the grep function is a powerful tool for sub-setting named lists in R, especially when we have multiple patterns that we want to match on. By combining the grep function with other R functions such as <code>lapply</code> and length, we can extract specific elements from our lists with ease.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-07/index.html</guid>
  <pubDate>Tue, 07 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Cumulative Measurement Functions with {TidyDensity}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re looking for an easy-to-use package to calculate cumulative statistics in R, you may want to check out the TidyDensity package. This package offers several functions to calculate cumulative measurements, including mean, median, standard deviation, variance, skewness, kurtosis, harmonic mean, and geometric mean.</p>
<ul>
<li><code>cgmean()</code>: Cumulative Geometric Mean</li>
</ul>
<p>The <code>cgmean()</code> function calculates the cumulative geometric mean of a set of values. This is the nth root of the product of the first n elements of the set. It’s a useful measurement for sets of values that are multiplied together, such as growth rates.</p>
<ul>
<li><code>chmean()</code>: Cumulative Harmonic Mean</li>
</ul>
<p>The <code>chmean()</code> function calculates the cumulative harmonic mean of a set of values. This is the inverse of the arithmetic mean of the reciprocals of the values. It’s commonly used for sets of values that represent rates, such as speeds.</p>
<ul>
<li><code>ckurtosis()</code>: Cumulative Kurtosis</li>
</ul>
<p>The <code>ckurtosis()</code> function calculates the cumulative kurtosis of a set of values. Kurtosis is a measure of the peakedness of a distribution, relative to a normal distribution. The cumulative kurtosis calculates the kurtosis of a set of values up to a specific point in the set.</p>
<ul>
<li><code>cmean()</code>: Cumulative Mean</li>
</ul>
<p>The <code>cmean()</code> function calculates the cumulative mean of a set of values. It’s a measure of the average of the values up to a specific point in the set.</p>
<ul>
<li><code>cmedian()</code>: Cumulative Median</li>
</ul>
<p>The <code>cmedian()</code> function calculates the cumulative median of a set of values. It’s the value that separates the lower half of the set from the upper half, up to a specific point in the set.</p>
<ul>
<li><code>csd()</code>: Cumulative Standard Deviation</li>
</ul>
<p>The <code>csd()</code> function calculates the cumulative standard deviation of a set of values. Standard deviation is a measure of the spread of values in a set. The cumulative standard deviation calculates the standard deviation up to a specific point in the set.</p>
<ul>
<li><code>cskewness()</code>: Cumulative Skewness</li>
</ul>
<p>The <code>cskewness()</code> function calculates the cumulative skewness of a set of values. Skewness is a measure of the asymmetry of a distribution. The cumulative skewness calculates the skewness up to a specific point in the set.</p>
<ul>
<li><code>cvar()</code>: Cumulative Variance</li>
</ul>
<p>The <code>cvar()</code> function calculates the cumulative variance of a set of values. Variance is a measure of the spread of values in a set. The cumulative variance calculates the variance up to a specific point in the set.</p>
<p>In conclusion, the <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> package offers several functions for calculating cumulative statistics, including mean, median, standard deviation, variance, skewness, kurtosis, harmonic mean, and geometric mean. These functions make it easy to calculate cumulative statistics for sets of values in R.</p>
</section>
<section id="functions" class="level1">
<h1>Functions</h1>
<p>All of the functions perform work strictly on a vector. Because of this I will not go over the function calls separately because they all follow the vectorized for of <code>fun(.x)</code> where <strong><code>.x</code></strong> is the argument passed to the cumulative function.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Here I will go over some examples of each function use the <em>AirPassengers</em> data set.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-2"></span>
<span id="cb1-3">v <span class="ot" style="color: #003B4F;">&lt;-</span> AirPassengers</span></code></pre></div>
</div>
<p>Let’s start at the top.</p>
<p>Cumulative Geometric Mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">cgmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 112.0000 114.9609 120.3810 122.4802 122.1827 124.2311</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">cgmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 249.6135 251.1999 252.4577 253.5305 254.2952 255.2328</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">cgmean</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Harmonic Mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">chmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 112.00000  57.46087  40.03378  30.55222  24.39304  20.66000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">chmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1.636832 1.632423 1.627194 1.621471 1.614757 1.608744</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">chmean</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Kurtosis:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">ckurtosis</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]      NaN 1.000000 1.500000 1.315839 1.597316 1.597850</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">ckurtosis</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2.668951 2.795314 2.733117 2.674195 2.649894 2.606228</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">ckurtosis</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Mean:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">cmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 112.0000 115.0000 120.6667 122.7500 122.4000 124.5000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">cmean</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 273.1367 275.5143 277.1631 278.4577 279.2378 280.2986</code></pre>
</div>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">cmean</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Median:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">cmedian</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 112.0 115.0 118.0 123.5 121.0 125.0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">cmedian</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 259.0 261.5 264.0 264.0 264.0 265.5</code></pre>
</div>
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">cmedian</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Standard Deviation:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">csd</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]        NA  4.242641 10.263203  9.358597  8.142481  8.916277</code></pre>
</div>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">csd</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 115.0074 117.9956 119.1924 119.7668 119.7083 119.9663</code></pre>
</div>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb31-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">csd</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Skewness:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">cskewness</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]         NaN  0.00000000  0.44510927 -0.14739157 -0.02100016 -0.18544758</code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">cskewness</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0.5936970 0.6471651 0.6349071 0.6145579 0.5972102 0.5770682</code></pre>
</div>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb36-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">cskewness</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Cumulative Variance:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb37-1"><span class="fu" style="color: #4758AB;">head</span>(<span class="fu" style="color: #4758AB;">cvar</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]        NA  18.00000 105.33333  87.58333  66.30000  79.50000</code></pre>
</div>
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb39-1"><span class="fu" style="color: #4758AB;">tail</span>(<span class="fu" style="color: #4758AB;">cvar</span>(v))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 13226.70 13922.96 14206.84 14344.08 14330.07 14391.92</code></pre>
</div>
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb41-1"><span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">cvar</span>(v), <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"l"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-06/inex.html</guid>
  <pubDate>Mon, 06 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Argument Matcher: A Function for Selecting the Right Arguments {tidyAML}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I am working on finishing up a few things with my new R package <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> before I release it to CRAN. One of those things is the ability of a user to build a model using a command that might be something like <code>generate_model()</code>. One of the things that is necessary to do is to match the function arguments from the <code>generate_model()</code> to the actual <strong>parsnip</strong> call.</p>
<p>This is where and argument matcher of sorts may come in handy. I am doing this because it will take one most step of abstraction away, and instead of say calling <code>linear_reg()</code> or <code>mars()</code> or something like that, you can just instead use <code>generate_model()</code> and type in your engine or the <code>parsnip</code> function call there.</p>
<p>Now I am not one hundred percent certain that I’ll actually implement this or not, but the exercise was fun enough that I decided to share it. So let’s get into it.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is the current state of the function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">argument_matcher <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(<span class="at" style="color: #657422;">.f =</span> <span class="st" style="color: #20794D;">"linear_reg"</span>, <span class="at" style="color: #657422;">.args =</span> <span class="fu" style="color: #4758AB;">list</span>()){</span>
<span id="cb1-2">  </span>
<span id="cb1-3">  <span class="co" style="color: #5E5E5E;"># TidyEval ----</span></span>
<span id="cb1-4">  fns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.character</span>(.f)</span>
<span id="cb1-5">  </span>
<span id="cb1-6">  fns_args <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">formalArgs</span>(fns)</span>
<span id="cb1-7">  fns_args_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.list</span>(fns_args)</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">names</span>(fns_args_list) <span class="ot" style="color: #003B4F;">&lt;-</span> fns_args</span>
<span id="cb1-9">  </span>
<span id="cb1-10">  arg_list <span class="ot" style="color: #003B4F;">&lt;-</span> .args</span>
<span id="cb1-11">  arg_list_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(<span class="fu" style="color: #4758AB;">names</span>(arg_list))</span>
<span id="cb1-12">  </span>
<span id="cb1-13">  l <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(arg_list, fns_args_list)</span>
<span id="cb1-14">  </span>
<span id="cb1-15">  arg_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(arg_list_names <span class="sc" style="color: #5E5E5E;">%in%</span> fns_args_list)</span>
<span id="cb1-16">  bad_arg_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(<span class="sc" style="color: #5E5E5E;">!</span>arg_list_names <span class="sc" style="color: #5E5E5E;">%in%</span> fns_args_list)</span>
<span id="cb1-17">  </span>
<span id="cb1-18">  bad_args <span class="ot" style="color: #003B4F;">&lt;-</span> arg_list[bad_arg_idx]</span>
<span id="cb1-19">  bad_arg_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(<span class="fu" style="color: #4758AB;">names</span>(bad_args))</span>
<span id="cb1-20">  </span>
<span id="cb1-21">  final_args <span class="ot" style="color: #003B4F;">&lt;-</span> arg_list[arg_idx]</span>
<span id="cb1-22">  </span>
<span id="cb1-23">  <span class="co" style="color: #5E5E5E;"># Return ----</span></span>
<span id="cb1-24">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(bad_arg_names <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>)){</span>
<span id="cb1-25">    rlang<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">inform</span>(</span>
<span id="cb1-26">      <span class="at" style="color: #657422;">message =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"bad arguments passed: "</span>, bad_arg_names),</span>
<span id="cb1-27">      <span class="at" style="color: #657422;">use_cli_format =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb1-28">    )</span>
<span id="cb1-29">  }</span>
<span id="cb1-30"></span>
<span id="cb1-31">  <span class="fu" style="color: #4758AB;">return</span>(final_args)</span>
<span id="cb1-32">}</span></code></pre></div>
</div>
<p>When working with R functions, it’s not uncommon to encounter a situation where you need to pass arguments to another function. This can be especially challenging when the arguments are not properly matched. Fortunately, the <code>argument_matcher</code> function provides an elegant solution to this problem.</p>
<p>The <code>argument_matcher</code> function takes two arguments: <code>.f</code> and <code>.args</code>. The <code>.f</code> argument is a string that specifies the name of the function you want to pass arguments to, while the <code>.args</code> argument is a list that contains the arguments you want to pass to the specified function.</p>
<p>The <code>argument_matcher</code> function first uses the <code>formalArg</code>s function to extract the formal arguments of the specified function and store them in <code>fns_args</code>. The names of the formal arguments are then used to create a list, <code>fns_args_list</code>.</p>
<p>Next, the function extracts the names of the arguments in <code>.arg</code>s and stores them in <code>arg_list_names</code>. It then checks if the names of the arguments in <code>.args</code> match the names of the formal arguments of the specified function, and stores the matching arguments in <code>final_args</code>. Any arguments that don’t match the formal arguments are stored in bad_args, and a warning message is printed indicating that bad arguments were passed.</p>
<p>The final step is to return the <code>final_args</code> list, which contains only the arguments that match the formal arguments of the specified function.</p>
<p>In conclusion, the <code>argument_matcher</code> function is a useful tool for ensuring that arguments are properly matched when passed to another function. Whether you’re working with linear regression models or any other type of function, the <code>argument_matche</code>r function will help you select the right arguments and avoid common errors.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s see a simple example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;">library</span>(tidymodels))</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">argument_matcher</span>(</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">.args =</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-5">    <span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"regression"</span>, </span>
<span id="cb2-6">    <span class="at" style="color: #657422;">engine =</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb2-7">    <span class="at" style="color: #657422;">cost =</span> <span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb2-8">    <span class="at" style="color: #657422;">trees =</span> <span class="dv" style="color: #AD0000;">1</span>, </span>
<span id="cb2-9">    <span class="at" style="color: #657422;">mtry =</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-10">    )</span>
<span id="cb2-11">  )</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>bad arguments passed: cost
bad arguments passed: trees
bad arguments passed: mtry</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>$mode
[1] "regression"

$engine
[1] "lm"</code></pre>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>list</category>
  <category>tidyaml</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-03/index.html</guid>
  <pubDate>Fri, 03 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Diverging Lollipop Chart: A Visual Tool for Comparing Data with {healthyR}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>A diverging lollipop chart is a useful tool for comparing data that falls into two categories, usually indicated by different colors. This type of chart is particularly well-suited for comparing the differences between two data sets and for identifying which data points are contributing most to the differences.</p>
<p>The R package <a href="https://www.spsanderson.com/healthyR/"><code>{healthyR}</code></a> offers a function called <a href="https://www.spsanderson.com/healthyR/reference/diverging_lollipop_plt.html"><code>diverging_lollipop_plt()</code></a> that can be used to create a diverging lollipop chart. This function has several parameters that can be used to customize the chart to meet your specific needs.</p>
<p>In conclusion, the diverging lollipop chart is a useful tool for comparing data sets and can provide insights into the differences between two sets of data. The <a href="https://www.spsanderson.com/healthyR/reference/diverging_lollipop_plt.html"><code>diverging_lollipop_plt()</code></a> function from the <a href="https://www.spsanderson.com/healthyR/"><code>{healthyR}</code></a> package is a great option for creating this type of chart, as it offers a range of customization options to meet your specific needs. Whether you’re working with data related to business, finance, or any other field, a diverging lollipop chart can be a valuable tool in your visual analysis toolkit.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Let’s take a look at the full function call.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">diverging_lollipop_plt</span>(</span>
<span id="cb1-2">  .data,</span>
<span id="cb1-3">  .x_axis,</span>
<span id="cb1-4">  .y_axis,</span>
<span id="cb1-5">  <span class="at" style="color: #657422;">.plot_title =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb1-6">  <span class="at" style="color: #657422;">.plot_subtitle =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">.plot_caption =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">.interactive =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-9">)</span></code></pre></div>
</div>
<p>Now lets see the arguments that get provided to the parameters.</p>
<ul>
<li><code>.data</code> - The data to pass to the function, must be a tibble/data.frame.</li>
<li><code>.x_axis</code> - The data that is passed to the x-axis. This will also be the x and xend parameters of the geom_segment</li>
<li><code>.y_axis</code> - The data that is passed to the y-axis. This will also equal the parameters of <code>yend</code> and <code>label</code></li>
<li><code>.plot_title</code> - Default is NULL</li>
<li><code>.plot_subtitle</code> - Default is NULL</li>
<li><code>.plot_caption</code> - Default is NULL</li>
<li><code>.interactive</code> - Default is FALSE. TRUE returns a plotly plot</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s see an example.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">suppressPackageStartupMessages</span>(<span class="fu" style="color: #4758AB;">library</span>(ggplot2))</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"mtcars"</span>)</span>
<span id="cb2-6">mtcars<span class="sc" style="color: #5E5E5E;">$</span>car_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rownames</span>(mtcars)</span>
<span id="cb2-7">mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg_z <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">round</span>((mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">mean</span>(mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg))<span class="sc" style="color: #5E5E5E;">/</span><span class="fu" style="color: #4758AB;">sd</span>(mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-8">mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg_type <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ifelse</span>(mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg_z <span class="sc" style="color: #5E5E5E;">&lt;</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="st" style="color: #20794D;">"below"</span>, <span class="st" style="color: #20794D;">"above"</span>)</span>
<span id="cb2-9">mtcars <span class="ot" style="color: #003B4F;">&lt;-</span> mtcars[<span class="fu" style="color: #4758AB;">order</span>(mtcars<span class="sc" style="color: #5E5E5E;">$</span>mpg_z), ]  <span class="co" style="color: #5E5E5E;"># sort</span></span>
<span id="cb2-10">mtcars<span class="sc" style="color: #5E5E5E;">$</span>car_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">factor</span>(mtcars<span class="sc" style="color: #5E5E5E;">$</span>car_name, <span class="at" style="color: #657422;">levels =</span> mtcars<span class="sc" style="color: #5E5E5E;">$</span>car_name)</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">diverging_lollipop_plt</span>(</span>
<span id="cb2-13">  <span class="at" style="color: #657422;">.data =</span> mtcars, </span>
<span id="cb2-14">  <span class="at" style="color: #657422;">.x_axis =</span> car_name,</span>
<span id="cb2-15">  <span class="at" style="color: #657422;">.y_axis =</span> mpg_z</span>
<span id="cb2-16">)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-02/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Now let’s also see the interactive chart.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">diverging_lollipop_plt</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">.data =</span> mtcars, </span>
<span id="cb3-3">  <span class="at" style="color: #657422;">.x_axis =</span> car_name,</span>
<span id="cb3-4">  <span class="at" style="color: #657422;">.y_axis =</span> mpg_z,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;">.interactive =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb3-6">)</span></code></pre></div>
<div class="cell-output-display">
<div class="plotly html-widget html-fill-item-overflow-hidden html-fill-item" id="htmlwidget-464c8a583214626e10fa" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-464c8a583214626e10fa">{"x":{"data":[{"x":[-1.61,-1.61,-1.13,-0.96,-0.89,-0.84,-0.81,-0.81,-0.76,-0.71,-0.61,-0.46,-0.38,-0.33,-0.23,-0.15,-0.15,-0.06,0.15,0.15,0.22,0.22,0.23,0.45,0.45,0.72,0.98,1.2,1.71,1.71,2.04,2.29],"y":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"text":["car_name: Cadillac Fleetwood<br />mpg_z: -1.61<br />mpg_z: -1.61","car_name: Lincoln Continental<br />mpg_z: -1.61<br />mpg_z: -1.61","car_name: Camaro Z28<br />mpg_z: -1.13<br />mpg_z: -1.13","car_name: Duster 360<br />mpg_z: -0.96<br />mpg_z: -0.96","car_name: Chrysler Imperial<br />mpg_z: -0.89<br />mpg_z: -0.89","car_name: Maserati Bora<br />mpg_z: -0.84<br />mpg_z: -0.84","car_name: Merc 450SLC<br />mpg_z: -0.81<br />mpg_z: -0.81","car_name: AMC Javelin<br />mpg_z: -0.81<br />mpg_z: -0.81","car_name: Dodge Challenger<br />mpg_z: -0.76<br />mpg_z: -0.76","car_name: Ford Pantera L<br />mpg_z: -0.71<br />mpg_z: -0.71","car_name: Merc 450SE<br />mpg_z: -0.61<br />mpg_z: -0.61","car_name: Merc 450SL<br />mpg_z: -0.46<br />mpg_z: -0.46","car_name: Merc 280C<br />mpg_z: -0.38<br />mpg_z: -0.38","car_name: Valiant<br />mpg_z: -0.33<br />mpg_z: -0.33","car_name: Hornet Sportabout<br />mpg_z: -0.23<br />mpg_z: -0.23","car_name: Merc 280<br />mpg_z: -0.15<br />mpg_z: -0.15","car_name: Pontiac Firebird<br />mpg_z: -0.15<br />mpg_z: -0.15","car_name: Ferrari Dino<br />mpg_z: -0.06<br />mpg_z: -0.06","car_name: Mazda RX4<br />mpg_z:  0.15<br />mpg_z:  0.15","car_name: Mazda RX4 Wag<br />mpg_z:  0.15<br />mpg_z:  0.15","car_name: Hornet 4 Drive<br />mpg_z:  0.22<br />mpg_z:  0.22","car_name: Volvo 142E<br />mpg_z:  0.22<br />mpg_z:  0.22","car_name: Toyota Corona<br />mpg_z:  0.23<br />mpg_z:  0.23","car_name: Datsun 710<br />mpg_z:  0.45<br />mpg_z:  0.45","car_name: Merc 230<br />mpg_z:  0.45<br />mpg_z:  0.45","car_name: Merc 240D<br />mpg_z:  0.72<br />mpg_z:  0.72","car_name: Porsche 914-2<br />mpg_z:  0.98<br />mpg_z:  0.98","car_name: Fiat X1-9<br />mpg_z:  1.20<br />mpg_z:  1.20","car_name: Honda Civic<br />mpg_z:  1.71<br />mpg_z:  1.71","car_name: Lotus Europa<br />mpg_z:  1.71<br />mpg_z:  1.71","car_name: Fiat 128<br />mpg_z:  2.04<br />mpg_z:  2.04","car_name: Toyota Corolla<br />mpg_z:  2.29<br />mpg_z:  2.29"],"type":"scatter","mode":"markers","marker":{"autocolorscale":false,"color":"rgba(0,0,0,1)","opacity":1,"size":22.6771653543307,"symbol":"circle","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)"}},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[0,-1.61,null,0,-1.61,null,0,-1.13,null,0,-0.96,null,0,-0.89,null,0,-0.84,null,0,-0.81,null,0,-0.81,null,0,-0.76,null,0,-0.71,null,0,-0.61,null,0,-0.46,null,0,-0.38,null,0,-0.33,null,0,-0.23,null,0,-0.15,null,0,-0.15,null,0,-0.06,null,0,0.15,null,0,0.15,null,0,0.22,null,0,0.22,null,0,0.23,null,0,0.45,null,0,0.45,null,0,0.72,null,0,0.98,null,0,1.2,null,0,1.71,null,0,1.71,null,0,2.04,null,0,2.29],"y":[1,1,null,2,2,null,3,3,null,4,4,null,5,5,null,6,6,null,7,7,null,8,8,null,9,9,null,10,10,null,11,11,null,12,12,null,13,13,null,14,14,null,15,15,null,16,16,null,17,17,null,18,18,null,19,19,null,20,20,null,21,21,null,22,22,null,23,23,null,24,24,null,25,25,null,26,26,null,27,27,null,28,28,null,29,29,null,30,30,null,31,31,null,32,32],"text":["car_name: Cadillac Fleetwood<br />y: 0<br />mpg_z: -1.61<br />mpg_z: -1.61<br />car_name:  1","car_name: Cadillac Fleetwood<br />y: 0<br />mpg_z: -1.61<br />mpg_z: -1.61<br />car_name:  1",null,"car_name: Lincoln Continental<br />y: 0<br />mpg_z: -1.61<br />mpg_z: -1.61<br />car_name:  2","car_name: Lincoln Continental<br />y: 0<br />mpg_z: -1.61<br />mpg_z: -1.61<br />car_name:  2",null,"car_name: Camaro Z28<br />y: 0<br />mpg_z: -1.13<br />mpg_z: -1.13<br />car_name:  3","car_name: Camaro Z28<br />y: 0<br />mpg_z: -1.13<br />mpg_z: -1.13<br />car_name:  3",null,"car_name: Duster 360<br />y: 0<br />mpg_z: -0.96<br />mpg_z: -0.96<br />car_name:  4","car_name: Duster 360<br />y: 0<br />mpg_z: -0.96<br />mpg_z: -0.96<br />car_name:  4",null,"car_name: Chrysler Imperial<br />y: 0<br />mpg_z: -0.89<br />mpg_z: -0.89<br />car_name:  5","car_name: Chrysler Imperial<br />y: 0<br />mpg_z: -0.89<br />mpg_z: -0.89<br />car_name:  5",null,"car_name: Maserati Bora<br />y: 0<br />mpg_z: -0.84<br />mpg_z: -0.84<br />car_name:  6","car_name: Maserati Bora<br />y: 0<br />mpg_z: -0.84<br />mpg_z: -0.84<br />car_name:  6",null,"car_name: Merc 450SLC<br />y: 0<br />mpg_z: -0.81<br />mpg_z: -0.81<br />car_name:  7","car_name: Merc 450SLC<br />y: 0<br />mpg_z: -0.81<br />mpg_z: -0.81<br />car_name:  7",null,"car_name: AMC Javelin<br />y: 0<br />mpg_z: -0.81<br />mpg_z: -0.81<br />car_name:  8","car_name: AMC Javelin<br />y: 0<br />mpg_z: -0.81<br />mpg_z: -0.81<br />car_name:  8",null,"car_name: Dodge Challenger<br />y: 0<br />mpg_z: -0.76<br />mpg_z: -0.76<br />car_name:  9","car_name: Dodge Challenger<br />y: 0<br />mpg_z: -0.76<br />mpg_z: -0.76<br />car_name:  9",null,"car_name: Ford Pantera L<br />y: 0<br />mpg_z: -0.71<br />mpg_z: -0.71<br />car_name: 10","car_name: Ford Pantera L<br />y: 0<br />mpg_z: -0.71<br />mpg_z: -0.71<br />car_name: 10",null,"car_name: Merc 450SE<br />y: 0<br />mpg_z: -0.61<br />mpg_z: -0.61<br />car_name: 11","car_name: Merc 450SE<br />y: 0<br />mpg_z: -0.61<br />mpg_z: -0.61<br />car_name: 11",null,"car_name: Merc 450SL<br />y: 0<br />mpg_z: -0.46<br />mpg_z: -0.46<br />car_name: 12","car_name: Merc 450SL<br />y: 0<br />mpg_z: -0.46<br />mpg_z: -0.46<br />car_name: 12",null,"car_name: Merc 280C<br />y: 0<br />mpg_z: -0.38<br />mpg_z: -0.38<br />car_name: 13","car_name: Merc 280C<br />y: 0<br />mpg_z: -0.38<br />mpg_z: -0.38<br />car_name: 13",null,"car_name: Valiant<br />y: 0<br />mpg_z: -0.33<br />mpg_z: -0.33<br />car_name: 14","car_name: Valiant<br />y: 0<br />mpg_z: -0.33<br />mpg_z: -0.33<br />car_name: 14",null,"car_name: Hornet Sportabout<br />y: 0<br />mpg_z: -0.23<br />mpg_z: -0.23<br />car_name: 15","car_name: Hornet Sportabout<br />y: 0<br />mpg_z: -0.23<br />mpg_z: -0.23<br />car_name: 15",null,"car_name: Merc 280<br />y: 0<br />mpg_z: -0.15<br />mpg_z: -0.15<br />car_name: 16","car_name: Merc 280<br />y: 0<br />mpg_z: -0.15<br />mpg_z: -0.15<br />car_name: 16",null,"car_name: Pontiac Firebird<br />y: 0<br />mpg_z: -0.15<br />mpg_z: -0.15<br />car_name: 17","car_name: Pontiac Firebird<br />y: 0<br />mpg_z: -0.15<br />mpg_z: -0.15<br />car_name: 17",null,"car_name: Ferrari Dino<br />y: 0<br />mpg_z: -0.06<br />mpg_z: -0.06<br />car_name: 18","car_name: Ferrari Dino<br />y: 0<br />mpg_z: -0.06<br />mpg_z: -0.06<br />car_name: 18",null,"car_name: Mazda RX4<br />y: 0<br />mpg_z:  0.15<br />mpg_z:  0.15<br />car_name: 19","car_name: Mazda RX4<br />y: 0<br />mpg_z:  0.15<br />mpg_z:  0.15<br />car_name: 19",null,"car_name: Mazda RX4 Wag<br />y: 0<br />mpg_z:  0.15<br />mpg_z:  0.15<br />car_name: 20","car_name: Mazda RX4 Wag<br />y: 0<br />mpg_z:  0.15<br />mpg_z:  0.15<br />car_name: 20",null,"car_name: Hornet 4 Drive<br />y: 0<br />mpg_z:  0.22<br />mpg_z:  0.22<br />car_name: 21","car_name: Hornet 4 Drive<br />y: 0<br />mpg_z:  0.22<br />mpg_z:  0.22<br />car_name: 21",null,"car_name: Volvo 142E<br />y: 0<br />mpg_z:  0.22<br />mpg_z:  0.22<br />car_name: 22","car_name: Volvo 142E<br />y: 0<br />mpg_z:  0.22<br />mpg_z:  0.22<br />car_name: 22",null,"car_name: Toyota Corona<br />y: 0<br />mpg_z:  0.23<br />mpg_z:  0.23<br />car_name: 23","car_name: Toyota Corona<br />y: 0<br />mpg_z:  0.23<br />mpg_z:  0.23<br />car_name: 23",null,"car_name: Datsun 710<br />y: 0<br />mpg_z:  0.45<br />mpg_z:  0.45<br />car_name: 24","car_name: Datsun 710<br />y: 0<br />mpg_z:  0.45<br />mpg_z:  0.45<br />car_name: 24",null,"car_name: Merc 230<br />y: 0<br />mpg_z:  0.45<br />mpg_z:  0.45<br />car_name: 25","car_name: Merc 230<br />y: 0<br />mpg_z:  0.45<br />mpg_z:  0.45<br />car_name: 25",null,"car_name: Merc 240D<br />y: 0<br />mpg_z:  0.72<br />mpg_z:  0.72<br />car_name: 26","car_name: Merc 240D<br />y: 0<br />mpg_z:  0.72<br />mpg_z:  0.72<br />car_name: 26",null,"car_name: Porsche 914-2<br />y: 0<br />mpg_z:  0.98<br />mpg_z:  0.98<br />car_name: 27","car_name: Porsche 914-2<br />y: 0<br />mpg_z:  0.98<br />mpg_z:  0.98<br />car_name: 27",null,"car_name: Fiat X1-9<br />y: 0<br />mpg_z:  1.20<br />mpg_z:  1.20<br />car_name: 28","car_name: Fiat X1-9<br />y: 0<br />mpg_z:  1.20<br />mpg_z:  1.20<br />car_name: 28",null,"car_name: Honda Civic<br />y: 0<br />mpg_z:  1.71<br />mpg_z:  1.71<br />car_name: 29","car_name: Honda Civic<br />y: 0<br />mpg_z:  1.71<br />mpg_z:  1.71<br />car_name: 29",null,"car_name: Lotus Europa<br />y: 0<br />mpg_z:  1.71<br />mpg_z:  1.71<br />car_name: 30","car_name: Lotus Europa<br />y: 0<br />mpg_z:  1.71<br />mpg_z:  1.71<br />car_name: 30",null,"car_name: Fiat 128<br />y: 0<br />mpg_z:  2.04<br />mpg_z:  2.04<br />car_name: 31","car_name: Fiat 128<br />y: 0<br />mpg_z:  2.04<br />mpg_z:  2.04<br />car_name: 31",null,"car_name: Toyota Corolla<br />y: 0<br />mpg_z:  2.29<br />mpg_z:  2.29<br />car_name: 32","car_name: Toyota Corolla<br />y: 0<br />mpg_z:  2.29<br />mpg_z:  2.29<br />car_name: 32"],"type":"scatter","mode":"lines","line":{"width":1.88976377952756,"color":"rgba(0,0,0,1)","dash":"solid"},"hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null},{"x":[-1.61,-1.61,-1.13,-0.96,-0.89,-0.84,-0.81,-0.81,-0.76,-0.71,-0.61,-0.46,-0.38,-0.33,-0.23,-0.15,-0.15,-0.06,0.15,0.15,0.22,0.22,0.23,0.45,0.45,0.72,0.98,1.2,1.71,1.71,2.04,2.29],"y":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"text":[-1.61,-1.61,-1.13,-0.96,-0.89,-0.84,-0.81,-0.81,-0.76,-0.71,-0.61,-0.46,-0.38,-0.33,-0.23,-0.15,-0.15,-0.06,0.15,0.15,0.22,0.22,0.23,0.45,0.45,0.72,0.98,1.2,1.71,1.71,2.04,2.29],"hovertext":["car_name: Cadillac Fleetwood<br />mpg_z: -1.61<br />mpg_z: -1.61","car_name: Lincoln Continental<br />mpg_z: -1.61<br />mpg_z: -1.61","car_name: Camaro Z28<br />mpg_z: -1.13<br />mpg_z: -1.13","car_name: Duster 360<br />mpg_z: -0.96<br />mpg_z: -0.96","car_name: Chrysler Imperial<br />mpg_z: -0.89<br />mpg_z: -0.89","car_name: Maserati Bora<br />mpg_z: -0.84<br />mpg_z: -0.84","car_name: Merc 450SLC<br />mpg_z: -0.81<br />mpg_z: -0.81","car_name: AMC Javelin<br />mpg_z: -0.81<br />mpg_z: -0.81","car_name: Dodge Challenger<br />mpg_z: -0.76<br />mpg_z: -0.76","car_name: Ford Pantera L<br />mpg_z: -0.71<br />mpg_z: -0.71","car_name: Merc 450SE<br />mpg_z: -0.61<br />mpg_z: -0.61","car_name: Merc 450SL<br />mpg_z: -0.46<br />mpg_z: -0.46","car_name: Merc 280C<br />mpg_z: -0.38<br />mpg_z: -0.38","car_name: Valiant<br />mpg_z: -0.33<br />mpg_z: -0.33","car_name: Hornet Sportabout<br />mpg_z: -0.23<br />mpg_z: -0.23","car_name: Merc 280<br />mpg_z: -0.15<br />mpg_z: -0.15","car_name: Pontiac Firebird<br />mpg_z: -0.15<br />mpg_z: -0.15","car_name: Ferrari Dino<br />mpg_z: -0.06<br />mpg_z: -0.06","car_name: Mazda RX4<br />mpg_z:  0.15<br />mpg_z:  0.15","car_name: Mazda RX4 Wag<br />mpg_z:  0.15<br />mpg_z:  0.15","car_name: Hornet 4 Drive<br />mpg_z:  0.22<br />mpg_z:  0.22","car_name: Volvo 142E<br />mpg_z:  0.22<br />mpg_z:  0.22","car_name: Toyota Corona<br />mpg_z:  0.23<br />mpg_z:  0.23","car_name: Datsun 710<br />mpg_z:  0.45<br />mpg_z:  0.45","car_name: Merc 230<br />mpg_z:  0.45<br />mpg_z:  0.45","car_name: Merc 240D<br />mpg_z:  0.72<br />mpg_z:  0.72","car_name: Porsche 914-2<br />mpg_z:  0.98<br />mpg_z:  0.98","car_name: Fiat X1-9<br />mpg_z:  1.20<br />mpg_z:  1.20","car_name: Honda Civic<br />mpg_z:  1.71<br />mpg_z:  1.71","car_name: Lotus Europa<br />mpg_z:  1.71<br />mpg_z:  1.71","car_name: Fiat 128<br />mpg_z:  2.04<br />mpg_z:  2.04","car_name: Toyota Corolla<br />mpg_z:  2.29<br />mpg_z:  2.29"],"textfont":{"size":7.55905511811024,"color":"rgba(255,255,255,1)"},"type":"scatter","mode":"text","hoveron":"points","showlegend":false,"xaxis":"x","yaxis":"y","hoverinfo":"text","frame":null}],"layout":{"margin":{"t":26.2283105022831,"r":7.30593607305936,"b":40.1826484018265,"l":136.62100456621},"font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187},"xaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[-1.805,2.485],"tickmode":"array","ticktext":["-1","0","1","2"],"tickvals":[-1,0,1,2],"categoryorder":"array","categoryarray":["-1","0","1","2"],"nticks":null,"ticks":"","tickcolor":null,"ticklen":3.65296803652968,"tickwidth":0,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"y","title":{"text":"mpg_z","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"yaxis":{"domain":[0,1],"automargin":true,"type":"linear","autorange":false,"range":[0.4,32.6],"tickmode":"array","ticktext":["Cadillac Fleetwood","Lincoln Continental","Camaro Z28","Duster 360","Chrysler Imperial","Maserati Bora","Merc 450SLC","AMC Javelin","Dodge Challenger","Ford Pantera L","Merc 450SE","Merc 450SL","Merc 280C","Valiant","Hornet Sportabout","Merc 280","Pontiac Firebird","Ferrari Dino","Mazda RX4","Mazda RX4 Wag","Hornet 4 Drive","Volvo 142E","Toyota Corona","Datsun 710","Merc 230","Merc 240D","Porsche 914-2","Fiat X1-9","Honda Civic","Lotus Europa","Fiat 128","Toyota Corolla"],"tickvals":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"categoryorder":"array","categoryarray":["Cadillac Fleetwood","Lincoln Continental","Camaro Z28","Duster 360","Chrysler Imperial","Maserati Bora","Merc 450SLC","AMC Javelin","Dodge Challenger","Ford Pantera L","Merc 450SE","Merc 450SL","Merc 280C","Valiant","Hornet Sportabout","Merc 280","Pontiac Firebird","Ferrari Dino","Mazda RX4","Mazda RX4 Wag","Hornet 4 Drive","Volvo 142E","Toyota Corona","Datsun 710","Merc 230","Merc 240D","Porsche 914-2","Fiat X1-9","Honda Civic","Lotus Europa","Fiat 128","Toyota Corolla"],"nticks":null,"ticks":"","tickcolor":null,"ticklen":3.65296803652968,"tickwidth":0,"showticklabels":true,"tickfont":{"color":"rgba(77,77,77,1)","family":"","size":11.689497716895},"tickangle":-0,"showline":false,"linecolor":null,"linewidth":0,"showgrid":true,"gridcolor":"rgba(235,235,235,1)","gridwidth":0.66417600664176,"zeroline":false,"anchor":"x","title":{"text":"car_name","font":{"color":"rgba(0,0,0,1)","family":"","size":14.6118721461187}},"hoverformat":".2f"},"shapes":[{"type":"rect","fillcolor":null,"line":{"color":null,"width":0,"linetype":[]},"yref":"paper","xref":"paper","x0":0,"x1":1,"y0":0,"y1":1}],"showlegend":false,"legend":{"bgcolor":null,"bordercolor":null,"borderwidth":0,"font":{"color":"rgba(0,0,0,1)","family":"","size":11.689497716895}},"hovermode":"closest","barmode":"relative"},"config":{"doubleClick":"reset","modeBarButtonsToAdd":["hoverclosest","hovercompare"],"showSendToCloud":false},"source":"A","attrs":{"3ac45aa81e7":{"x":{},"y":{},"label":{},"type":"scatter"},"3ac44cfb1eec":{"x":{},"y":{},"label":{},"yend":{},"xend":{}},"3ac46ead5eed":{"x":{},"y":{},"label":{}}},"cur_data":"3ac45aa81e7","visdat":{"3ac45aa81e7":["function (y) ","x"],"3ac44cfb1eec":["function (y) ","x"],"3ac46ead5eed":["function (y) ","x"]},"highlight":{"on":"plotly_click","persistent":false,"dynamic":false,"selectize":false,"opacityDim":0.2,"selected":{"opacity":1},"debounce":0},"shinyEvents":["plotly_hover","plotly_click","plotly_selected","plotly_relayout","plotly_brushed","plotly_brushing","plotly_clickannotation","plotly_doubleclick","plotly_deselect","plotly_afterplot","plotly_sunburstclick"],"base_url":"https://plot.ly"},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>healthyr</category>
  <category>plots</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-02/index.html</guid>
  <pubDate>Thu, 02 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Attributes in R Functions: An Overview</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>R is a powerful programming language that is widely used for data analysis, visualization, and machine learning. One of the features of R that makes it versatile and flexible is the ability to assign attributes to functions. Attributes are metadata associated with an object in R, and they can be used to store additional information about the function or to modify the behavior of the function.</p>
<p>In this blog post, we will discuss what attributes are, how they can be useful, and how they can be used inside R functions.</p>
<section id="what-are-attributes-in-r-functions" class="level2">
<h2 class="anchored" data-anchor-id="what-are-attributes-in-r-functions">What are Attributes in R Functions?</h2>
<p>Attributes are pieces of information that are stored alongside an object in R. Functions are objects in R, and they can have attributes associated with them. Some of the common attributes associated with functions in R include:</p>
<ol type="1">
<li><code>formals</code>: This attribute stores the arguments of the function and their default values.</li>
<li><code>srcref</code>: This attribute stores the source code of the function, including the line numbers of the code.</li>
<li><code>environment</code>: This attribute stores the environment in which the function was defined.</li>
</ol>
</section>
<section id="how-attributes-can-be-useful-in-r-functions" class="level2">
<h2 class="anchored" data-anchor-id="how-attributes-can-be-useful-in-r-functions">How Attributes can be Useful in R Functions</h2>
<p>Attributes can be useful in R functions in several ways, including:</p>
<ol type="1">
<li>Debugging: Attributes can be used to store information that can be used to debug functions. For example, the srcref attribute can be used to retrieve the source code of the function and the line numbers of the code, which can be useful when trying to identify the source of an error.</li>
<li>Metadata: Attributes can be used to store metadata about the function, such as the author, version, and date of creation. This information can be used to keep track of the function and to provide information about its purpose and usage.</li>
<li>Modifying Function Behavior: Attributes can be used to modify the behavior of the function. For example, the environment attribute can be used to set the environment in which the function is executed. This can be useful when creating closures or when using functions in a specific context.</li>
</ol>
</section>
<section id="how-to-use-attributes-in-r-functions" class="level2">
<h2 class="anchored" data-anchor-id="how-to-use-attributes-in-r-functions">How to Use Attributes in R Functions</h2>
<p>To access or modify the attributes of a function in R, you can use the attributes() function. For example, to retrieve the formals attribute of a function, you can use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) { x <span class="sc" style="color: #5E5E5E;">+</span> y }</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">attributes</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$srcref
function(x, y) { x + y }</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">formals</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$x


$y</code></pre>
</div>
</div>
<p>To add an attribute to a function, you can use the attr() function. For example, to add a version attribute to a function, you can use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) { x <span class="sc" style="color: #5E5E5E;">+</span> y }</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">attr</span>(f, <span class="st" style="color: #20794D;">"version"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"1.0"</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">attributes</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$srcref
function(x, y) { x + y }

$version
[1] "1.0"</code></pre>
</div>
</div>
<p>To remove an attribute from a function, you can use the attributes() function with the NULL value. For example, to remove the version attribute from a function, you can use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x, y) { x <span class="sc" style="color: #5E5E5E;">+</span> y }</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">attr</span>(f, <span class="st" style="color: #20794D;">"version"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"1.0"</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">attributes</span>(f)<span class="sc" style="color: #5E5E5E;">$</span>version <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;">attributes</span>(f)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$srcref
function(x, y) { x + y }</code></pre>
</div>
</div>
<p>Conclusion</p>
<p>Attributes are a useful feature in R functions that can be used to store additional information about the function, to debug the function, and to modify its behavior. By using attributes, you can make your functions more versatile, flexible, and easier to work with.</p>
</section>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>Here is a function from my <a href="https://www.spsanderson.com/healthyR.ts/"><code>{healthyR.ts}</code></a> package that makes use of attributes that come in from the output of another function. The function is <a href="https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html"><code>ts_brownian_motion_plot()</code></a>. Let’s go ahead and take a look at how the function works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb9-2"></span>
<span id="cb9-3"> <span class="co" style="color: #5E5E5E;"># Attributes</span></span>
<span id="cb9-4">    atb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">attributes</span>(.data)</span>
<span id="cb9-5">    </span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;"># ...</span></span>
<span id="cb9-7"></span>
<span id="cb9-8">ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb9-9">  <span class="at" style="color: #657422;">title =</span> atb<span class="sc" style="color: #5E5E5E;">$</span>.motion_type,</span>
<span id="cb9-10">  <span class="at" style="color: #657422;">subtitle =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Simulations: "</span>, atb<span class="sc" style="color: #5E5E5E;">$</span>.num_sims,</span>
<span id="cb9-11">                    <span class="st" style="color: #20794D;">" - Initial Value: "</span>, <span class="fu" style="color: #4758AB;">round</span>(atb<span class="sc" style="color: #5E5E5E;">$</span>.initial_value, <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb9-12">                    <span class="st" style="color: #20794D;">" - Delta Time: "</span>, <span class="fu" style="color: #4758AB;">round</span>(atb<span class="sc" style="color: #5E5E5E;">$</span>.delta_time, <span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb9-13">  ) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb9-14">ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="cf" style="color: #003B4F;">if</span>(atb<span class="sc" style="color: #5E5E5E;">$</span>.num_sims <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">9</span>) {<span class="st" style="color: #20794D;">"none"</span>})</span></code></pre></div>
</div>
<p>So what’s happening here is that I am taking the attributes from the incoming data which is the result of a <code>{healthyR.ts}</code> brownian motion function and setting them equal to a variable <code>atb</code>, later in the function I take that <code>atb</code> variable and pluck out certain items I want from it.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s see an example in action.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># install.packages("healthyR.ts")</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">library</span>(healthyR.ts)</span>
<span id="cb10-3"></span>
<span id="cb10-4">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ts_brownian_motion</span>()</span>
<span id="cb10-5"></span>
<span id="cb10-6">atb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">attributes</span>(df)</span>
<span id="cb10-7"></span>
<span id="cb10-8">atb[<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">names</span>(atb) <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="st" style="color: #20794D;">"row.names"</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$names
[1] "sim_number" "t"          "y"         

$class
[1] "tbl_df"     "tbl"        "data.frame"

$.time
[1] 100

$.num_sims
[1] 10

$.delta_time
[1] 1

$.initial_value
[1] 0

$.return_tibble
[1] TRUE

$.motion_type
[1] "Brownian Motion"</code></pre>
</div>
</div>
<p>Now to see the plat in action.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">ts_brownian_motion_plot</span>(df, t, y)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-02-01/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>rtip</category>
  <category>metadata</category>
  <category>attributes</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-02-01/index.html</guid>
  <pubDate>Wed, 01 Feb 2023 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
