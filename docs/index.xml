<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 01 May 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Extracting a model call from a fitted workflow in {tidymodels}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we are using a package called <code>tidymodels</code>, which provides a suite of tools for modeling and machine learning.</p>
<p>Now, let’s take a closer look at the code itself and how we extract a model call from a fitted <code>workflow</code> object.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-2"></span>
<span id="cb1-3">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb1-4">rec_obj</span></code></pre></div>
</div>
<p>The first line loads the tidymodels package. Then, we create a “recipe” object called <code>rec_obj</code> using the <code>recipe()</code> function. A recipe is a set of instructions for preparing data for modeling. In this case, we are telling the recipe to use the mpg variable as the outcome or dependent variable, and all other variables in the mtcars dataset as the predictors or independent variables.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">model_spec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">linear_reg</span>(<span class="at" style="color: #657422;">mode =</span> <span class="st" style="color: #20794D;">"regression"</span>, <span class="at" style="color: #657422;">engine =</span> <span class="st" style="color: #20794D;">"lm"</span>)</span>
<span id="cb2-2">model_spec</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>Next, we create a “model specification” object called <code>model_spec</code> using the <code>linear_reg()</code> function. This specifies the type of model we want to use, which is a linear regression model in this case. We also specify that the model is a regression (i.e., we are predicting a continuous outcome variable) and that the model engine is “lm”, which stands for “linear model”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">wflw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">add_recipe</span>(rec_obj) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">add_model</span>(model_spec)</span>
<span id="cb4-4">wflw</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow ════════════════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────
Linear Regression Model Specification (regression)

Computational engine: lm </code></pre>
</div>
</div>
<p>In the next section of code, we create a “workflow” object called <code>wflw</code> using the <code>workflow()</code> function. A workflow is a way of organizing the steps involved in building a machine learning model. In this case, we are using a “pipe” (|&gt;) to sequentially add the recipe and model specification to the workflow. This means that we first add the recipe to the workflow using the <code>add_recipe()</code> function, and then add the model specification using the <code>add_model()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">wflw_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fit</span>(wflw, <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb6-2">wflw_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>══ Workflow [trained] ══════════════════════════════════════════════════════════
Preprocessor: Recipe
Model: linear_reg()

── Preprocessor ────────────────────────────────────────────────────────────────
0 Recipe Steps

── Model ───────────────────────────────────────────────────────────────────────

Call:
stats::lm(formula = ..y ~ ., data = data)

Coefficients:
(Intercept)          cyl         disp           hp         drat           wt  
   12.30337     -0.11144      0.01334     -0.02148      0.78711     -3.71530  
       qsec           vs           am         gear         carb  
    0.82104      0.31776      2.52023      0.65541     -0.19942  </code></pre>
</div>
</div>
<p>Finally, we fit the workflow to the data using the fit() function, which takes the workflow object (wflw) and the data (mtcars) as input. This creates a new object called <code>wflw_fit</code>, which is the fitted model object. This object contains various pieces of information about the fitted model, such as the model coefficients and the R-squared value.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">wflw_fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>fit<span class="sc" style="color: #5E5E5E;">$</span>call</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>stats::lm(formula = ..y ~ ., data = data)</code></pre>
</div>
</div>
<p>The last line of code extracts the actual function call that was used to fit the model. This can be useful for reproducing the analysis later on.</p>
<p>Overall, the code you shared shows how to build a simple linear regression model using the tidymodels package in R. We start by creating a recipe that specifies the outcome variable and predictor variables, then create a model specification for a linear regression model, and finally combine these into a workflow and fit the model to the data.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-01/index.html</guid>
  <pubDate>Mon, 01 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a Shiny app for building models using the <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> which is based on the <code>tidymodels</code> package in R. The app allows you to upload your own data or choose from one of two built-in datasets (mtcars or iris) and select the type of model you want to build (regression or classification).</p>
<p>Let’s take a closer look at the code.</p>
<p>First, the necessary packages are loaded:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span></code></pre></div>
</div>
<p>The <code>tidymodels_prefer()</code> function is called to set some default options for the <code>tidymodels package</code>, and <code>load_deps()</code> from <code>tidyAML</code> is called to make sure all the necessary packages are loaded, you can also separately run <code>install_deps()</code> to make sure they all get installed.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">load_deps</span>()</span></code></pre></div>
</div>
<p>Next, the user interface (UI) is defined using the <code>fluidPage()</code> function. The UI consists of a title panel and a sidebar layout with various input elements, such as file input and select input. There are also two conditional panels that are shown depending on the selected model type (regression or classification). The UI also includes an action button and some output elements, such as <code>verbatimTextOutput</code> and <code>reactableOutput</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-5">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb3-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb3-7">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb3-8">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb3-9">      ),</span>
<span id="cb3-10">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>,</span>
<span id="cb3-11">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>,</span>
<span id="cb3-12">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb3-13">      ),</span>
<span id="cb3-14">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb3-15">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb3-16">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb3-17">      ),</span>
<span id="cb3-18">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-19">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'regression'"</span>,</span>
<span id="cb3-20">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb3-21">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-22">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb3-23">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-24">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-25">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-26">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb3-27">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb3-28">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-29">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-30">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-31">                                  <span class="fu" style="color: #4758AB;">unique</span>()))</span>
<span id="cb3-32">      ),</span>
<span id="cb3-33">      </span>
<span id="cb3-34">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-35">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'classification'"</span>,</span>
<span id="cb3-36">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb3-37">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-38">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb3-39">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-40">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-41">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-42">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb3-43">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb3-44">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-45">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-46">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-47">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb3-48">        <span class="fu" style="color: #4758AB;">checkboxInput</span>(<span class="st" style="color: #20794D;">"predictor_factor"</span>,</span>
<span id="cb3-49">                      <span class="st" style="color: #20794D;">"Convert predictor column to factor?"</span>,</span>
<span id="cb3-50">                      <span class="at" style="color: #657422;">value =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-51">      ),</span>
<span id="cb3-52">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb3-53">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb3-54">    ),</span>
<span id="cb3-55">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-56">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb3-57">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb3-58">    )</span>
<span id="cb3-59">  )</span>
<span id="cb3-60">)</span></code></pre></div>
</div>
<p>After defining the UI, the server function is defined. The server function handles the reactive behavior of the app.</p>
<p>The first reactive element is data, which reads in the data file if one is uploaded or loads the selected built-in dataset if one is chosen. It also converts the predictor column to a factor if the classification model type is selected.</p>
<p>In the server function, we first define a reactive expression <code>data()</code> that will read the data file uploaded by the user or one of the built-in datasets (mtcars or iris). If the user has uploaded a file, the function read.csv is used to read the data, and if it’s a classification problem, the predictor column is converted to a factor variable. The <code>updateSelectInput</code> function is then called to update the predictor_col select input with the names of the columns in the data. If the user has chosen one of the built-in datasets, it is loaded using the get function, and the same preprocessing is performed.</p>
<p>Next, we define an event reactive <code>recipe_obj()</code> that creates a recipes object based on the selected predictor column and normalizes the numeric variables in the data. The step_normalize function standardizes all numeric variables (except the outcome variable) to have mean 0 and standard deviation 1. This is a common preprocessing step in machine learning pipelines that can improve model performance.</p>
<p>Two reactive expressions, <code>model_engine()</code> and <code>model_fns()</code>, are then defined to generate the available model engines and functions based on the selected model type. For regression models, the <code>make_regression_base_tbl</code> functions are used, and for classification models, the <code>make_classification_base_tbl</code> functions are used. These functions return a table with information about the available model engines and functions for a given problem type. The pull function is used to extract the relevant columns from the table, and unique is used to remove duplicate values. The c function is used to concatenate the “all” choice with the available model engines or functions.</p>
<p>Finally, an event reactive <code>model()</code> is defined that builds the model based on the selected parameters. If the model type is regression, the <code>fast_regression</code> function from the tidyAML package is used, and if the model type is classification, the <code>fast_classification</code> function is used. These functions take as inputs the data, the recipes object, the selected model engine and function, and any additional model parameters.</p>
<p>There are three output functions defined in the server: <code>output$recipe_output</code>, <code>output$model_table</code>, and <code>output$model_reactable</code>. The first output function <code>output$recipe_output</code> renders a summary of the recipes object created by <code>recipe_obj()</code> if the predictor_col input is not null. The second output function <code>output$model_table</code> prints the model object returned by <code>model()</code> if the <code>build_model</code> button has been clicked. The third output function <code>output$model_reactable</code> renders a reactive table using the <code>reactable</code> function from the <code>reactable</code> package if the <code>build_model</code> button has been clicked. This table displays the tidyaml_model_tbl.</p>
<p>Overall, this code creates a Shiny web application that allows users to build machine learning models using the tidymodels framework via <code>{tidyAML}</code>. Users can upload their own data or use one of the built-in datasets, select a predictor column, choose a model type, select a model engine and function, and build the model. The output is displayed in a table that provides insights into the model’s performance and coefficients. This code is useful for data scientists and analysts who want to quickly build and evaluate machine learning models without having to write code from scratch.</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>As usual, steal this code and make it your own! See what you can do too!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb4-17">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb4-18">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb4-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb4-20">      ),</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>,</span>
<span id="cb4-22">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>,</span>
<span id="cb4-23">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb4-24">      ),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb4-26">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb4-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb4-28">      ),</span>
<span id="cb4-29">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb4-30">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'regression'"</span>,</span>
<span id="cb4-31">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb4-32">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-33">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-34">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-35">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-36">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-37">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb4-38">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb4-39">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-40">                                <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-41">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-42">                                  <span class="fu" style="color: #4758AB;">unique</span>()))</span>
<span id="cb4-43">      ),</span>
<span id="cb4-44">      </span>
<span id="cb4-45">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb4-46">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.model_type == 'classification'"</span>,</span>
<span id="cb4-47">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, </span>
<span id="cb4-48">                    <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-49">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-50">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-51">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-52">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-53">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, </span>
<span id="cb4-54">                    <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb4-55">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-56">                                <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-57">                                  <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-58">                                  <span class="fu" style="color: #4758AB;">unique</span>())),</span>
<span id="cb4-59">        <span class="fu" style="color: #4758AB;">checkboxInput</span>(<span class="st" style="color: #20794D;">"predictor_factor"</span>,</span>
<span id="cb4-60">                      <span class="st" style="color: #20794D;">"Convert predictor column to factor?"</span>,</span>
<span id="cb4-61">                      <span class="at" style="color: #657422;">value =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-62">      ),</span>
<span id="cb4-63">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb4-64">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb4-65">    ),</span>
<span id="cb4-66">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-67">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb4-68">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb4-69">    )</span>
<span id="cb4-70">  )</span>
<span id="cb4-71">)</span>
<span id="cb4-72"></span>
<span id="cb4-73">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb4-74">  </span>
<span id="cb4-75">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-76">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-77">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-78">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-79">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-80">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-81">      )</span>
<span id="cb4-82">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-83">        df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]])</span>
<span id="cb4-84">      }</span>
<span id="cb4-85">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-86">        session, </span>
<span id="cb4-87">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-88">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-89">      )</span>
<span id="cb4-90">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-91">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-92">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-93">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-94">        df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.factor</span>(df[[input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col]])</span>
<span id="cb4-95">      }</span>
<span id="cb4-96">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-97">        session, </span>
<span id="cb4-98">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-99">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-100">      )</span>
<span id="cb4-101">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-102">    }</span>
<span id="cb4-103">  })</span>
<span id="cb4-104">  </span>
<span id="cb4-105">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb4-106">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb4-107">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb4-108">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-109">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb4-110">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb4-111">  })</span>
<span id="cb4-112">  </span>
<span id="cb4-113">  model_engine <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-114">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-115">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-116">        <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-117">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-118">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-119">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-120">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-121">        <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-122">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-123">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-124">    }</span>
<span id="cb4-125">  })</span>
<span id="cb4-126">  </span>
<span id="cb4-127">  model_fns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-128">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-129">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-130">        <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-131">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-132">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-133">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-134">      <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>, </span>
<span id="cb4-135">        <span class="fu" style="color: #4758AB;">make_classification_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-136">          <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-137">          <span class="fu" style="color: #4758AB;">unique</span>())</span>
<span id="cb4-138">    }</span>
<span id="cb4-139">  })</span>
<span id="cb4-140">  </span>
<span id="cb4-141">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb4-142">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-143">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-144">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-145">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-146">                             <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-147">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-148">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-149">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-150">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-151">                                 <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-152">    }</span>
<span id="cb4-153">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb4-154">  })</span>
<span id="cb4-155">  </span>
<span id="cb4-156">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-157">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb4-158">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb4-159">    }</span>
<span id="cb4-160">  })</span>
<span id="cb4-161">  </span>
<span id="cb4-162">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-163">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-164">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-165">    }</span>
<span id="cb4-166">  })</span>
<span id="cb4-167">  </span>
<span id="cb4-168">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb4-169">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-170">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-171">    }</span>
<span id="cb4-172">  })</span>
<span id="cb4-173">  </span>
<span id="cb4-174">}</span>
<span id="cb4-175"></span>
<span id="cb4-176"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-29/index.html</guid>
  <pubDate>Sat, 29 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As data science continues to be a sought-after field, creating a reliable and accurate model is essential. While there are various machine learning algorithms available, the process of selecting the correct algorithm can be complex. The <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> package, part of the <code>tidymodels</code> suite, offers an easy-to-use, consistent interface for building machine learning models. In this post, we will explore a Shiny application that utilizes <code>tidyAML</code> to build a machine learning model.</p>
<p>Today I have updated the <code>tidyAML</code> shiny app to include the ability to set the parameter of the <code>fast_regression()</code> function <code>.parsnip_fns</code> and this is things like <code>linear_reg</code>.</p>
<p>Here is a full list of what is available:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-6">    <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb1-8">  )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "all"              "linear_reg"       "cubist_rules"     "poisson_reg"     
 [5] "bag_mars"         "bag_tree"         "bart"             "boost_tree"      
 [9] "decision_tree"    "gen_additive_mod" "mars"             "mlp"             
[13] "nearest_neighbor" "rand_forest"      "rule_fit"         "svm_linear"      
[17] "svm_poly"         "svm_rbf"         </code></pre>
</div>
</div>
<p>I have updated the UI to reflect using that method as well. Here is the UI changes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb3-2">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-3">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-4">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-5">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb3-6">                  )</span>
<span id="cb3-7">      ),</span>
<span id="cb3-8">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>,</span>
<span id="cb3-9">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb3-10">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-11">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-12">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb3-13">                              )</span></code></pre></div>
</div>
<p>Here are some pictures showing the changes:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">UI Change</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">UI Change 2</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Output</figcaption><p></p>
</figure>
</div>
<p>So what this means is that we can just pick a function like <code>parsnip::linear_reg()</code> and leave the <strong>engine</strong> set to <code>"all"</code> and it will build models for all engines supported that work with <code>linear_reg()</code>.</p>
</section>
<section id="the-shiny-application" class="level1">
<h1>The Shiny Application</h1>
<p>The Shiny application is a graphical user interface (GUI) that allows users to select a dataset, predictor column, model type, and engine, and then build a machine learning model. The user can upload a CSV or TXT file or choose one of two built-in datasets: “mtcars” or “iris”. The user can select the predictor column, which is the variable used to predict the outcome, and then choose the model type, either “regression” or “classification”. Next, the user can select a model engine and a model function to use in building the model. Once the user has made all the selections, they can click the “Build Model” button to create the model.</p>
<p>The code for the Shiny application can be broken down into two parts, the User Interface (UI) and the Server. Let’s take a closer look at each of these parts.</p>
</section>
<section id="the-ui" class="level1">
<h1>The UI</h1>
<p>The UI is created using the <code>fluidPage()</code> function from the shiny package. The <code>titlePanel()</code> function creates the title of the application. The <code>sidebarLayout()</code> function creates the sidebar and main panel. The sidebar contains input controls such as file input, select input, and an action button. The main panel displays the outputs generated by the model.</p>
<p>The <code>fileInput()</code> function creates a widget that allows the user to upload a data file. The <code>selectInput()</code> function creates dropdown menus for the user to select the dataset, predictor column, model type, model engine, and model function. The <code>actionButton()</code> function creates a button that the user clicks to build the model. The <code>verbatimTextOutput()</code> function and <code>reactableOutput()</code> function display the output generated by the model.</p>
</section>
<section id="the-server" class="level1">
<h1>The Server</h1>
<p>The Server is where the input data is processed, the model is built, and the output is generated. The Server is created using the server() function from the shiny package.</p>
<p>The <code>reactive()</code> function is used to create a reactive object called data that reads in the data file or built-in dataset selected by the user. The <code>eventReactive()</code> function is used to create a reactive object called recipe_obj that creates a recipe for preprocessing the data. The recipe includes steps to normalize the numeric variables and remove the outcome variable from the recipe.</p>
<p>Two other reactive objects, model_engine and model_fns, are created using the switch() function. These objects contain a list of available engines and model functions for the user to choose from.</p>
<p>Finally, the <code>eventReactive()</code> function is used to create a reactive object called model that builds the machine learning model. The <code>fast_regression()</code> and <code>fast_classification()</code> functions from the tidyAML package are used to build the regression and classification models, respectively.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this post, we explored a Shiny application that uses tidyAML to build a machine learning model. The application allows users to select a dataset, predictor column, model type, engine, and function to build a machine learning model. The Shiny application is an excellent tool for those who are new to machine learning or those who want to streamline the rapid prototyping process.</p>
</section>
<section id="full-application" class="level1">
<h1>Full Application</h1>
<p>This is a work in progress, and I want you to steal this code and see what you can come up with!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(rules)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb4-11"></span>
<span id="cb4-12">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"tidyAML Model Builder"</span>),</span>
<span id="cb4-14">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-15">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb4-17">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb4-18">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb4-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb4-20">      ),</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-22">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb4-23">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb4-24">      ),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb4-26">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb4-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb4-28">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_engine"</span>, <span class="st" style="color: #20794D;">"Select a model engine:"</span>, </span>
<span id="cb4-29">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-30">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-31">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_engine) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-32">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb4-33">                  )</span>
<span id="cb4-34">      ),</span>
<span id="cb4-35">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fns"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>,</span>
<span id="cb4-36">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-37">                              <span class="fu" style="color: #4758AB;">make_regression_base_tbl</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-38">                                <span class="fu" style="color: #4758AB;">pull</span>(.parsnip_fns) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-39">                                <span class="fu" style="color: #4758AB;">unique</span>()</span>
<span id="cb4-40">                              )</span>
<span id="cb4-41">      ),</span>
<span id="cb4-42">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb4-43">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb4-44">    ),</span>
<span id="cb4-45">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-46">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb4-47">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb4-48">    )</span>
<span id="cb4-49">  )</span>
<span id="cb4-50">)</span>
<span id="cb4-51"></span>
<span id="cb4-52">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb4-53">  </span>
<span id="cb4-54">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-55">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-56">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-57">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-58">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-59">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-60">      )</span>
<span id="cb4-61">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-62">        session, </span>
<span id="cb4-63">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-64">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-65">      )</span>
<span id="cb4-66">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-67">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-68">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-69">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-70">        session, </span>
<span id="cb4-71">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-72">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-73">      )</span>
<span id="cb4-74">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-75">    }</span>
<span id="cb4-76">  })</span>
<span id="cb4-77">  </span>
<span id="cb4-78">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb4-79">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb4-80">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb4-81">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-82">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb4-83">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb4-84">  })</span>
<span id="cb4-85">  </span>
<span id="cb4-86">  model_engine <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-87">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_engine,</span>
<span id="cb4-88">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-89">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb4-90">           <span class="st" style="color: #20794D;">"brulee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"brulee"</span>,</span>
<span id="cb4-91">           <span class="st" style="color: #20794D;">"gee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gee"</span>,</span>
<span id="cb4-92">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb4-93">           <span class="st" style="color: #20794D;">"glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmer"</span>,</span>
<span id="cb4-94">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>,</span>
<span id="cb4-95">           <span class="st" style="color: #20794D;">"gls"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gls"</span>,</span>
<span id="cb4-96">           <span class="st" style="color: #20794D;">"lme"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb4-97">           <span class="st" style="color: #20794D;">"lmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lmer"</span>,</span>
<span id="cb4-98">           <span class="st" style="color: #20794D;">"stan"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan"</span>,</span>
<span id="cb4-99">           <span class="st" style="color: #20794D;">"stan_glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb4-100">           <span class="st" style="color: #20794D;">"Cubist"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"Cubist"</span>,</span>
<span id="cb4-101">           <span class="st" style="color: #20794D;">"hurdle"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"hurdle"</span>,</span>
<span id="cb4-102">           <span class="st" style="color: #20794D;">"zeroinfl"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"zeroinfl"</span>,</span>
<span id="cb4-103">           <span class="st" style="color: #20794D;">"earth"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb4-104">           <span class="st" style="color: #20794D;">"rpart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rpart"</span>,</span>
<span id="cb4-105">           <span class="st" style="color: #20794D;">"dbarts"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"dbarts"</span>,</span>
<span id="cb4-106">           <span class="st" style="color: #20794D;">"xgboost"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xgboost"</span>          ,</span>
<span id="cb4-107">           <span class="st" style="color: #20794D;">"lightgbm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb4-108">           <span class="st" style="color: #20794D;">"partykit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"partykit"</span>,</span>
<span id="cb4-109">           <span class="st" style="color: #20794D;">"mgcv"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mgcv"</span>,</span>
<span id="cb4-110">           <span class="st" style="color: #20794D;">"nnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nnet"</span>,</span>
<span id="cb4-111">           <span class="st" style="color: #20794D;">"kknn"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"kknn"</span>,</span>
<span id="cb4-112">           <span class="st" style="color: #20794D;">"ranger"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb4-113">           <span class="st" style="color: #20794D;">"randomForest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"randomForest"</span>,</span>
<span id="cb4-114">           <span class="st" style="color: #20794D;">"xrf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xrf"</span>,</span>
<span id="cb4-115">           <span class="st" style="color: #20794D;">"LiblineaR"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"LiblineaR"</span>,</span>
<span id="cb4-116">           <span class="st" style="color: #20794D;">"kernlab = kernlab"</span>)</span>
<span id="cb4-117">  })</span>
<span id="cb4-118">  </span>
<span id="cb4-119">  model_fns <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-120">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fns,</span>
<span id="cb4-121">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb4-122">           <span class="st" style="color: #20794D;">"linear_reg"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"linear_reg"</span>,</span>
<span id="cb4-123">           <span class="st" style="color: #20794D;">"cubist_rules"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"cubist_rules"</span>,</span>
<span id="cb4-124">           <span class="st" style="color: #20794D;">"poisson_reg"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"poisson_reg"</span>,</span>
<span id="cb4-125">           <span class="st" style="color: #20794D;">"bag_mars"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bag_mars"</span>,</span>
<span id="cb4-126">           <span class="st" style="color: #20794D;">"bag_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bag_tree"</span>,</span>
<span id="cb4-127">           <span class="st" style="color: #20794D;">"bart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"bart"</span>,</span>
<span id="cb4-128">           <span class="st" style="color: #20794D;">"boost_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"boost_tree"</span>,</span>
<span id="cb4-129">           <span class="st" style="color: #20794D;">"decision_tree"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"decision_tree"</span>,</span>
<span id="cb4-130">           <span class="st" style="color: #20794D;">"gen_additive_mod"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gen_additive_mod"</span>,</span>
<span id="cb4-131">           <span class="st" style="color: #20794D;">"mars"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mars"</span>,</span>
<span id="cb4-132">           <span class="st" style="color: #20794D;">"mlp"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mlp"</span>,</span>
<span id="cb4-133">           <span class="st" style="color: #20794D;">"nearest_neighbor"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nearest_neighbor"</span>,</span>
<span id="cb4-134">           <span class="st" style="color: #20794D;">"rand_forest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rand_forest"</span>,</span>
<span id="cb4-135">           <span class="st" style="color: #20794D;">"rule_fit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rule_fit"</span>,</span>
<span id="cb4-136">           <span class="st" style="color: #20794D;">"svm_linear"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_linear"</span>,</span>
<span id="cb4-137">           <span class="st" style="color: #20794D;">"svm_poly"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_poly"</span>,</span>
<span id="cb4-138">           <span class="st" style="color: #20794D;">"svm_rbf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"svm_rbf"</span></span>
<span id="cb4-139">    )</span>
<span id="cb4-140">  })</span>
<span id="cb4-141">  </span>
<span id="cb4-142">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb4-143">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb4-144">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-145">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-146">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-147">                             <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-148">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb4-149">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb4-150">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb4-151">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_engine</span>(),</span>
<span id="cb4-152">                                 <span class="at" style="color: #657422;">.parsnip_fns =</span> <span class="fu" style="color: #4758AB;">model_fns</span>())</span>
<span id="cb4-153">    }</span>
<span id="cb4-154">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb4-155">  })</span>
<span id="cb4-156">  </span>
<span id="cb4-157">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-158">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb4-159">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb4-160">    }</span>
<span id="cb4-161">  })</span>
<span id="cb4-162">  </span>
<span id="cb4-163">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb4-164">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-165">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-166">    }</span>
<span id="cb4-167">  })</span>
<span id="cb4-168">  </span>
<span id="cb4-169">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb4-170">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-171">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb4-172">    }</span>
<span id="cb4-173">  })</span>
<span id="cb4-174">  </span>
<span id="cb4-175">}</span>
<span id="cb4-176"></span>
<span id="cb4-177"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/index.html</guid>
  <pubDate>Thu, 27 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-27/1.PNG" medium="image"/>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I spoke about building <code>tidymodels</code> models using my package <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> and <code>{shiny}</code>. I have made an update to it, and will continue to make updates to it this week.</p>
<p>I have added all of the supported engines for <strong>regression</strong> problems only, <em>NOT</em> <strong>classification</strong> yet, that will be tomorrow’s work. I will then add a drop down for users to pick which backend function they want to use from <code>{parsnp}</code> like <code>linear_reg()</code>.</p>
<p>Here are some pictures of the udpates.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">New Drop Down Additions</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reactable Error, not sure on how to fix yet</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">reactable output</figcaption><p></p>
</figure>
</div>
<p>Here is the full application, please steal this code and modify for yourself, you never know what you might come up with!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(tidymodels)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(reactable)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">tidymodels_prefer</span>()</span>
<span id="cb1-10"></span>
<span id="cb1-11">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb1-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb1-17">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb1-18">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb1-19">                  ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-21">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb1-22">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb1-23">                  ),</span>
<span id="cb1-24">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb1-25">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb1-26">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb1-27">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fn"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb1-28">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"all"</span>,<span class="st" style="color: #20794D;">"lm"</span>,<span class="st" style="color: #20794D;">"brulee"</span>,<span class="st" style="color: #20794D;">"gee"</span>,<span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb1-29">                              <span class="st" style="color: #20794D;">"glmer"</span>,<span class="st" style="color: #20794D;">"glmnet"</span>,<span class="st" style="color: #20794D;">"gls"</span>,<span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb1-30">                              <span class="st" style="color: #20794D;">"lmer"</span>,<span class="st" style="color: #20794D;">"stan"</span>,<span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb1-31">                              <span class="st" style="color: #20794D;">"Cubist"</span>,<span class="st" style="color: #20794D;">"hurdle"</span>,<span class="st" style="color: #20794D;">"zeroinfl"</span>,<span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb1-32">                              <span class="st" style="color: #20794D;">"rpart"</span>,<span class="st" style="color: #20794D;">"dbarts"</span>,<span class="st" style="color: #20794D;">"xgboost"</span>,<span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb1-33">                              <span class="st" style="color: #20794D;">"partykit"</span>,<span class="st" style="color: #20794D;">"mgcv"</span>,<span class="st" style="color: #20794D;">"nnet"</span>,<span class="st" style="color: #20794D;">"kknn"</span>,<span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb1-34">                              <span class="st" style="color: #20794D;">"randomForest"</span>,<span class="st" style="color: #20794D;">"xrf"</span>,<span class="st" style="color: #20794D;">"LiblineaR"</span>,<span class="st" style="color: #20794D;">"kernlab"</span></span>
<span id="cb1-35">                            )</span>
<span id="cb1-36">                  ),</span>
<span id="cb1-37">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb1-38">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb1-39">    ),</span>
<span id="cb1-40">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-41">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>),</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">reactableOutput</span>(<span class="st" style="color: #20794D;">"model_reactable"</span>)</span>
<span id="cb1-43">    )</span>
<span id="cb1-44">  )</span>
<span id="cb1-45">)</span>
<span id="cb1-46"></span>
<span id="cb1-47">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb1-48">  </span>
<span id="cb1-49">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb1-50">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb1-51">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb1-52">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb1-53">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb1-54">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb1-55">        )</span>
<span id="cb1-56">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb1-57">        session, </span>
<span id="cb1-58">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-59">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb1-60">        )</span>
<span id="cb1-61">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb1-62">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb1-63">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb1-64">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb1-65">        session, </span>
<span id="cb1-66">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb1-67">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb1-68">        )</span>
<span id="cb1-69">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb1-70">    }</span>
<span id="cb1-71">  })</span>
<span id="cb1-72">  </span>
<span id="cb1-73">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb1-74">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb1-75">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb1-76">                  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-77">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb1-78">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb1-79">  })</span>
<span id="cb1-80">  </span>
<span id="cb1-81">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb1-82">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb1-83">           <span class="st" style="color: #20794D;">"all"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"all"</span>,</span>
<span id="cb1-84">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb1-85">           <span class="st" style="color: #20794D;">"brulee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"brulee"</span>,</span>
<span id="cb1-86">           <span class="st" style="color: #20794D;">"gee"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gee"</span>,</span>
<span id="cb1-87">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb1-88">           <span class="st" style="color: #20794D;">"glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmer"</span>,</span>
<span id="cb1-89">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>,</span>
<span id="cb1-90">           <span class="st" style="color: #20794D;">"gls"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"gls"</span>,</span>
<span id="cb1-91">           <span class="st" style="color: #20794D;">"lme"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lme"</span>,</span>
<span id="cb1-92">           <span class="st" style="color: #20794D;">"lmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lmer"</span>,</span>
<span id="cb1-93">           <span class="st" style="color: #20794D;">"stan"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan"</span>,</span>
<span id="cb1-94">           <span class="st" style="color: #20794D;">"stan_glmer"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"stan_glmer"</span>,</span>
<span id="cb1-95">           <span class="st" style="color: #20794D;">"Cubist"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"Cubist"</span>,</span>
<span id="cb1-96">           <span class="st" style="color: #20794D;">"hurdle"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"hurdle"</span>,</span>
<span id="cb1-97">           <span class="st" style="color: #20794D;">"zeroinfl"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"zeroinfl"</span>,</span>
<span id="cb1-98">           <span class="st" style="color: #20794D;">"earth"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"earth"</span>,</span>
<span id="cb1-99">           <span class="st" style="color: #20794D;">"rpart"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"rpart"</span>,</span>
<span id="cb1-100">           <span class="st" style="color: #20794D;">"dbarts"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"dbarts"</span>,</span>
<span id="cb1-101">           <span class="st" style="color: #20794D;">"xgboost"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xgboost"</span>          ,</span>
<span id="cb1-102">           <span class="st" style="color: #20794D;">"lightgbm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lightgbm"</span>,</span>
<span id="cb1-103">           <span class="st" style="color: #20794D;">"partykit"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"partykit"</span>,</span>
<span id="cb1-104">           <span class="st" style="color: #20794D;">"mgcv"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"mgcv"</span>,</span>
<span id="cb1-105">           <span class="st" style="color: #20794D;">"nnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"nnet"</span>,</span>
<span id="cb1-106">           <span class="st" style="color: #20794D;">"kknn"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"kknn"</span>,</span>
<span id="cb1-107">           <span class="st" style="color: #20794D;">"ranger"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"ranger"</span>,</span>
<span id="cb1-108">           <span class="st" style="color: #20794D;">"randomForest"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"randomForest"</span>,</span>
<span id="cb1-109">           <span class="st" style="color: #20794D;">"xrf"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"xrf"</span>,</span>
<span id="cb1-110">           <span class="st" style="color: #20794D;">"LiblineaR"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"LiblineaR"</span>,</span>
<span id="cb1-111">           <span class="st" style="color: #20794D;">"kernlab = kernlab"</span>)</span>
<span id="cb1-112">  })</span>
<span id="cb1-113">  </span>
<span id="cb1-114">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb1-115">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb1-116">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb1-117">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb1-118">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb1-119">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb1-120">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb1-121">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb1-122">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb1-123">    }</span>
<span id="cb1-124">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb1-125">  })</span>
<span id="cb1-126">  </span>
<span id="cb1-127">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb1-128">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb1-129">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb1-130">    }</span>
<span id="cb1-131">  })</span>
<span id="cb1-132">  </span>
<span id="cb1-133">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb1-134">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-135">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb1-136">    }</span>
<span id="cb1-137">  })</span>
<span id="cb1-138">  </span>
<span id="cb1-139">  output<span class="sc" style="color: #5E5E5E;">$</span>model_reactable <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderReactable</span>({</span>
<span id="cb1-140">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb1-141">      <span class="fu" style="color: #4758AB;">reactable</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb1-142">    }</span>
<span id="cb1-143">  })</span>
<span id="cb1-144">  </span>
<span id="cb1-145">}</span>
<span id="cb1-146"></span>
<span id="cb1-147"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/index.html</guid>
  <pubDate>Wed, 26 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-26/1.PNG" medium="image"/>
</item>
<item>
  <title>Building models with {shiny} and {tidyAML} Part 1</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Welcome to the <a href="https://www.spsanderson.com/tidyAML/"><code>{tidyAML}</code></a> Model Builder, a Shiny web application that allows you to build predictive models using the <code>tidyAML</code> and Parsnip packages in R.</p>
<p>Let’s dive into the code to understand how it works!</p>
</section>
<section id="load-libraries" class="level1">
<h1>Load Libraries</h1>
<p>First, we load the necessary packages:</p>
<ul>
<li><code>shiny</code></li>
<li><code>tidyAML</code></li>
<li><code>recipes</code></li>
<li><code>DT</code></li>
<li><code>glmnet.</code></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span></code></pre></div>
</div>
</section>
<section id="ui" class="level1">
<h1>UI</h1>
<p>Next, we define the user interface (UI) of the Shiny app using the <code>fluidPage()</code> function from the <code>shiny</code> package. The UI consists of a title panel, a sidebar panel, and a main panel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-5">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb2-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-7">        <span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb2-8">        <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb2-9">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb2-10">      ),</span>
<span id="cb2-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-12">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb2-13">        <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb2-14">        <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb2-15">      ),</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-17">        <span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb2-18">        <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb2-19">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)</span>
<span id="cb2-20">      ),</span>
<span id="cb2-21">      <span class="fu" style="color: #4758AB;">selectInput</span>(</span>
<span id="cb2-22">        <span class="st" style="color: #20794D;">"model_fn"</span>, </span>
<span id="cb2-23">        <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb2-24">         <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>, <span class="st" style="color: #20794D;">"glm"</span>, <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb2-25">      ),</span>
<span id="cb2-26">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb2-27">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb2-28">    ),</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-30">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>)</span>
<span id="cb2-31">    )</span>
<span id="cb2-32">  )</span>
<span id="cb2-33">)</span></code></pre></div>
</div>
<p>The <code>sidebarPanel()</code> contains several input elements that allow the user to specify the dataset, the predictor column, the type of model, and the model function. There is also an input element that allows the user to upload their own data file. The <code>actionButton()</code> is used to trigger the model building process. Finally, the <code>verbatimTextOutput()</code> element is used to display the output of the model building process.</p>
<p>The <code>mainPanel()</code> contains a single <code>verbatimTextOutput()</code> element that displays the output of the model building process.</p>
<p>Next, we define the server function, which is responsible for handling the user inputs and building the predictive models. The server function takes three arguments:<code>input</code>, <code>output</code>, and <code>session</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session){</span>
<span id="cb3-2">  ...</span>
<span id="cb3-3">}</span></code></pre></div>
</div>
<p>We start by defining a reactive expression called <code>data</code>. This expression reads in the user-specified dataset or data file and updates the <code>predictor_col</code> select input with the names of the columns of the dataset.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb4-3">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb4-4">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb4-5">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb4-6">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-7">        )</span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-9">        session, </span>
<span id="cb4-10">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-11">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-12">        )</span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-14">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb4-15">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb4-16">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb4-17">        session, </span>
<span id="cb4-18">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb4-19">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb4-20">        )</span>
<span id="cb4-21">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb4-22">    }</span>
<span id="cb4-23">  })</span></code></pre></div>
</div>
<p>The first reactive expression, <code>data</code>, reads in the data file uploaded by the user or selects a built-in dataset, depending on which option the user chooses. If the user uploads a file, the <code>read.csv()</code> function is used to read the data file into a data frame. If the user selects a built-in dataset, the <code>get()</code> function is used to retrieve the data frame associated with that dataset. In both cases, the column names of the data frame are used to update the choices in the <code>predictor_col</code> select input, so that the user can select which column to use as the predictor variable.</p>
<p>The next reactive expression, <code>recipe_obj</code>, creates a recipe object based on the<code>predictor_col</code> selected by the user and the data frame returned by <code>data()</code>. The <code>as.formula()</code> function is used to create a formula that specifies the predictor column as the response variable and all other columns as the predictors. The resulting formula is passed to the <code>recipe()</code> function, along with the data frame. The <code>step_normalize()</code> function is then used to standardize all numeric predictors (except for the outcome variable) to have a mean of 0 and a standard deviation of 1. The resulting recipe object is returned by the reactive expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb5-2">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb5-3">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-4">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb5-5">    </span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb5-7">  })</span></code></pre></div>
</div>
<p>The model_fn reactive expression uses a <code>switch()</code> statement to determine which model function to use based on the <code>model_fn</code> select input. The available options are <code>"lm"</code> (for linear regression), <code>"glm"</code> (for generalized linear models), and <code>"glmnet"</code> (for regularized linear models).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;">switch</span>(</span>
<span id="cb6-3">      input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb6-4">      <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb6-5">      <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb6-6">      <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span></span>
<span id="cb6-7">    )</span>
<span id="cb6-8">  })</span></code></pre></div>
</div>
<p>The last reactive expression, model, uses the <code>fast_regression()</code> or <code>fast_classification()</code> functions from the <code>tidyAML</code> package to build a regression or classification model based on the data, recipe, and model function selected by the user. The resulting model object is returned by the reactive expression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb7-3">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(</span>
<span id="cb7-4">        <span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb7-5">        <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb7-6">        <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>()</span>
<span id="cb7-7">      )</span>
<span id="cb7-8">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb7-9">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(</span>
<span id="cb7-10">        <span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb7-11">        <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb7-12">        <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>()</span>
<span id="cb7-13">      )</span>
<span id="cb7-14">    }</span>
<span id="cb7-15">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb7-16">  })</span></code></pre></div>
</div>
<p>Finally we output the summary of the <code>recipe_obj</code> and print the resulting <code>tibble</code> of model(s) to the screen.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb8-2">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb8-3">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb8-4">    }</span>
<span id="cb8-5">  })</span>
<span id="cb8-6">  </span>
<span id="cb8-7">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb8-8">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb8-9">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb8-10">    }</span>
<span id="cb8-11">  })</span></code></pre></div>
</div>
<p>And of course, we cannot serve our app until we run the following line:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>I hope you have enjoyed this post. Please steal this code and see what you can do with it. I am trying to figure out how to print the tibble using the DT package so maybe in another post.</p>
</section>
<section id="full-shiny-app" class="level1">
<h1>Full Shiny App</h1>
<p>Here are some pictures <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/1.PNG" class="img-fluid" alt="Initial Panel"></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/2.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Making a recipe change</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/3.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Single Model Output</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/4.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Two Model Output with one successful failure</figcaption><p></p>
</figure>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">library</span>(tidyAML)</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;">library</span>(glmnet)</span>
<span id="cb10-6"></span>
<span id="cb10-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb10-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyAML Model Builder"</span>),</span>
<span id="cb10-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb10-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb10-11">      <span class="fu" style="color: #4758AB;">fileInput</span>(<span class="st" style="color: #20794D;">"file"</span>, <span class="st" style="color: #20794D;">"Upload your data file (csv or txt):"</span>),</span>
<span id="cb10-12">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"dataset"</span>, </span>
<span id="cb10-13">                  <span class="st" style="color: #20794D;">"Choose a built-in dataset:"</span>, </span>
<span id="cb10-14">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mtcars"</span>, <span class="st" style="color: #20794D;">"iris"</span>)</span>
<span id="cb10-15">                  ),</span>
<span id="cb10-16">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-17">                  <span class="st" style="color: #20794D;">"Select the predictor column:"</span>, </span>
<span id="cb10-18">                  <span class="at" style="color: #657422;">choices =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb10-19">                  ),</span>
<span id="cb10-20">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_type"</span>, </span>
<span id="cb10-21">                  <span class="st" style="color: #20794D;">"Select a model type:"</span>, </span>
<span id="cb10-22">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"regression"</span>, <span class="st" style="color: #20794D;">"classification"</span>)),</span>
<span id="cb10-23">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"model_fn"</span>, <span class="st" style="color: #20794D;">"Select a model function:"</span>, </span>
<span id="cb10-24">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"lm"</span>, <span class="st" style="color: #20794D;">"glm"</span>, <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb10-25">                  ),</span>
<span id="cb10-26">      <span class="fu" style="color: #4758AB;">actionButton</span>(<span class="st" style="color: #20794D;">"build_model"</span>, <span class="st" style="color: #20794D;">"Build Model"</span>),</span>
<span id="cb10-27">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"recipe_output"</span>)</span>
<span id="cb10-28">    ),</span>
<span id="cb10-29">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb10-30">      <span class="fu" style="color: #4758AB;">verbatimTextOutput</span>(<span class="st" style="color: #20794D;">"model_table"</span>)</span>
<span id="cb10-31">    )</span>
<span id="cb10-32">  )</span>
<span id="cb10-33">)</span>
<span id="cb10-34"></span>
<span id="cb10-35">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output, session) {</span>
<span id="cb10-36">  </span>
<span id="cb10-37">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb10-38">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>file)) {</span>
<span id="cb10-39">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb10-40">        input<span class="sc" style="color: #5E5E5E;">$</span>file<span class="sc" style="color: #5E5E5E;">$</span>datapath, </span>
<span id="cb10-41">        <span class="at" style="color: #657422;">header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, </span>
<span id="cb10-42">        <span class="at" style="color: #657422;">stringsAsFactors =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb10-43">        )</span>
<span id="cb10-44">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb10-45">        session, </span>
<span id="cb10-46">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-47">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb10-48">        )</span>
<span id="cb10-49">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb10-50">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)) {</span>
<span id="cb10-51">      df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>dataset)</span>
<span id="cb10-52">      <span class="fu" style="color: #4758AB;">updateSelectInput</span>(</span>
<span id="cb10-53">        session, </span>
<span id="cb10-54">        <span class="st" style="color: #20794D;">"predictor_col"</span>, </span>
<span id="cb10-55">        <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(df)</span>
<span id="cb10-56">        )</span>
<span id="cb10-57">      <span class="fu" style="color: #4758AB;">return</span>(df)</span>
<span id="cb10-58">    }</span>
<span id="cb10-59">  })</span>
<span id="cb10-60">  </span>
<span id="cb10-61">  recipe_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, {</span>
<span id="cb10-62">    rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">as.formula</span>(<span class="fu" style="color: #4758AB;">paste</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col, <span class="st" style="color: #20794D;">"~ ."</span>)), </span>
<span id="cb10-63">                  <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data</span>()</span>
<span id="cb10-64">                  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-65">      <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_numeric</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span>
<span id="cb10-66">    <span class="fu" style="color: #4758AB;">return</span>(rec)</span>
<span id="cb10-67">  })</span>
<span id="cb10-68">  </span>
<span id="cb10-69">  model_fn <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb10-70">    <span class="cf" style="color: #003B4F;">switch</span>(input<span class="sc" style="color: #5E5E5E;">$</span>model_fn,</span>
<span id="cb10-71">           <span class="st" style="color: #20794D;">"lm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"lm"</span>,</span>
<span id="cb10-72">           <span class="st" style="color: #20794D;">"glm"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glm"</span>,</span>
<span id="cb10-73">           <span class="st" style="color: #20794D;">"glmnet"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"glmnet"</span>)</span>
<span id="cb10-74">  })</span>
<span id="cb10-75">  </span>
<span id="cb10-76">  model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">eventReactive</span>(input<span class="sc" style="color: #5E5E5E;">$</span>build_model, {</span>
<span id="cb10-77">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"regression"</span>) {</span>
<span id="cb10-78">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_regression</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb10-79">                             <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb10-80">                             <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb10-81">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"classification"</span>) {</span>
<span id="cb10-82">      mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fast_classification</span>(<span class="at" style="color: #657422;">.data =</span> <span class="fu" style="color: #4758AB;">data</span>(),</span>
<span id="cb10-83">                                 <span class="at" style="color: #657422;">.rec_obj =</span> <span class="fu" style="color: #4758AB;">recipe_obj</span>(),</span>
<span id="cb10-84">                                 <span class="at" style="color: #657422;">.parsnip_eng =</span> <span class="fu" style="color: #4758AB;">model_fn</span>())</span>
<span id="cb10-85">    }</span>
<span id="cb10-86">    <span class="fu" style="color: #4758AB;">return</span>(mod)</span>
<span id="cb10-87">  })</span>
<span id="cb10-88">  </span>
<span id="cb10-89">  output<span class="sc" style="color: #5E5E5E;">$</span>recipe_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb10-90">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(input<span class="sc" style="color: #5E5E5E;">$</span>predictor_col)) {</span>
<span id="cb10-91">      <span class="fu" style="color: #4758AB;">summary</span>(<span class="fu" style="color: #4758AB;">recipe_obj</span>())</span>
<span id="cb10-92">    }</span>
<span id="cb10-93">  })</span>
<span id="cb10-94">  </span>
<span id="cb10-95">  output<span class="sc" style="color: #5E5E5E;">$</span>model_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPrint</span>({</span>
<span id="cb10-96">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>build_model <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb10-97">      <span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">model</span>())</span>
<span id="cb10-98">    }</span>
<span id="cb10-99">  })</span>
<span id="cb10-100">  </span>
<span id="cb10-101">}</span>
<span id="cb10-102"></span>
<span id="cb10-103"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidymodels</category>
  <category>tidyaml</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/index.html</guid>
  <pubDate>Tue, 25 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-25/1.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny}, {TidyDensity} and {plotly} Part 5</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I have been writing about using the <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> package with <code>shiny</code> for the last few posts, and this one is the last. This post will go over the app and discuss how to change the output of the graph from a <code>ggplot2</code> object into a <code>plotly</code> object. So we will end up with something like this in the menu panel:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture1.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Plotly Output</figcaption><p></p>
</figure>
</div>
<p>And here is the difference between the plots, first the <strong>ggplot2</strong> plot: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture3.PNG" class="img-fluid" alt="ggplot2 Plot"></p>
<p>And the <strong>plotly_plot</strong>: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture2.PNG" class="img-fluid" alt="plotly plot"></p>
<p>First, the required libraries are loaded: <code>shiny</code>, <code>TidyDensity</code>, <code>tidyverse</code>, <code>DT</code>, and <code>plotly</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span></code></pre></div>
</div>
</section>
<section id="ui" class="level1">
<h1>UI</h1>
<p>The user interface (UI) is defined using the <code>fluidPage()</code> function from the <code>shiny</code> package. The UI consists of a title panel, a sidebar panel, and a main panel. The title panel simply displays the title of the app, while the sidebar panel contains user input elements such as radio buttons, text inputs, and numeric inputs. The main panel displays the plot, data table, and download button.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-5">      <span class="co" style="color: #5E5E5E;"># user input elements</span></span>
<span id="cb2-6">    ),</span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-8">      <span class="co" style="color: #5E5E5E;"># plot, data table, and download button</span></span>
<span id="cb2-9">    )</span>
<span id="cb2-10">  )</span>
<span id="cb2-11">)</span></code></pre></div>
</div>
<p>Next, the server is defined using the <code>server()</code> function from the <code>shiny</code> package. The server is responsible for generating the output based on the user inputs. The first step is to create reactive data using the <code>reactive()</code> function. The reactive data is created based on the user inputs for the distribution function or the entered data. The <code>match.fun()</code> function is used to match the selected function with the corresponding function in the <code>TidyDensity package</code>. The <code>tidy_empirical()</code> function is used if the user entered their own data.</p>
</section>
<section id="server" class="level1">
<h1>Server</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-2">  </span>
<span id="cb3-3">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-4">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-7">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb3-8">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb3-9">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb3-10">      }</span>
<span id="cb3-11">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb3-12">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb3-13">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-14">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-15">    }</span>
<span id="cb3-16">  })</span></code></pre></div>
</div>
<p>After the reactive data is created, the output is generated. The output consists of the density plot, data table, and download button. The <code>renderPlot()</code> and <code>renderPlotly()</code> functions are used to generate the plot output. The <code>renderDataTable()</code> function is used to generate the data table output. The <code>downloadHandler()</code> function is used to generate the download button.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb4-2">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-5">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-6">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-7">      </span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb4-9">      </span>
<span id="cb4-10">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb4-11">    }</span>
<span id="cb4-12">  })</span>
<span id="cb4-13">  </span>
<span id="cb4-14">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-16">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-18">      </span>
<span id="cb4-19">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb4-20">    }</span>
<span id="cb4-21">  })</span>
<span id="cb4-22">  </span>
<span id="cb4-23">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb4-24">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb4-25">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb4-27">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span></code></pre></div>
</div>
<p>Next, we define the server function, which contains the code that will run in response to user input. We start by creating a reactive data object called data. This object will store the data that will be used to generate the plots and tables in the app.</p>
<p>The data that data stores depends on the user’s input. If the user selects “Enter Data” in the sidebar, then data will be set to a <code>tidy_empirical()</code> object generated from the user-entered data. Otherwise, if the user selects “Select Function”, then data will be set to a <code>tidy_</code> function object generated using the user’s choices for number of simulations and sample size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb5-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb5-3">  </span>
<span id="cb5-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb5-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb5-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb5-7">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb5-8">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb5-9">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb5-10">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb5-11">      }</span>
<span id="cb5-12">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb5-13">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb5-14">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-15">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb5-16">    }</span>
<span id="cb5-17">  })</span>
<span id="cb5-18">  ...</span>
<span id="cb5-19">}</span></code></pre></div>
</div>
<p>The <code>tidy_empirical()</code> function is used to generate a density plot of the empirical distribution of the user-entered data. This function takes the user-entered data as input and returns a tidy data frame that can be used to create a density plot.</p>
<p>The <code>tidy_</code> functions are used to simulate data from various distributions and generate plots based on that data. These functions take the number of simulations and sample size as input and return a tidy data frame that can be used to create various types of plots.</p>
<p>Next, we define the code for generating the density plot. This code uses the data object that was created earlier to generate a plot. The <code>tidy_autoplot()</code> function is used to generate the plot based on the user’s selected plot type. If the user selects the “Use Plotly” option, then the plot is generated using the <code>ggplotly()</code> function from the <code>plotly</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"> <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb6-2">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb6-5">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-6">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb6-7">      </span>
<span id="cb6-8">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb6-9">      </span>
<span id="cb6-10">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb6-11">    }</span>
<span id="cb6-12">  })</span>
<span id="cb6-13">  </span>
<span id="cb6-14">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb6-16">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-17">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb6-18">      </span>
<span id="cb6-19">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb6-20">    }</span>
<span id="cb6-21">  })</span></code></pre></div>
</div>
<p>The <code>ggplotly()</code> function is used to generate an interactive version of the plot that can be zoomed in and out of and hovered over to see details about specific data points.</p>
<p>Next, we define the code for generating the data table. This code simply displays the data object as a table using the <code>datatable()</code> function from the DT package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb7-2">output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb7-4">  <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb7-5">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb7-6">  }</span>
<span id="cb7-7">})</span></code></pre></div>
</div>
<p>Finally, we define the code for downloading the data as a CSV file. This code uses the <code>downloadHandler()</code> function to generate a file download link that, when clicked, will download the data as a CSV file. The name of the CSV file depends on the user’s input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb8-2">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb8-3">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb8-4">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb8-5">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb8-6">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-7">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb8-8">      }</span>
<span id="cb8-9">    },</span>
<span id="cb8-10">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb8-11">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb8-12">    }</span>
<span id="cb8-13">  )</span></code></pre></div>
</div>
<p>Finally, here is the script in it’s entirety, steal it and see what you can come up with!!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">library</span>(plotly)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb9-8">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb9-9">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb9-11">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb9-12">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb9-13">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb9-14">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb9-15">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb9-16">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-17">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb9-18">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb9-19">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb9-20">      ),</span>
<span id="cb9-21">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-22">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb9-23">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb9-24">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb9-25">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb9-26">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb9-27">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb9-28">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb9-29">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb9-30">                    )</span>
<span id="cb9-31">        )</span>
<span id="cb9-32">      ),</span>
<span id="cb9-33">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb9-34">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb9-35">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb9-36">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb9-37">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb9-38">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb9-39">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb9-40">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb9-41">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb9-42">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb9-43">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb9-44">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb9-45">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb9-46">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb9-47">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb9-48">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb9-49">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb9-50">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb9-51">                  )</span>
<span id="cb9-52">      ),</span>
<span id="cb9-53">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plotly_option"</span>,</span>
<span id="cb9-54">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Use Plotly"</span>,</span>
<span id="cb9-55">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"TRUE"</span>, <span class="st" style="color: #20794D;">"FALSE"</span>),</span>
<span id="cb9-56">                  <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"FALSE"</span></span>
<span id="cb9-57">      ),</span>
<span id="cb9-58">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb9-59">    ),</span>
<span id="cb9-60">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-61">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-62">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.plotly_option == 'TRUE'"</span>,</span>
<span id="cb9-63">        <span class="fu" style="color: #4758AB;">plotlyOutput</span>(<span class="st" style="color: #20794D;">"density_plotly"</span>)</span>
<span id="cb9-64">      ),</span>
<span id="cb9-65">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb9-66">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.plotly_option == 'FALSE'"</span>,</span>
<span id="cb9-67">        <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>)</span>
<span id="cb9-68">      ),</span>
<span id="cb9-69">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb9-70">    )</span>
<span id="cb9-71">  )</span>
<span id="cb9-72">)</span>
<span id="cb9-73"></span>
<span id="cb9-74"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb9-75">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb9-76">  </span>
<span id="cb9-77">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb9-78">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb9-79">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb9-80">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb9-81">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb9-82">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb9-83">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb9-84">      }</span>
<span id="cb9-85">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb9-86">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb9-87">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-88">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb9-89">    }</span>
<span id="cb9-90">  })</span>
<span id="cb9-91">  </span>
<span id="cb9-92">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb9-93">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb9-94">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb9-95">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-96">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb9-97">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb9-98">      </span>
<span id="cb9-99">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb9-100">      </span>
<span id="cb9-101">      <span class="co" style="color: #5E5E5E;">#ifelse(input$plotly_option == "TRUE", ggplotly(p), p)</span></span>
<span id="cb9-102">    }</span>
<span id="cb9-103">  })</span>
<span id="cb9-104">  </span>
<span id="cb9-105">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plotly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlotly</span>({</span>
<span id="cb9-106">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-107">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb9-108">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb9-109">      </span>
<span id="cb9-110">      <span class="fu" style="color: #4758AB;">ggplotly</span>(p)</span>
<span id="cb9-111">    }</span>
<span id="cb9-112">  })</span>
<span id="cb9-113">  </span>
<span id="cb9-114">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb9-115">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb9-116">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb9-117">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb9-118">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb9-119">    }</span>
<span id="cb9-120">  })</span>
<span id="cb9-121">  </span>
<span id="cb9-122">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb9-123">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb9-124">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb9-125">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb9-126">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb9-127">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-128">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb9-129">      }</span>
<span id="cb9-130">    },</span>
<span id="cb9-131">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb9-132">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb9-133">    }</span>
<span id="cb9-134">  )</span>
<span id="cb9-135">  </span>
<span id="cb9-136">}</span>
<span id="cb9-137"></span>
<span id="cb9-138"><span class="co" style="color: #5E5E5E;"># Run</span></span>
<span id="cb9-139"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <category>plotly</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/index.html</guid>
  <pubDate>Mon, 24 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-24/Capture1.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>If you’re new to data science or statistics, you may have heard about probability distributions. Probability distributions are mathematical functions that help us understand the probability of a random variable taking on a certain value. For example, if we’re rolling a fair six-sided die, we know that each number has an equal chance of being rolled (1/6 or about 17% chance). We can represent this using a probability distribution, specifically a discrete uniform distribution.</p>
<p>However, not all probability distributions are as simple as a uniform distribution. Many real-world phenomena, such as the heights of people, the number of cars passing through a toll booth in a day, or the amount of rainfall in a particular area, are continuous and can’t be represented using a discrete distribution. Instead, we use continuous probability distributions, which describe the probability of a continuous variable taking on a range of values.</p>
<p>There are many different types of continuous probability distributions, each with their own properties and use cases. For example, the normal distribution, also known as the bell curve, is commonly used to model many natural phenomena, such as human heights and weights. The beta distribution is used to model proportions or percentages, such as the proportion of voters who support a particular candidate. The gamma distribution is used to model the time between events in a Poisson process, such as the time between customers arriving at a store.</p>
<p>The sample <code>TidyDensity App</code> is a tool that helps us explore and visualize these different types of probability distributions. It’s a web application built using the R programming language and the Shiny framework, which allows us to create interactive web applications with R.</p>
<p>Let’s break down the different components of the TidyDensity App.</p>
</section>
<section id="user-interface" class="level1">
<h1>User Interface</h1>
<p>The user interface, or UI for short, is what the user sees and interacts with when they use the app. It’s built using HTML, CSS, and JavaScript, and it’s the first thing the user sees when they open the app.</p>
<p>The TidyDensity App has a simple UI that allows the user to select from four different probability distributions: normal, Bernoulli, beta, and gamma. Each of these distributions has its own properties and use cases, and the user can select which one they want to explore using a dropdown menu.</p>
<p>In addition, the user can specify the number of simulations they want to run, which determines how many times the probability distribution is sampled to generate data. They can also specify the sample size, which determines how many data points are generated in each simulation.</p>
<p>Finally, the user can select which type of plot they want to see, such as a density plot, a quantile plot, a probability plot, or a QQ plot. Each of these plots shows a different aspect of the data generated from the probability distribution, and the user can choose which one to explore.</p>
<p>Here is the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb1-12">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb1-13">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb1-14">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb1-16">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb1-17">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb1-18">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb1-19">      ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb1-21">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb1-22">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-23">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-24">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-25">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-26">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-27">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-28">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-29">                    )</span>
<span id="cb1-30">        )</span>
<span id="cb1-31">      ),</span>
<span id="cb1-32">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-33">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-34">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-35">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-36">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-37">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-38">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-39">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-40">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-41">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-43">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-44">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-45">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-46">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-47">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-48">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-49">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-50">                  )</span>
<span id="cb1-51">      ),</span>
<span id="cb1-52">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb1-53">    ),</span>
<span id="cb1-54">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-55">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-56">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-57">    )</span>
<span id="cb1-58">  )</span>
<span id="cb1-59">)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/InputData.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Here is the new addition to the UI</figcaption><p></p>
</figure>
</div>
</section>
<section id="server" class="level1">
<h1>Server</h1>
<p>The server is the back-end of the <code>TidyDensity App</code>. It’s responsible for generating the data based on the user’s inputs, and for creating the plots and tables that the user sees on the UI.</p>
<p>The server is written in R, and it uses several R packages to generate the data and create the plots. For example, the <code>TidyDensity</code> package is used to generate data from the selected probability distribution, and the <code>ggplot2</code> package is used to create the plots.</p>
<p>The server is also responsible for handling user inputs, such as which probability distribution to use, how many simulations to run, and which plot type to show. It then generates the appropriate data and plot based on these inputs and sends them back to the UI for display.</p>
<p>The first thing we do is create a reactive variable data that will store the output of the <code>match.fun()</code> function, which is called with the arguments <code>.num_sims</code> and <code>.n</code> obtained from the user interface. We use the reactive variable because it will update automatically whenever the inputs are changed.</p>
<p>The <code>output$density_plot</code> object is created with <code>renderPlot()</code>, which takes the reactive variable <code>data(</code>) and passes it to <code>tidy_autoplot()</code> with the plot type selected by the user in the input$plot_type object. The resulting plot is then printed to the user interface.</p>
<p>The <code>output$data_table</code> object is created with <code>DT::renderDataTable()</code>, which takes the reactive variable <code>data()</code> and returns a table to the user interface using the <code>DT::datatable(</code>) function.</p>
<p>Finally, the <code>output$download_data</code> object is created using <code>downloadHandler()</code>, which creates a download button for the user to download a .csv file of the data. The filename argument specifies the name of the file, and the content argument writes the data to a .csv file.</p>
<p>Here is the code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb2-7">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb2-8">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb2-9">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb2-10">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb2-11">      }</span>
<span id="cb2-12">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb2-14">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-16">    }</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb2-23">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-24">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-25">      </span>
<span id="cb2-26">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-27">    }</span>
<span id="cb2-28">  })</span>
<span id="cb2-29">  </span>
<span id="cb2-30">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-31">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-32">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-33">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb2-34">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-35">    }</span>
<span id="cb2-36">  })</span>
<span id="cb2-37">  </span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb2-39">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb2-40">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-41">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb2-42">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb2-43">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb2-44">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb2-45">      }</span>
<span id="cb2-46">    },</span>
<span id="cb2-47">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-48">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-49">    }</span>
<span id="cb2-50">  )</span>
<span id="cb2-51">  </span>
<span id="cb2-52">}</span></code></pre></div>
</div>
</section>
<section id="data-table" class="level1">
<h1>Data Table</h1>
<p>The data table is a table that shows the data generated from the probability distribution. It’s displayed on.</p>
<p>Overall, this app is designed to allow users to generate various types of probability density plots and accompanying data tables based on user input. By allowing users to select different functions, sample sizes, and plot types, this app provides a flexible and customizable tool for exploring and visualizing probability distributions.</p>
</section>
<section id="full-shiny-app" class="level1">
<h1>Full Shiny App</h1>
<p>Here is the full script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb3-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-11">      <span class="fu" style="color: #4758AB;">radioButtons</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data_input_type"</span>,</span>
<span id="cb3-12">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Data Input Type:"</span>,</span>
<span id="cb3-13">                   <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Select Function"</span>, <span class="st" style="color: #20794D;">"Enter Data"</span>),</span>
<span id="cb3-14">                   <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"Select Function"</span>),</span>
<span id="cb3-15">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-16">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Enter Data'"</span>,</span>
<span id="cb3-17">        <span class="fu" style="color: #4758AB;">textInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"data"</span>,</span>
<span id="cb3-18">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Enter data as a comma-separated list of numeric values"</span>)</span>
<span id="cb3-19">      ),</span>
<span id="cb3-20">      <span class="fu" style="color: #4758AB;">conditionalPanel</span>(</span>
<span id="cb3-21">        <span class="at" style="color: #657422;">condition =</span> <span class="st" style="color: #20794D;">"input.data_input_type == 'Select Function'"</span>,</span>
<span id="cb3-22">        <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb3-23">                    <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb3-24">                    <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-25">                      <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb3-26">                      <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb3-27">                      <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb3-28">                      <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb3-29">                    )</span>
<span id="cb3-30">        )</span>
<span id="cb3-31">      ),</span>
<span id="cb3-32">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb3-33">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb3-34">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-35">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-36">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb3-37">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb3-38">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb3-39">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb3-40">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb3-41">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb3-42">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb3-43">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb3-44">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-45">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb3-46">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb3-47">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb3-48">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb3-49">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb3-50">                  )</span>
<span id="cb3-51">      ),</span>
<span id="cb3-52">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb3-53">    ),</span>
<span id="cb3-54">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-55">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb3-56">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb3-57">    )</span>
<span id="cb3-58">  )</span>
<span id="cb3-59">)</span>
<span id="cb3-60"></span>
<span id="cb3-61"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb3-62">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-63">  </span>
<span id="cb3-64">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-65">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-66">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input or tidy_empirical if user entered data</span></span>
<span id="cb3-67">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-68">      data <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>data</span>
<span id="cb3-69">      <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">is.null</span>(data) <span class="sc" style="color: #5E5E5E;">||</span> data <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">""</span>) {</span>
<span id="cb3-70">        <span class="fu" style="color: #4758AB;">return</span>(<span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb3-71">      }</span>
<span id="cb3-72">      data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">strsplit</span>(data, <span class="st" style="color: #20794D;">","</span>)[[<span class="dv" style="color: #AD0000;">1</span>]])</span>
<span id="cb3-73">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(data)</span>
<span id="cb3-74">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-75">      <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-76">    }</span>
<span id="cb3-77">  })</span>
<span id="cb3-78">  </span>
<span id="cb3-79">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb3-80">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-81">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb3-82">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb3-83">      p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-84">        <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb3-85">      </span>
<span id="cb3-86">      <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb3-87">    }</span>
<span id="cb3-88">  })</span>
<span id="cb3-89">  </span>
<span id="cb3-90">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb3-91">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb3-92">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb3-93">    <span class="cf" style="color: #003B4F;">if</span> (<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.null</span>(<span class="fu" style="color: #4758AB;">data</span>())) {</span>
<span id="cb3-94">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb3-95">    }</span>
<span id="cb3-96">  })</span>
<span id="cb3-97">  </span>
<span id="cb3-98">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb3-99">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb3-100">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb3-101">      <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>data_input_type <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Enter Data"</span>) {</span>
<span id="cb3-102">        <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"tidy_empirical.csv"</span>)</span>
<span id="cb3-103">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb3-104">        <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb3-105">      }</span>
<span id="cb3-106">    },</span>
<span id="cb3-107">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb3-108">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb3-109">    }</span>
<span id="cb3-110">  )</span>
<span id="cb3-111">  </span>
<span id="cb3-112">}</span>
<span id="cb3-113"></span>
<span id="cb3-114"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb3-115"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/index.html</guid>
  <pubDate>Fri, 21 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-21/InputData.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the previous post we allowed users to choose a distribution and a plot type. Now, we want to allow users to download a <strong>.csv</strong> file of the data that is generated.</p>
<p>In the UI, we added a <code>downloadButton</code> with <code>outputId = "download_data"</code> and <code>label = "Download Data"</code>. In the server, we added a <code>downloadHandler</code> that takes a <code>filename</code> and content function. The <code>filename</code> function returns the name of the file to be downloaded (in this case, we used the selected function name as the file name with “.csv” extension). The content function writes the reactive data to a CSV file using the write.csv function. The <code>downloadHandler</code> returns the file to be downloaded when the button is clicked.</p>
<p>See here: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/DownloadData.PNG" class="img-fluid" alt="Download Buttong"></p>
</section>
<section id="ui-section" class="level1">
<h1>UI Section</h1>
<p>Here is the update to the UI Section</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-2">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-7">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-8">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-9">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-10">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-11">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-12">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-13">                  )</span>
<span id="cb1-14">      ),</span>
<span id="cb1-15">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-16">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-17">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-18">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-19">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-25">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-26">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-27">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-28">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-29">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-30">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-31">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-32">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-33">                  )</span>
<span id="cb1-34">      ),</span>
<span id="cb1-35">      <span class="co" style="color: #5E5E5E;"># Download the data</span></span>
<span id="cb1-36">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb1-37">    ),</span>
<span id="cb1-38">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-39">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-40">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-41">    )</span>
<span id="cb1-42">  )</span>
<span id="cb1-43">)</span></code></pre></div>
</div>
</section>
<section id="server-section" class="level1">
<h1>Server Section</h1>
<p>Here is the update to the Server section.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-8">  })</span>
<span id="cb2-9">  </span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-11">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-13">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-14">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-22">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-23">  })</span>
<span id="cb2-24">  </span>
<span id="cb2-25">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb2-26">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb2-27">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-28">      <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb2-29">    },</span>
<span id="cb2-30">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-31">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-32">    }</span>
<span id="cb2-33">  )</span>
<span id="cb2-34">  </span>
<span id="cb2-35">}</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb2-38"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With these changes, the user can now export the data to a <strong>.csv</strong> file by clicking the “Export Data” button and selecting where to save the file.</p>
<p>I hope this update to the TidyDensity app will make it more useful for your data analysis needs. If you have any questions or feedback, please feel free to let me know, and as usual…Steal this Code!! Modify for yourself and see what you come up with.</p>
<p>Here is the entire script:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb3-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb3-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb3-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb3-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb3-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb3-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb3-18">                  )</span>
<span id="cb3-19">      ),</span>
<span id="cb3-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb3-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb3-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb3-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb3-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb3-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb3-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb3-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb3-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb3-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb3-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb3-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb3-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb3-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb3-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb3-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb3-38">                  )</span>
<span id="cb3-39">      ),</span>
<span id="cb3-40">      <span class="fu" style="color: #4758AB;">downloadButton</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"download_data"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Download Data"</span>)</span>
<span id="cb3-41">    ),</span>
<span id="cb3-42">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-43">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb3-44">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb3-45">    )</span>
<span id="cb3-46">  )</span>
<span id="cb3-47">)</span>
<span id="cb3-48"></span>
<span id="cb3-49"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb3-50">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-51">  </span>
<span id="cb3-52">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-53">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-54">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb3-55">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-56">  })</span>
<span id="cb3-57">  </span>
<span id="cb3-58">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb3-59">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-60">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb3-61">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb3-62">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb3-63">    </span>
<span id="cb3-64">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb3-65">  })</span>
<span id="cb3-66">  </span>
<span id="cb3-67">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb3-68">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb3-69">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb3-70">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb3-71">  })</span>
<span id="cb3-72">  </span>
<span id="cb3-73">  <span class="co" style="color: #5E5E5E;"># Download data handler</span></span>
<span id="cb3-74">  output<span class="sc" style="color: #5E5E5E;">$</span>download_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">downloadHandler</span>(</span>
<span id="cb3-75">    <span class="at" style="color: #657422;">filename =</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb3-76">      <span class="fu" style="color: #4758AB;">paste0</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions, <span class="st" style="color: #20794D;">".csv"</span>)</span>
<span id="cb3-77">    },</span>
<span id="cb3-78">    <span class="at" style="color: #657422;">content =</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb3-79">      <span class="fu" style="color: #4758AB;">write.csv</span>(<span class="fu" style="color: #4758AB;">data</span>(), file, <span class="at" style="color: #657422;">row.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb3-80">    }</span>
<span id="cb3-81">  )</span>
<span id="cb3-82">  </span>
<span id="cb3-83">}</span>
<span id="cb3-84"></span>
<span id="cb3-85"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb3-86"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/index.html</guid>
  <pubDate>Thu, 20 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-20/DownloadData.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity} Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Shiny is an R package that allows you to create interactive web applications from R code. In this blog post, we’ll explore the different components of a Shiny application and show how they work together to create an interactive data visualization app. This is a part 2 with a small enhancement.</p>
</section>
<section id="the-app" class="level1">
<h1>The App</h1>
<p>Our Shiny app will generate density plots for different statistical distributions based on user input. The user will be able to select a distribution, set the number of simulations, and choose the plot type from a dropdown menu. The app will also display a table of data generated by the selected distribution.</p>
<p>Here’s a preview of what the app will look like: <img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/image.PNG" class="img-fluid" alt="TidyDensity with Shiny"></p>
<section id="the-ui" class="level2">
<h2 class="anchored" data-anchor-id="the-ui">The UI</h2>
<p>The user interface (UI) is the visual part of the app that the user interacts with. In our app, the UI is defined using the fluidPage() function from the shiny package. It consists of a title panel, a sidebar layout, and a main panel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb1-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb1-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb1-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb1-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb1-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb1-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb1-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb1-18">                  )</span>
<span id="cb1-19">      ),</span>
<span id="cb1-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb1-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb1-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb1-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb1-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb1-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb1-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb1-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb1-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb1-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb1-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb1-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb1-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb1-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb1-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb1-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb1-38">                  )</span>
<span id="cb1-39">      )</span>
<span id="cb1-40">    ),</span>
<span id="cb1-41">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb1-42">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb1-43">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb1-44">    )</span>
<span id="cb1-45">  )</span>
<span id="cb1-46">)</span></code></pre></div>
</div>
<p>The title panel displays the app name, while the sidebar layout contains the input controls for the user. In this case, we have four input elements:</p>
<ul>
<li><code>selectInput()</code> allows the user to choose a statistical distribution to generate data from.</li>
<li><code>numericInput()</code> allows the user to set the number of simulations.</li>
<li>Another <code>numericInput()</code> allows the user to set the sample size.</li>
<li><code>selectInput()</code> allows the user to choose the type of plot to display.</li>
</ul>
<p>The main panel contains the output elements for the app, in this case a plot and a table.</p>
</section>
<section id="the-server" class="level2">
<h2 class="anchored" data-anchor-id="the-server">The Server</h2>
<p>The server is the backend of the app that handles the logic and generates the output based on user input. In our app, the server is defined using the <code>server()</code> function from the shiny package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb2-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-3">  </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb2-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb2-8">  })</span>
<span id="cb2-9">  </span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb2-11">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb2-13">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-14">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb2-15">    </span>
<span id="cb2-16">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb2-17">  })</span>
<span id="cb2-18">  </span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb2-20">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb2-22">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb2-23">  })</span>
<span id="cb2-24">  </span>
<span id="cb2-25">}</span></code></pre></div>
</div>
<p>The <code>server()</code> function takes two arguments, input and output. These arguments allow the server to interact with the user interface.</p>
<p>First, we create a reactive data object data, which takes in the user’s input for the function, number of simulations, and sample size, and passes it to the appropriate function using <code>match.fun()</code>.</p>
<p>Next, we create the density_plot output. We use the <code>renderPlot()</code> function to create a reactive plot of the data using the tidy_autoplot() function from the <code>{TidyDensity}</code> package. The <code>tidy_autoplot()</code> function allows the user to choose from several plot types, including density, quantile, probability, qq, and mcmc. We then print the plot using the <code>print()</code> function.</p>
<p>Finally, we create the <code>data_table</code> output using the <code>DT::renderDataTable()</code> function. This output displays the reactive data as a table using the <code>DT::datatable()</code> function.</p>
</section>
<section id="the-shiny-app" class="level2">
<h2 class="anchored" data-anchor-id="the-shiny-app">The Shiny App</h2>
<p>Finally, we run the Shiny app using the <code>shinyApp()</code> function, which takes the <code>ui</code> and <code>server</code> functions as arguments:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>This launches the app and displays the user interface. The user can interact with the app by selecting a function, specifying the number of simulations and sample size, and viewing the resulting density plot and data table. The app provides a simple and interactive way to explore the TidyDensity package and its functionality.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Here is the entire app! Steal this code and modify it for yourself, see what you can do!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb4-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb4-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb4-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb4-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb4-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb4-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb4-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb4-18">                  )</span>
<span id="cb4-19">      ),</span>
<span id="cb4-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb4-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb4-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb4-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb4-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb4-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb4-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>),</span>
<span id="cb4-30">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"plot_type"</span>,</span>
<span id="cb4-31">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select plot type"</span>,</span>
<span id="cb4-32">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb4-33">                    <span class="st" style="color: #20794D;">"density"</span>,</span>
<span id="cb4-34">                    <span class="st" style="color: #20794D;">"quantile"</span>,</span>
<span id="cb4-35">                    <span class="st" style="color: #20794D;">"probability"</span>,</span>
<span id="cb4-36">                    <span class="st" style="color: #20794D;">"qq"</span>,</span>
<span id="cb4-37">                    <span class="st" style="color: #20794D;">"mcmc"</span></span>
<span id="cb4-38">                  )</span>
<span id="cb4-39">      )</span>
<span id="cb4-40">    ),</span>
<span id="cb4-41">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-42">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb4-43">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb4-44">    )</span>
<span id="cb4-45">  )</span>
<span id="cb4-46">)</span>
<span id="cb4-47"></span>
<span id="cb4-48"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb4-49">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb4-50">  </span>
<span id="cb4-51">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb4-52">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-53">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb4-54">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb4-55">  })</span>
<span id="cb4-56">  </span>
<span id="cb4-57">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb4-58">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-59">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb4-60">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-61">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>(<span class="at" style="color: #657422;">.plot_type =</span> input<span class="sc" style="color: #5E5E5E;">$</span>plot_type)</span>
<span id="cb4-62">    </span>
<span id="cb4-63">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb4-64">  })</span>
<span id="cb4-65">  </span>
<span id="cb4-66">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb4-67">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb4-68">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb4-69">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb4-70">  })</span>
<span id="cb4-71">  </span>
<span id="cb4-72">}</span>
<span id="cb4-73"></span>
<span id="cb4-74"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb4-75"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/index.html</guid>
  <pubDate>Wed, 19 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-19/image.PNG" medium="image"/>
</item>
<item>
  <title>Exploring Distributions with {shiny} and {TidyDensity}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Shiny is an R package that allows you to build interactive web applications using R code. TidyDensity is an R package that provides a tidyverse-style interface for working with probability density functions. In this tutorial, we’ll use these two packages to build a Shiny app that allows users to interact with TidyDensity functions.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="required-packages" class="level2">
<h2 class="anchored" data-anchor-id="required-packages">Required Packages</h2>
<p>Before we dive into the code, let’s go over the packages that we’ll be using in this app:</p>
<ul>
<li><p>Shiny: As mentioned earlier, Shiny is an R package for building interactive web applications. It provides a variety of input controls and output elements that allow you to create user interfaces for your R code.</p></li>
<li><p>TidyDensity: TidyDensity is an R package that provides a tidyverse-style interface for working with probability density functions. It provides a set of functions for generating density functions, as well as a tidy_autoplot() function for creating visualizations.</p></li>
<li><p>tidyverse: Tidyverse is a collection of R packages designed for data science. It includes many popular packages such as ggplot2, dplyr, and tidyr. We’ll be using some functions from the tidyverse packages in our Shiny app.</p></li>
<li><p>DT: DT is an R package for creating interactive tables in RMarkdown documents, Shiny apps, and RStudio. We’ll be using the DT::datatable() function to create a table of output data in our app.</p></li>
</ul>
<p>Load them up!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span></code></pre></div>
</div>
</section>
<section id="the-ui-object" class="level2">
<h2 class="anchored" data-anchor-id="the-ui-object">The UI Object</h2>
<p>The UI object is the first argument of the shinyApp() function, and it defines the layout and appearance of the app. In our TidyDensity Shiny app, we’ll use a sidebar layout with two input controls and two output elements:</p>
<ul>
<li><p>Select Function Input: A selectInput() control that allows users to select one of four TidyDensity functions: tidy_normal(), tidy_bernoulli(), tidy_beta(), and tidy_gamma().</p></li>
<li><p>Number of Simulations Input: A numericInput() control that allows users to specify the number of simulations to use in the TidyDensity function.</p></li>
<li><p>Sample Size Input: A numericInput() control that allows users to specify the sample size to use in the TidyDensity function.</p></li>
<li><p>Density Plot Output: A plotOutput() element that displays the density plot generated by tidy_autoplot().</p></li>
<li><p>Data Table Output: A dataTableOutput() element that displays the output data from the TidyDensity function.</p></li>
</ul>
<p>Here’s the code for the UI object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb2-2">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-3">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb2-4">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-6">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"function"</span>,</span>
<span id="cb2-7">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb2-8">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-9">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb2-10">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb2-11">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb2-12">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb2-13">                    )</span>
<span id="cb2-14">                  ),</span>
<span id="cb2-15">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb2-16">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb2-17">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-18">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-19">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb2-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb2-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb2-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb2-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb2-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb2-25">    ),</span>
<span id="cb2-26">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-27">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb2-28">      <span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb2-29">    )</span>
<span id="cb2-30">  )</span>
<span id="cb2-31">)</span></code></pre></div>
</div>
</section>
<section id="the-server-object" class="level2">
<h2 class="anchored" data-anchor-id="the-server-object">The Server Object</h2>
<p>The server object is the second argument of the shinyApp() function, and it defines the behavior and output of the app. In our TidyDensity Shiny app, the server object consists of two reactive expressions that generate the output elements based on the user inputs:</p>
<ul>
<li><p>Data Reactive Expression: A reactive expression that generates the output data for the selected TidyDensity function based on the user inputs. We use match.fun() to convert the selected function name into an R function, and we pass the num_sims and n arguments from the input controls.</p></li>
<li><p>Density Plot Reactive Expression: A reactive expression that generates the density plot using tidy_autoplot() and the output data from the data reactive expression.</p></li>
<li><p>Data Table Output: We use DT::renderDataTable() to generate the data table output element based on the output data from the data reactive expression.</p></li>
</ul>
<p>Here’s the code for the server object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb3-2">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb3-3">  </span>
<span id="cb3-4">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb3-5">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span><span class="cf" style="color: #003B4F;">function</span>)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb3-8">  })</span>
<span id="cb3-9">  </span>
<span id="cb3-10">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb3-11">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb3-13">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb3-14">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>()</span>
<span id="cb3-15">    </span>
<span id="cb3-16">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb3-17">  })</span>
<span id="cb3-18">  </span>
<span id="cb3-19">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb3-20">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb3-21">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb3-22">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb3-23">  })</span>
<span id="cb3-24">  </span>
<span id="cb3-25">}</span></code></pre></div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this tutorial, we used Shiny and TidyDensity to build an interactive web application that allows users to generate and visualize probability density functions. We learned how to use the selectInput() and numericInput() controls to allow users to specify the function and input parameters, and we used the plotOutput() and dataTableOutput() elements to display the output data and visualizations. We also used the reactive() function to create reactive expressions that automatically update the output elements based on the user inputs.</p>
<p>Most importantly, steal the code below and see what you can do with it!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb4-7">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"TidyDensity App"</span>),</span>
<span id="cb4-9">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb4-10">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb4-11">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"functions"</span>,</span>
<span id="cb4-12">                  <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select Function"</span>,</span>
<span id="cb4-13">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb4-14">                    <span class="st" style="color: #20794D;">"tidy_normal"</span>, </span>
<span id="cb4-15">                    <span class="st" style="color: #20794D;">"tidy_bernoulli"</span>, </span>
<span id="cb4-16">                    <span class="st" style="color: #20794D;">"tidy_beta"</span>, </span>
<span id="cb4-17">                    <span class="st" style="color: #20794D;">"tidy_gamma"</span></span>
<span id="cb4-18">                    )</span>
<span id="cb4-19">                  ),</span>
<span id="cb4-20">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"num_sims"</span>,</span>
<span id="cb4-21">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Number of simulations:"</span>,</span>
<span id="cb4-22">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-23">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb4-24">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">15</span>),</span>
<span id="cb4-25">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"n"</span>,</span>
<span id="cb4-26">                   <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Sample size:"</span>,</span>
<span id="cb4-27">                   <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">50</span>,</span>
<span id="cb4-28">                   <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">30</span>,</span>
<span id="cb4-29">                   <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb4-30">    ),</span>
<span id="cb4-31">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb4-32">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"density_plot"</span>),</span>
<span id="cb4-33">      DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dataTableOutput</span>(<span class="st" style="color: #20794D;">"data_table"</span>)</span>
<span id="cb4-34">    )</span>
<span id="cb4-35">  )</span>
<span id="cb4-36">)</span>
<span id="cb4-37"></span>
<span id="cb4-38"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb4-39">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb4-40">  </span>
<span id="cb4-41">  <span class="co" style="color: #5E5E5E;"># Create reactive data</span></span>
<span id="cb4-42">  data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb4-43">    <span class="co" style="color: #5E5E5E;"># Call selected function with user input</span></span>
<span id="cb4-44">    <span class="fu" style="color: #4758AB;">match.fun</span>(input<span class="sc" style="color: #5E5E5E;">$</span>functions)(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims, <span class="at" style="color: #657422;">.n =</span> input<span class="sc" style="color: #5E5E5E;">$</span>n)</span>
<span id="cb4-45">  })</span>
<span id="cb4-46">  </span>
<span id="cb4-47">  <span class="co" style="color: #5E5E5E;"># Create density plot</span></span>
<span id="cb4-48">  output<span class="sc" style="color: #5E5E5E;">$</span>density_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb4-49">    <span class="co" style="color: #5E5E5E;"># Call autoplot on reactive data</span></span>
<span id="cb4-50">    p <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-51">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>()</span>
<span id="cb4-52">    </span>
<span id="cb4-53">    <span class="fu" style="color: #4758AB;">print</span>(p)</span>
<span id="cb4-54">  })</span>
<span id="cb4-55">  </span>
<span id="cb4-56">  <span class="co" style="color: #5E5E5E;"># Create data table</span></span>
<span id="cb4-57">  output<span class="sc" style="color: #5E5E5E;">$</span>data_table <span class="ot" style="color: #003B4F;">&lt;-</span> DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">renderDataTable</span>({</span>
<span id="cb4-58">    <span class="co" style="color: #5E5E5E;"># Return reactive data as a data table</span></span>
<span id="cb4-59">    DT<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">datatable</span>(<span class="fu" style="color: #4758AB;">data</span>())</span>
<span id="cb4-60">  })</span>
<span id="cb4-61">  </span>
<span id="cb4-62">}</span>
<span id="cb4-63"></span>
<span id="cb4-64"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb4-65"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-18/index.html</guid>
  <pubDate>Tue, 18 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Styling Tables for Excel with {styledTables}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the analytics realm whether some like it or not, Excel is huge and maybe King. This is due to the fact of the shear volume of people using it. Microsoft has positioned Excel well in this situation, but, that does not mean we cannot extend Excel with R. In fact we can do just that. I will be focusing new posts on this topic as I gear up to collaborate on a new project focusing on this issue.</p>
<p>For this post we are going to discuss the <code>{styledTable}</code> R package that can be installed from <code>GitHub</code>. Here are a few ways in which the <strong>styledTable</strong> package can help.</p>
<ul>
<li><p>Creating visually appealing tables: Excel is a powerful tool for data analysis and visualization, but it can be limited in terms of formatting options. With the ‘styledtable’ package, users can create tables with a wide range of formatting options, such as bold text, colored cells, and borders. This can make the tables more visually appealing and easier to read, which can be helpful when presenting data to others.</p></li>
<li><p>Automating data analysis: The ‘styledtable’ package can be used in combination with other R packages to automate data analysis tasks. For example, users can use R to clean and transform data, and then use the ‘styledtable’ package to create formatted tables for reporting or sharing with others. This can save time and reduce errors associated with manual data entry and formatting.</p></li>
<li><p>Integrating with other R packages: R has a large ecosystem of packages for data analysis, visualization, and reporting. The ‘styledtable’ package can be used in conjunction with other R packages to extend the functionality of Excel. For example, users can use R to perform statistical analysis on data, and then use the ‘styledtable’ package to create formatted tables for reporting the results in Excel.</p></li>
<li><p>Facilitating collaboration: Sharing Excel files can be challenging when working with multiple users or teams. With the ‘styledtable’ package, users can export styled tables to Excel format, which can be shared with others. This can facilitate collaboration and streamline the process of sharing data and analysis results.</p></li>
</ul>
<p>The <code>styledtable</code> package in R, which allows users to create styled tables in R Markdown documents. The package can help to create tables with various formatting options such as bold text, colored cells, and borders. It also has functionality on how to port these to Excel itself.</p>
<p>The package offers a simple syntax that allows users to specify formatting options using HTML and CSS. The resulting table can be customized by changing the CSS file or by using the ‘styler’ function to apply custom styles to individual cells or rows.</p>
<p>Overall, the <code>styledtable</code> package provides a useful tool for creating visually appealing tables in R Markdown documents, and the ability to export these tables to Excel format makes it easier to share and analyze data with others.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Install development version from GitHub</span></span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">'R-package/styledTables'</span>, <span class="at" style="color: #657422;">build_vignettes =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(styledTables)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(xlsx)</span>
<span id="cb2-4"></span>
<span id="cb2-5">df <span class="ot" style="color: #003B4F;">&lt;-</span> mtcars <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">select</span>(mpg, cyl, am)</span>
<span id="cb2-7"></span>
<span id="cb2-8">df</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                     mpg cyl am
Mazda RX4           21.0   6  1
Mazda RX4 Wag       21.0   6  1
Datsun 710          22.8   4  1
Hornet 4 Drive      21.4   6  0
Hornet Sportabout   18.7   8  0
Valiant             18.1   6  0
Duster 360          14.3   8  0
Merc 240D           24.4   4  0
Merc 230            22.8   4  0
Merc 280            19.2   6  0
Merc 280C           17.8   6  0
Merc 450SE          16.4   8  0
Merc 450SL          17.3   8  0
Merc 450SLC         15.2   8  0
Cadillac Fleetwood  10.4   8  0
Lincoln Continental 10.4   8  0
Chrysler Imperial   14.7   8  0
Fiat 128            32.4   4  1
Honda Civic         30.4   4  1
Toyota Corolla      33.9   4  1
Toyota Corona       21.5   4  0
Dodge Challenger    15.5   8  0
AMC Javelin         15.2   8  0
Camaro Z28          13.3   8  0
Pontiac Firebird    19.2   8  0
Fiat X1-9           27.3   4  1
Porsche 914-2       26.0   4  1
Lotus Europa        30.4   4  1
Ford Pantera L      15.8   8  1
Ferrari Dino        19.7   6  1
Maserati Bora       15.0   8  1
Volvo 142E          21.4   4  1</code></pre>
</div>
</div>
<p>Ok, now we have our data that we are going to work with, so let’s check out some features.</p>
<p>First we will just apply the <code>styled_table()</code> function and inspect the output.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">stl_df <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">styled_table</span>(<span class="at" style="color: #657422;">keep_header =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">class</span>(stl_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "StyledTable"
attr(,"package")
[1] "styledTables"</code></pre>
</div>
</div>
<p>Now let’s apply some simple formatting.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">stl_df <span class="ot" style="color: #003B4F;">&lt;-</span> stl_df <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">set_border_position</span>(<span class="st" style="color: #20794D;">"all"</span>, <span class="at" style="color: #657422;">row_id =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">set_bold</span>(<span class="at" style="color: #657422;">row_id =</span> <span class="dv" style="color: #AD0000;">1</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-4">  <span class="fu" style="color: #4758AB;">set_fill_color</span>(<span class="st" style="color: #20794D;">"#00FF00"</span>, <span class="at" style="color: #657422;">col_id =</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="at" style="color: #657422;">condition =</span> X <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"6"</span>)</span></code></pre></div>
</div>
<p>Write out to excel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">wb <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createWorkbook</span>()</span>
<span id="cb7-2">sheet <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">createSheet</span>(wb, <span class="st" style="color: #20794D;">"mtcars_tbl"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;"># Insert table</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">write_excel</span>(sheet, stl_df)</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;"># Save workbook</span></span>
<span id="cb7-8"><span class="fu" style="color: #4758AB;">saveWorkbook</span>(wb, <span class="st" style="color: #20794D;">"test.xlsx"</span>)</span></code></pre></div>
</div>
<p>Here is the test output:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/example.JPG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Test Output</figcaption><p></p>
</figure>
</div>


</section>

 ]]></description>
  <category>rtip</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/index.html</guid>
  <pubDate>Tue, 11 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-11/example.JPG" medium="image"/>
</item>
<item>
  <title>Reading in Multiple Excel Sheets with lapply and {readxl}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-07/index.html</link>
  <description><![CDATA[ 




<section id="intruduction" class="level1">
<h1>Intruduction</h1>
<p>Reading in an Excel file with multiple sheets can be a daunting task, especially for users who are not familiar with the process. In this blog post, we will walk through a sample function that can be used to read in an Excel file with multiple sheets using the R programming language.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The function we will be using is called <code>excel_sheet_reader()</code>. This function takes one argument: <code>filename</code>, which is the name of the Excel file we want to read in. This function, since it is using the <code>{readxl}</code> package will automatically read that data to a tibble.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is the function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">excel_sheet_reader <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(filename) {</span>
<span id="cb1-2">  sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheets</span>(filename)</span>
<span id="cb1-3">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(sheets, <span class="cf" style="color: #003B4F;">function</span>(X) <span class="fu" style="color: #4758AB;">read_excel</span>(filename, <span class="at" style="color: #657422;">sheet =</span> X))</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">names</span>(x) <span class="ot" style="color: #003B4F;">&lt;-</span> sheets</span>
<span id="cb1-5">  x</span>
<span id="cb1-6">}</span></code></pre></div>
</div>
<p>The first thing the <code>excel_sheet_reader()</code> function does is to determine the names of all the sheets in the Excel file using the excel_sheets function from the readxl package. This function returns a character vector containing the names of all the sheets in the Excel file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheets</span>(filename)</span></code></pre></div>
</div>
<p>Next, the function uses the <code>lapply</code> function to loop through all the sheet names and read in each sheet using the <code>read_excel()</code> function, also from the <code>readxl</code> package. This function takes two arguments: filename, which is the name of the Excel file, and sheet, which is the name of the sheet we want to read in. The <code>lapply</code> function returns a list containing all the sheets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(sheets, <span class="cf" style="color: #003B4F;">function</span>(X) <span class="fu" style="color: #4758AB;">read_excel</span>(filename, <span class="at" style="color: #657422;">sheet =</span> X))</span></code></pre></div>
</div>
<p>Finally, the function uses the names function to assign the sheet names to the list of sheets and returns the list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">names</span>(x) <span class="ot" style="color: #003B4F;">&lt;-</span> sheets</span>
<span id="cb4-2">x</span></code></pre></div>
</div>
<p>Now that we have explained the <code>excel_sheet_reader()</code> function, let’s use it to read in the iris and mtcars datasets.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(healthyR)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">library</span>(writexl)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">library</span>(readxl)</span>
<span id="cb5-5"></span>
<span id="cb5-6">iris <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">named_item_list</span>(Species) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-8">  <span class="fu" style="color: #4758AB;">write_xlsx</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"iris.xlsx"</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10">mtcars <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-11">  <span class="fu" style="color: #4758AB;">named_item_list</span>(cyl) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-12">  <span class="fu" style="color: #4758AB;">write_xlsx</span>(<span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"mtcars.xlsx"</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14">iris_sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheet_reader</span>(<span class="st" style="color: #20794D;">"iris.xlsx"</span>)</span>
<span id="cb5-15">mtcars_sheets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">excel_sheet_reader</span>(<span class="st" style="color: #20794D;">"mtcars.xlsx"</span>)</span></code></pre></div>
</div>
<p>Now lets see the structure of each file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">iris_sheets</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$setosa
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# ℹ 40 more rows

$versicolor
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;     
 1          7           3.2          4.7         1.4 versicolor
 2          6.4         3.2          4.5         1.5 versicolor
 3          6.9         3.1          4.9         1.5 versicolor
 4          5.5         2.3          4           1.3 versicolor
 5          6.5         2.8          4.6         1.5 versicolor
 6          5.7         2.8          4.5         1.3 versicolor
 7          6.3         3.3          4.7         1.6 versicolor
 8          4.9         2.4          3.3         1   versicolor
 9          6.6         2.9          4.6         1.3 versicolor
10          5.2         2.7          3.9         1.4 versicolor
# ℹ 40 more rows

$virginica
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
          &lt;dbl&gt;       &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    
 1          6.3         3.3          6           2.5 virginica
 2          5.8         2.7          5.1         1.9 virginica
 3          7.1         3            5.9         2.1 virginica
 4          6.3         2.9          5.6         1.8 virginica
 5          6.5         3            5.8         2.2 virginica
 6          7.6         3            6.6         2.1 virginica
 7          4.9         2.5          4.5         1.7 virginica
 8          7.3         2.9          6.3         1.8 virginica
 9          6.7         2.5          5.8         1.8 virginica
10          7.2         3.6          6.1         2.5 virginica
# ℹ 40 more rows</code></pre>
</div>
</div>
<p>Now <code>mtcars_sheets</code></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">mtcars_sheets</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$`4`
# A tibble: 11 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
11  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2

$`6`
# A tibble: 7 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
3  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
4  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
5  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
6  17.8     6  168.   123  3.92  3.44  18.9     1     0     4     4
7  19.7     6  145    175  3.62  2.77  15.5     0     1     5     6

$`8`
# A tibble: 14 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;
 1  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 2  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 3  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
 4  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
 5  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 6  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 7  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 8  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
10  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
11  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
12  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2
13  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
14  15       8  301    335  3.54  3.57  14.6     0     1     5     8</code></pre>
</div>
</div>
<p>And that’s it! Hope this has been helpful!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>readxl</category>
  <category>lapply</category>
  <category>healthyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-07/index.html</guid>
  <pubDate>Fri, 07 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A New Package for the African Stock Market {BRVM}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/index.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/brvm-logo.png" class="img-fluid figure-img" width="147"></p>
<p></p><figcaption class="figure-caption">BRVM</figcaption><p></p>
</figure>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This R package provides a user-friendly interface for accessing data from the <a href="https://github.com/Koffi-Fredysessie/BRVM"><code>{BRVM}</code></a>, which is a regional stock exchange serving multiple West African countries. With this package, users can easily retrieve historical stock price data, trading volumes, and other financial indicators for a variety of stocks traded on the BRVM.</p>
<p>The package is designed to simplify the process of gathering and analyzing financial data, making it easier for researchers, investors, and other users to extract insights and make informed decisions based on the information available. Overall, BRVM library is a valuable tool for anyone looking to gain a better understanding of the BRVM and the financial markets in West Africa.</p>
<p>For now, you can install from <strong>GitHub</strong> until it is on CRAN (It is on the way)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># github dev version</span></span>
<span id="cb1-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">## We can use devtools</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># install.packages("devtools")</span></span>
<span id="cb1-4">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"Koffi-Fredysessie/BRVM"</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># Or use remotes</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># install.packages("remotes")</span></span>
<span id="cb1-8">remotes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"Koffi-Fredysessie/BRVM"</span>)</span></code></pre></div>
</div>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>First, let’s load in the <em>BRVM</em> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(BRVM)</span></code></pre></div>
</div>
<section id="the-brvm_ticker_desc-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_ticker_desc-function">The <strong>BRVM_ticker_desc()</strong> function</h2>
<p>It receives no argument and returns BRVM tickers information such as its full name, sector and country.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Display tickers of BRVM</span></span>
<span id="cb3-2">tickers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_ticker_desc</span>()</span>
<span id="cb3-3">tickers</span></code></pre></div>
</div>
<div class="cell">
<div class="cell-output cell-output-stderr">
<pre><code>Warning: package 'kableExtra' was built under R version 4.2.3</code></pre>
</div>
<div class="cell-output-display">

<table class="table table-striped" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> Ticker </th>
   <th style="text-align:left;"> Company name </th>
   <th style="text-align:left;"> Sector </th>
   <th style="text-align:left;"> Country </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> ABJC </td>
   <td style="text-align:left;"> SERVAIR ABIDJAN  COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BICC </td>
   <td style="text-align:left;"> BICI COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BNBC </td>
   <td style="text-align:left;"> BERNABE COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAB </td>
   <td style="text-align:left;"> BANK OF AFRICA BENIN </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BENIN </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOABF </td>
   <td style="text-align:left;"> BANK OF AFRICA BURKINA FASO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAC </td>
   <td style="text-align:left;"> BANK OF AFRICA COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAM </td>
   <td style="text-align:left;"> BANK OF AFRICA MALI </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> MALI </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAN </td>
   <td style="text-align:left;"> BANK OF AFRICA NIGER </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> NIGER </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BOAS </td>
   <td style="text-align:left;"> BANK OF AFRICA SENEGAL </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CABC </td>
   <td style="text-align:left;"> SICABLE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CBIBF </td>
   <td style="text-align:left;"> CORIS BANK INTERNATIONAL BURKINA FASO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CFAC </td>
   <td style="text-align:left;"> CFAO MOTORS COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> CIEC </td>
   <td style="text-align:left;"> CIE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ECOC </td>
   <td style="text-align:left;"> ECOBANK COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ETIT </td>
   <td style="text-align:left;"> Ecobank Transnational Incorporated TOGO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> TOGO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> FTSC </td>
   <td style="text-align:left;"> FILTISAC COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NEIC </td>
   <td style="text-align:left;"> NEI-CEDA COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NSBC </td>
   <td style="text-align:left;"> NSIA BANQUE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> NTLC </td>
   <td style="text-align:left;"> NESTLE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ONTBF </td>
   <td style="text-align:left;"> ONATEL BURKINA FASO </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> BURKINA FASO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ORAC </td>
   <td style="text-align:left;"> ORANGE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> ORGT </td>
   <td style="text-align:left;"> ORAGROUP TOGO </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> TOGO </td>
  </tr>
  <tr>
   <td style="text-align:left;"> PALC </td>
   <td style="text-align:left;"> PALM COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> PRSC </td>
   <td style="text-align:left;"> TRACTAFRIC MOTORS COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SAFC </td>
   <td style="text-align:left;"> SAFCA COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SCRC </td>
   <td style="text-align:left;"> SUCRIVOIRE COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SDCC </td>
   <td style="text-align:left;"> SODE COTE D'IVOIRE </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SDSC </td>
   <td style="text-align:left;"> BOLLORE TRANSPORT &amp; LOGISTICS COTE D'IVOIRE </td>
   <td style="text-align:left;"> TRANSPORT </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SEMC </td>
   <td style="text-align:left;"> CROWN SIEM COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SGBC </td>
   <td style="text-align:left;"> SOCIETE GENERALE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SHEC </td>
   <td style="text-align:left;"> VIVO ENERGY COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SIBC </td>
   <td style="text-align:left;"> SOCIETE IVOIRIENNE DE BANQUE COTE D'IVOIRE </td>
   <td style="text-align:left;"> FINANCE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SICC </td>
   <td style="text-align:left;"> SICOR COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SIVC </td>
   <td style="text-align:left;"> AIR LIQUIDE COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SLBC </td>
   <td style="text-align:left;"> SOLIBRA COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SMBC </td>
   <td style="text-align:left;"> SMB COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SNTS </td>
   <td style="text-align:left;"> SONATEL SENEGAL </td>
   <td style="text-align:left;"> PUBLIC SERVICE </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SOGC </td>
   <td style="text-align:left;"> SOGB COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SPHC </td>
   <td style="text-align:left;"> SAPH COTE D'IVOIRE </td>
   <td style="text-align:left;"> AGRICULTURE </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> STAC </td>
   <td style="text-align:left;"> SETAO COTE D'IVOIRE </td>
   <td style="text-align:left;"> OTHER </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> STBC </td>
   <td style="text-align:left;"> SITAB COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> SVOC </td>
   <td style="text-align:left;"> MOVIS COTE D'IVOIRE </td>
   <td style="text-align:left;"> TRANSPORT </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTLC </td>
   <td style="text-align:left;"> TOTAL COTE D'IVOIRE </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTLS </td>
   <td style="text-align:left;"> TOTAL SENEGAL </td>
   <td style="text-align:left;"> DISTRIBUTION </td>
   <td style="text-align:left;"> SENEGAL </td>
  </tr>
  <tr>
   <td style="text-align:left;"> TTRC </td>
   <td style="text-align:left;"> TRITURAF Ste en Liquid </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> UNLC </td>
   <td style="text-align:left;"> UNILEVER COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
  <tr>
   <td style="text-align:left;"> UNXC </td>
   <td style="text-align:left;"> UNIWAX COTE D'IVOIRE </td>
   <td style="text-align:left;"> INDUSTRY </td>
   <td style="text-align:left;"> IVORY COAST </td>
  </tr>
</tbody>
</table>

</div>
</div>
</section>
<section id="the-brvm_index-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_index-function">The <strong>BRVM_index()</strong> function :</h2>
<p>It receives no argument and returns a table of updated data (with as table header: indexes, previous closing, closing, change (%), Year to Date Change) on all the indices available on the BRVM exchange.</p>
<div class="cell">
<div class="cell-output-display">

<table class="table table-striped" style="margin-left: auto; margin-right: auto;">
 <thead>
  <tr>
   <th style="text-align:left;"> Indexes </th>
   <th style="text-align:right;"> Previous closing </th>
   <th style="text-align:right;"> Closing </th>
   <th style="text-align:right;"> Change (%) </th>
   <th style="text-align:right;"> Year to Date Change </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> BRVM-30 </td>
   <td style="text-align:right;"> 99.71 </td>
   <td style="text-align:right;"> 99.75 </td>
   <td style="text-align:right;"> 0.04 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - AGRICULTURE </td>
   <td style="text-align:right;"> 281.76 </td>
   <td style="text-align:right;"> 281.25 </td>
   <td style="text-align:right;"> -0.18 </td>
   <td style="text-align:right;"> -0.66 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - OTHER SECTOR </td>
   <td style="text-align:right;"> 1295.58 </td>
   <td style="text-align:right;"> 1357.27 </td>
   <td style="text-align:right;"> 4.76 </td>
   <td style="text-align:right;"> -7.32 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - COMPOSITE </td>
   <td style="text-align:right;"> 199.37 </td>
   <td style="text-align:right;"> 199.46 </td>
   <td style="text-align:right;"> 0.05 </td>
   <td style="text-align:right;"> 0.85 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - DISTRIBUTION </td>
   <td style="text-align:right;"> 346.02 </td>
   <td style="text-align:right;"> 345.33 </td>
   <td style="text-align:right;"> -0.20 </td>
   <td style="text-align:right;"> 0.69 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - FINANCE </td>
   <td style="text-align:right;"> 74.53 </td>
   <td style="text-align:right;"> 75.03 </td>
   <td style="text-align:right;"> 0.67 </td>
   <td style="text-align:right;"> -0.66 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - INDUSTRY </td>
   <td style="text-align:right;"> 98.33 </td>
   <td style="text-align:right;"> 98.10 </td>
   <td style="text-align:right;"> -0.23 </td>
   <td style="text-align:right;"> 0.92 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PRESTIGE </td>
   <td style="text-align:right;"> 102.61 </td>
   <td style="text-align:right;"> 102.56 </td>
   <td style="text-align:right;"> -0.05 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PRINCIPAL </td>
   <td style="text-align:right;"> 94.56 </td>
   <td style="text-align:right;"> 94.62 </td>
   <td style="text-align:right;"> 0.06 </td>
   <td style="text-align:right;"> 0.00 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - PUBLIC SERVICES </td>
   <td style="text-align:right;"> 480.97 </td>
   <td style="text-align:right;"> 479.60 </td>
   <td style="text-align:right;"> -0.28 </td>
   <td style="text-align:right;"> 2.23 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> BRVM - TRANSPORT </td>
   <td style="text-align:right;"> 345.28 </td>
   <td style="text-align:right;"> 341.70 </td>
   <td style="text-align:right;"> -1.04 </td>
   <td style="text-align:right;"> 0.35 </td>
  </tr>
</tbody>
</table>

</div>
</div>
</section>
<section id="the-brvm_get.symbol-.from-.to-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_get.symbol-.from-.to-function">The <strong>BRVM_get(“.symbol”, “.from”, “.to”)</strong> function</h2>
<p>This function will get the data of the companies listed on the BVRM stock exchange in Rich Bourse website. The function takes a single parameter, <code>.symbol</code> (which represents the “Ticker”). The function will automatically format tickers you enter in uppercase using toupper() and then ensure that the passed ticker is in a Google spreadsheet of allowed tickers.</p>
<ul>
<li>.symbol : A vector of symbols, like: c(“BICC”,“XOM”,“SlbC”) ;</li>
<li>.from : A quoted start date, ie. “2020-01-01” or “2020/01/01”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD” ;</li>
<li>.to : A quoted end date, ie. “2022-01-31” or “2022/01/31”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”.</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;">#' Displaying data of SONATEL Senegal stock</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">BRVM_get</span>(<span class="at" style="color: #657422;">.symbol =</span> <span class="st" style="color: #20794D;">"snts"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "SNTS"</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 251 × 6
   Date        Open  High   Low Close Volume
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;
 1 2022-04-06 15800 15895 15750 15800   7436
 2 2022-04-07 15800 15900 15750 15900   1265
 3 2022-04-08 15900 15995 15800 15900   1164
 4 2022-04-11 15895 15900 15800 15800   4252
 5 2022-04-12 15800 15800 15780 15800   6561
 6 2022-04-13 15800 15865 15795 15850   5409
 7 2022-04-14 15855 15900 15850 15900  16957
 8 2022-04-15 15995 15995 15900 15900    791
 9 2022-04-19 15900 15995 15895 15900  31217
10 2022-04-20 15900 15995 15895 15990  32322
# ℹ 241 more rows</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">symbols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"BiCc"</span>,<span class="st" style="color: #20794D;">"XOM"</span>,<span class="st" style="color: #20794D;">"SlbC"</span>)   <span class="co" style="color: #5E5E5E;"># We use here three tickers</span></span>
<span id="cb8-2">data_tbl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get</span>(<span class="at" style="color: #657422;">.symbol =</span> symbols, <span class="at" style="color: #657422;">.from =</span> <span class="st" style="color: #20794D;">"2020-01-01"</span>, <span class="at" style="color: #657422;">.to =</span> <span class="fu" style="color: #4758AB;">Sys.Date</span>() <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "BICC" "SLBC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Display the first twenty observations of the table</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">head</span>(data_tbl, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2020-01-10  6500  6500  6500  6500     24 BICC  
 2 2020-01-13  6370  6500  6370  6500     29 BICC  
 3 2020-01-14  6495  6495  6495  6495     10 BICC  
 4 2020-01-29  6010  6010  6010  6010     24 BICC  
 5 2020-01-30  6000  6000  6000  6000     50 BICC  
 6 2020-02-04  5800  5800  5800  5800     12 BICC  
 7 2020-02-07  5650  5650  5650  5650      5 BICC  
 8 2020-02-10  5500  5500  5500  5500      5 BICC  
 9 2020-02-14  5300  5300  5300  5300      9 BICC  
10 2020-02-17  4910  4910  4910  4910    210 BICC  
11 2020-02-18  4910  4910  4910  4910     50 BICC  
12 2020-02-20  4895  4895  4895  4895      5 BICC  
13 2020-02-21  4895  4895  4890  4890     13 BICC  
14 2020-02-25  4525  4525  4525  4525     16 BICC  
15 2020-02-26  4435  4435  4430  4430     21 BICC  
16 2020-02-27  4345  4760  4335  4760   1809 BICC  
17 2020-03-03  4745  4750  4745  4750     11 BICC  
18 2020-03-05  4700  4700  4700  4700      5 BICC  
19 2020-03-06  4695  4695  4695  4695      6 BICC  
20 2020-03-11  4345  4450  4345  4450    135 BICC  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Display the last twenty elements of the table</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">tail</span>(data_tbl, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2023-02-15 80000 80000 79000 79000      2 SLBC  
 2 2023-02-17 78000 78000 78000 78000      5 SLBC  
 3 2023-02-21 80000 80000 80000 80000      5 SLBC  
 4 2023-02-23 80000 80000 80000 80000     18 SLBC  
 5 2023-02-24 80000 80000 80000 80000      6 SLBC  
 6 2023-02-27 80000 80000 80000 80000     98 SLBC  
 7 2023-02-28 80000 80000 80000 80000     11 SLBC  
 8 2023-03-02 80000 80000 80000 80000     11 SLBC  
 9 2023-03-08 80000 80000 80000 80000      2 SLBC  
10 2023-03-09 80000 80000 80000 80000      2 SLBC  
11 2023-03-13 80005 80005 80000 80000     12 SLBC  
12 2023-03-14 80000 80000 80000 80000      1 SLBC  
13 2023-03-20 80000 80000 80000 80000      3 SLBC  
14 2023-03-21 80000 80000 80000 80000      4 SLBC  
15 2023-03-27 78000 80000 78000 80000    169 SLBC  
16 2023-03-28 80000 80000 80000 80000    435 SLBC  
17 2023-03-30 80000 80000 80000 80000      3 SLBC  
18 2023-03-31 80000 80000 80000 80000      1 SLBC  
19 2023-04-04 80000 86000 80000 86000      3 SLBC  
20 2023-04-05 85950 86000 85950 86000      6 SLBC  </code></pre>
</div>
</div>
</section>
<section id="the-brvm_get1ticker-period-from-to-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm_get1ticker-period-from-to-function">The <strong>BRVM_get1(“ticker”, “Period”, “from”, “to”)</strong> function</h2>
<p>This function will get data of the companies listed on the BVRM stock exchange through the sikafinance site. The function takes in a single parameter of ticker and will auto-format the tickers you input into all upper case by using <code>toupper()</code></p>
<ul>
<li>ticker : A vector of ticker, like: c(“BICC”,“XOM”,“SlbC”, “BRvm10”);</li>
<li>Period : Numeric number indicating time period. Valid entries are 0, 1, 5, 30, 91, and 365 representing respectively ‘daily’, ‘one year’, ‘weekly’, ‘monthly’, ‘quarterly’ and ‘yearly’;</li>
<li>from : A quoted start date, ie. “2020-01-01” or “2020/01/01”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”;</li>
<li>to : A quoted end date, ie. “2022-01-31” or “2022/01/31”. The date must be in ymd format “YYYY-MM-DD” or “YYYY/MM/DD”</li>
</ul>
<p>** NB : There is a small difference between the BRVM_get and BRVM_get1 functions. * With BRVM_get it is only possible to download tickers’ daily data. * But with BRVM_get1, you can download daily, weekly, monthly, annual tickers’ data, indices and even market capitalization.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="co" style="color: #5E5E5E;">#' Displaying data of SONATEL Senegal stock</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="st" style="color: #20794D;">"snts"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Make sure you have an active internet connection"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;"># Get daily data of all indexes</span></span>
<span id="cb16-2">all_ind <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="st" style="color: #20794D;">"ALL INDEXES"</span>, <span class="at" style="color: #657422;">Period =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">from =</span> <span class="st" style="color: #20794D;">"2020-01-04"</span>, <span class="at" style="color: #657422;">to =</span> <span class="st" style="color: #20794D;">"2023-03-24"</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "We obtained BRVM10 data from 2019-12-26 to 2023-01-04"
[1] "We obtained BRVMAG data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMC data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMAS data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMDI data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMFI data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMIN data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMSP data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMTR data from 2019-12-26 to 2023-03-24"
[1] "We obtained BRVMPR data from 2023-01-01 to 2023-03-24"
[1] "We obtained BRVMPA data from 2023-01-04 to 2023-03-24"
[1] "We obtained BRVM30 data from 2023-01-01 to 2023-03-24"
[1] "We obtained CAPIB data from 2020-01-02 to 2023-03-24"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="co" style="color: #5E5E5E;"># display the first two tens elements of the table</span></span>
<span id="cb18-2"><span class="fu" style="color: #4758AB;">head</span>(all_ind, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date        Open  High   Low Close Volume Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2022-12-26  169.  169.  169.  169.      0 BRVM10
 2 2022-12-27  169.  169.  169.  169.      0 BRVM10
 3 2022-12-28  167.  167.  167.  167.      0 BRVM10
 4 2022-12-29  167.  167.  167.  167.      0 BRVM10
 5 2022-12-30  166.  166.  166.  166.      0 BRVM10
 6 2023-01-02  166.  166.  166.  166.      0 BRVM10
 7 2023-01-03  166.  166.  166.  166.      0 BRVM10
 8 2023-01-04  166.  166.  166.  166.      0 BRVM10
 9 2022-09-26  163.  163.  163.  163.      0 BRVM10
10 2022-09-27  162.  162.  162.  162.      0 BRVM10
11 2022-09-28  162.  162.  162.  162.      0 BRVM10
12 2022-09-29  163.  163.  163.  163.      0 BRVM10
13 2022-09-30  164.  164.  164.  164.      0 BRVM10
14 2022-10-03  162.  162.  162.  162.      0 BRVM10
15 2022-10-04  162.  162.  162.  162.      0 BRVM10
16 2022-10-05  161.  161.  161.  161.      0 BRVM10
17 2022-10-06  161.  161.  161.  161.      0 BRVM10
18 2022-10-07  161.  161.  161.  161.      0 BRVM10
19 2022-10-10  160.  160.  160.  160.      0 BRVM10
20 2022-10-11  160.  160.  160.  160.      0 BRVM10</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;"># display the two tens of the last elements of the table</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;">tail</span>(all_ind, <span class="dv" style="color: #AD0000;">20</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 7
   Date          Open    High     Low   Close Volume Ticker
   &lt;date&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2020-02-26 4281311 4281311 4281311 4281311      0 CAPIB 
 2 2020-02-27 4314933 4314933 4314933 4314933      0 CAPIB 
 3 2020-02-28 4346515 4346515 4346515 4346515      0 CAPIB 
 4 2020-03-02 4424073 4424073 4424073 4424073      0 CAPIB 
 5 2020-03-03 4379647 4379647 4379647 4379647      0 CAPIB 
 6 2020-03-04 4369550 4369550 4369550 4369550      0 CAPIB 
 7 2020-03-05 4342229 4342229 4342229 4342229      0 CAPIB 
 8 2020-03-06 4359879 4359879 4359879 4359879      0 CAPIB 
 9 2020-03-09 4338293 4338293 4338293 4338293      0 CAPIB 
10 2020-03-10 4357221 4357221 4357221 4357221      0 CAPIB 
11 2020-03-11 4332656 4332656 4332656 4332656      0 CAPIB 
12 2020-03-12 4318096 4318096 4318096 4318096      0 CAPIB 
13 2020-03-13 4318112 4318112 4318112 4318112      0 CAPIB 
14 2020-03-16 4285184 4285184 4285184 4285184      0 CAPIB 
15 2020-03-17 4301727 4301727 4301727 4301727      0 CAPIB 
16 2020-03-18 4288582 4288582 4288582 4288582      0 CAPIB 
17 2020-03-19 4207231 4207231 4207231 4207231      0 CAPIB 
18 2020-03-20 4209788 4209788 4209788 4209788      0 CAPIB 
19 2020-03-23 4154445 4154445 4154445 4154445      0 CAPIB 
20 2020-03-24 4144325 4144325 4144325 4144325      0 CAPIB </code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1"><span class="co" style="color: #5E5E5E;"># To get yearly data</span></span>
<span id="cb22-2">yearly_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">BRVM_get1</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"brvmtr"</span>, <span class="st" style="color: #20794D;">"BiCc"</span>, <span class="st" style="color: #20794D;">"BOAS"</span>), <span class="at" style="color: #657422;">Period =</span> <span class="dv" style="color: #AD0000;">365</span> ) </span>
<span id="cb22-3"><span class="co" style="color: #5E5E5E;"># display the first two tens elements of the table</span></span>
<span id="cb22-4"><span class="fu" style="color: #4758AB;">head</span>(yearly_data, <span class="dv" style="color: #AD0000;">20</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   Date         Open   High    Low  Close Ticker
   &lt;date&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt; 
 1 2003-04-11   74.0   88.6   73.6   88.6 BRVMTR
 2 2004-01-02   88.6   89.2   72.9   89.2 BRVMTR
 3 2005-01-03   89.2  107.    70.7  104.  BRVMTR
 4 2006-01-02  104.   158.   104.   153.  BRVMTR
 5 2007-01-02  153.   275.   149.   249.  BRVMTR
 6 2008-01-02  249.   386.   226.   296.  BRVMTR
 7 2009-01-02  275.   296.   227.   236.  BRVMTR
 8 2010-01-04  236.   259.   224.   238.  BRVMTR
 9 2011-01-03  238.   249.   204.   239   BRVMTR
10 2012-01-02  239    349.   201.   349.  BRVMTR
11 2013-01-02  349.   794.   339.   789.  BRVMTR
12 2014-01-02  789.  1213.   601.  1213.  BRVMTR
13 2015-01-02 1213.  1525.   653.  1525.  BRVMTR
14 2016-01-04 1525.  1525.  1216.  1432.  BRVMTR
15 2017-01-02 1432.  1433.   764.  1203.  BRVMTR
16 2018-01-02 1114.  1193.   966.   966.  BRVMTR
17 2019-06-03  403.   429.   311.   367.  BRVMTR
18 2020-01-01  367.   475.   292.   379.  BRVMTR
19 2021-01-04  376.   622.   325    622.  BRVMTR
20 2022-01-03  667.   667.   295.   342.  BRVMTR</code></pre>
</div>
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb24-1"><span class="co" style="color: #5E5E5E;"># display the two tens of the last elements of the table</span></span>
<span id="cb24-2"><span class="fu" style="color: #4758AB;">tail</span>(yearly_data, <span class="dv" style="color: #AD0000;">20</span>) </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 20 × 6
   Date        Open  High   Low Close Ticker
   &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 
 1 2014-01-02  5650  7848  5650  7800 BICC  
 2 2015-01-02  8385 10750  7800 10100 BICC  
 3 2016-01-04 10000 10700  8566  9890 BICC  
 4 2017-01-05  9750 10000  6440  8490 BICC  
 5 2018-01-02  8700  8750  3795  7900 BICC  
 6 2019-01-04  7550  7550  3710  6800 BICC  
 7 2020-01-01  6800  6890  2855  6680 BICC  
 8 2021-01-04  6680  7525  4280  7400 BICC  
 9 2022-01-03  7250  7250  5550  6850 BICC  
10 2023-01-02  6500  6850  5785  6275 BICC  
11 2014-12-10  1613  3225  1613  3225 BOAS  
12 2015-01-02  3370  4300  2900  3950 BOAS  
13 2016-01-04  3700  4101  2000  2350 BOAS  
14 2017-01-02  2325  3875  2035  2500 BOAS  
15 2018-01-02  2400  3250  1700  2020 BOAS  
16 2019-01-02  1900  2000  1500  1545 BOAS  
17 2020-01-01  1550  1700  1295  1495 BOAS  
18 2021-01-04  1480  2750  1340  2350 BOAS  
19 2022-01-03  2350  2780  2200  2450 BOAS  
20 2023-01-02  2580  2585  2175  2265 BOAS  </code></pre>
</div>
</div>
</section>
<section id="the-brvm.index-function" class="level2">
<h2 class="anchored" data-anchor-id="the-brvm.index-function">The <strong>BRVM.index()</strong> function :</h2>
<p>It receives no argument and returns the name of all indexes available on BRVM Stock Exchange.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1"><span class="fu" style="color: #4758AB;">BRVM.index</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "BRVMAG" "BRVMC"  "BRVMAS" "BRVMDI" "BRVMFI" "BRVMIN" "BRVMSP" "BRVMTR"
 [9] "BRVMPR" "BRVMPA" "BRVM30"</code></pre>
</div>
</div>
<p><strong>Authors</strong> : <br></p>
<ul>
<li><p><a href="https://github.com/Koffi-Fredysessie">Koffi Frederic Sessie</a> (<a href="mailto:koffisessie@gmail.com" class="email">koffisessie@gmail.com</a>),</p></li>
<li><p><a href="https://github.com/AODiakite">Abdoul Oudouss Diakité</a> (<a href="mailto:abdouloudoussdiakite@gmail.com" class="email">abdouloudoussdiakite@gmail.com</a>),</p></li>
<li><p><a href="https://github.com/spsanderson">Sanderson Steven</a>(<a href="mailto:spsanderson@gmail.com" class="email">spsanderson@gmail.com</a>)<br></p></li>
</ul>
<p><strong>Creator</strong> : Koffi Frederic Sessie <br></p>
<p><strong>cph (Copyright Holder)</strong> : Koffi Frederic Sessie <br></p>
<p><strong>License</strong> : MIT 2023, BRVM authors. All rights reserved.</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>brvm</category>
  <category>markets</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/index.html</guid>
  <pubDate>Thu, 06 Apr 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-04-06/brvm-logo.png" medium="image" type="image/png" height="132" width="144"/>
</item>
<item>
  <title>Looking at Daily Log Returns with tidyquant, TidyDensity, and Shiny</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-05/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this blog post, we’ll walk through how to create a shiny application that allows users to analyze the weekly returns of FAANG stocks (AAPL, AMZN, FB, GOOGL, and NFLX) using the <a href="https://business-science.github.io/tidyquant/"><code>{tidyquant}</code></a> and <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> packages in R.</p>
<section id="section-1-package-and-ui-setup" class="level2">
<h2 class="anchored" data-anchor-id="section-1-package-and-ui-setup">Section 1: Package and UI Setup</h2>
<p>The first section of the code sets up the necessary R packages and creates the UI for the shiny app. The packages we’ll be using are:</p>
<ul>
<li><strong>shiny</strong>: for creating interactive web applications in R</li>
<li><strong>tidyquant</strong>: for easily getting and analyzing financial data in R</li>
<li><strong>TidyDensity</strong>: for computing and visualizing probability distributions in a tidy way</li>
<li><strong>dplyr</strong>: for manipulating data in a tidy way</li>
<li><strong>DT</strong>: for creating interactive and scrollable data tables</li>
</ul>
<p>Analysts assemble your packages!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(tidyquant)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(DT)</span></code></pre></div>
</div>
<p>The UI consists of a title panel, a sidebar panel, and a main panel. The sidebar panel contains a select input that allows users to choose which FAANG stock to analyze, as well as a numeric input for the number of simulations to run. The main panel contains two sections: one for the <code>tidy_autoplot()</code> output (a plot of the stock returns), and one for the <code>tidy_empirical()</code> output (a table of the log returns).</p>
</section>
<section id="section-2-server-setup" class="level2">
<h2 class="anchored" data-anchor-id="section-2-server-setup">Section 2: Server Setup</h2>
<p>The second section of the code defines the server function for the shiny app. The server function takes the input values from the UI (i.e.&nbsp;the selected stock and number of simulations) and uses them to get and analyze the stock data.</p>
<p>To get the stock data, we use the <code>tq_get()</code> function from the <code>tidyquant</code> package to retrieve the adjusted stock prices for the selected security from January 1, 2010 to the present. We then use the <code>tq_transmute()</code> function to compute the weekly log returns of the stock and rename the resulting column to “log_return”.</p>
<p>The <code>tidy_empirical()</code> function from the <code>TidyDensity</code> package is used to compute the empirical distribution of the log returns. The resulting table is displayed using the <code>renderDT()</code> function from the <code>DT</code> package, which creates a scrollable data table that can be sorted and filtered.</p>
<p>The <code>tidy_autoplot()</code> function is used to create a plot of the log returns, which is displayed using the <code>renderPlot()</code> function.</p>
</section>
<section id="section-3-running-the-app" class="level2">
<h2 class="anchored" data-anchor-id="section-3-running-the-app">Section 3: Running the App</h2>
<p>The final section of the code runs the shiny app using the ui and server functions.</p>
<p>Overall, this shiny app provides a simple and interactive way for users to analyze the weekly returns of FAANG stocks using <code>tidyquant</code> and <code>TidyDensity</code> in R. By allowing users to choose which stock to analyze and how many simulations to run, the app provides a customizable way to explore the empirical distributions of the log returns.</p>
</section>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Here is a full working example, except for FB for some reason that symbol errors out for me, go figure:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(tidyquant)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(DT)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># define UI</span></span>
<span id="cb2-8">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"FAANG Stock Analysis"</span>),</span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb2-11">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb2-12">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="st" style="color: #20794D;">"ticker"</span>, <span class="st" style="color: #20794D;">"Select a security:"</span>, <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"AAPL"</span>, <span class="st" style="color: #20794D;">"AMZN"</span>, <span class="st" style="color: #20794D;">"FB"</span>, <span class="st" style="color: #20794D;">"GOOGL"</span>, <span class="st" style="color: #20794D;">"NFLX"</span>), <span class="at" style="color: #657422;">selected =</span> <span class="st" style="color: #20794D;">"AAPL"</span>),</span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;">numericInput</span>(<span class="st" style="color: #20794D;">"num_sims"</span>, <span class="st" style="color: #20794D;">"Enter the number of simulations:"</span>, <span class="at" style="color: #657422;">value =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">min =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">max =</span> <span class="dv" style="color: #AD0000;">25</span>, <span class="at" style="color: #657422;">step =</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb2-14">    ),</span>
<span id="cb2-15">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb2-16">      <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">"Tidy Autoplot Output"</span>),</span>
<span id="cb2-17">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="st" style="color: #20794D;">"autoplot_output"</span>),</span>
<span id="cb2-18">      <span class="fu" style="color: #4758AB;">h3</span>(<span class="st" style="color: #20794D;">"Tidy Empirical Output"</span>),</span>
<span id="cb2-19">      <span class="fu" style="color: #4758AB;">DTOutput</span>(<span class="st" style="color: #20794D;">"empirical_output"</span>)</span>
<span id="cb2-20">    )</span>
<span id="cb2-21">  )</span>
<span id="cb2-22">)</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;"># define server</span></span>
<span id="cb2-25">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb2-26">  </span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;"># get stock data using tq_get and tq_transmute</span></span>
<span id="cb2-28">  stock_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb2-29">    <span class="fu" style="color: #4758AB;">tq_get</span>(input<span class="sc" style="color: #5E5E5E;">$</span>ticker, <span class="at" style="color: #657422;">get =</span> <span class="st" style="color: #20794D;">"stock.prices"</span>, <span class="at" style="color: #657422;">from =</span> <span class="st" style="color: #20794D;">"2010-01-01"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-30">      <span class="fu" style="color: #4758AB;">tq_transmute</span>(<span class="at" style="color: #657422;">select =</span> adjusted, <span class="at" style="color: #657422;">mutate_fun =</span> periodReturn, <span class="at" style="color: #657422;">period =</span> <span class="st" style="color: #20794D;">"weekly"</span>, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"log"</span>, <span class="at" style="color: #657422;">col_rename =</span> <span class="st" style="color: #20794D;">"log_return"</span>)</span>
<span id="cb2-31">  })</span>
<span id="cb2-32">  </span>
<span id="cb2-33">  <span class="co" style="color: #5E5E5E;"># output tidy_empirical results</span></span>
<span id="cb2-34">  output<span class="sc" style="color: #5E5E5E;">$</span>empirical_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderDT</span>({</span>
<span id="cb2-35">    <span class="fu" style="color: #4758AB;">datatable</span>(</span>
<span id="cb2-36">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(<span class="fu" style="color: #4758AB;">stock_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>log_return, <span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims),</span>
<span id="cb2-37">      <span class="at" style="color: #657422;">options =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">scrollY =</span> <span class="st" style="color: #20794D;">"250px"</span>)</span>
<span id="cb2-38">    )</span>
<span id="cb2-39">  })</span>
<span id="cb2-40">  </span>
<span id="cb2-41">  <span class="co" style="color: #5E5E5E;"># output tidy_autoplot results</span></span>
<span id="cb2-42">  output<span class="sc" style="color: #5E5E5E;">$</span>autoplot_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb2-43">    <span class="fu" style="color: #4758AB;">stock_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>log_return <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-44">      <span class="fu" style="color: #4758AB;">tidy_empirical</span>(<span class="at" style="color: #657422;">.num_sims =</span> input<span class="sc" style="color: #5E5E5E;">$</span>num_sims) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-45">      <span class="fu" style="color: #4758AB;">tidy_autoplot</span>()</span>
<span id="cb2-46">  })</span>
<span id="cb2-47">  </span>
<span id="cb2-48">}</span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;"># run the app</span></span>
<span id="cb2-51"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>tidydensity</category>
  <category>tidyquant</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-05/index.html</guid>
  <pubDate>Wed, 05 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A sample Shiny App to view Forecasts on the AirPassengers Data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-04/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Hello! In this code, we are making a program that will help us predict the number of air passengers in the future. Let me explain what each part of the code does, step by step.</p>
<p>First, we need to load some tools that will help us create the program. These tools are called “packages.” We use the library() function to load them. The packages we need are called <code>shiny</code>, <code>forecast</code>, and <code>ggplot2</code>.</p>
<section id="load-libraries" class="level2">
<h2 class="anchored" data-anchor-id="load-libraries">Load Libraries</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span></code></pre></div>
</div>
</section>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>Next, we need some data to work with. We will use a dataset of the number of air passengers each month from 1949 to 1960. We load this dataset using the data() function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span></code></pre></div>
</div>
</section>
<section id="user-interface" class="level2">
<h2 class="anchored" data-anchor-id="user-interface">User Interface</h2>
<p>Now, we need to create the user interface, or UI. This is what the user will see and interact with. In this case, we will create a simple app with a title, a <strong>dropdown</strong> menu to choose a forecasting model, and a plot and table to display the forecast results. We use the <code>fluidPage()</code> function to create the UI, and we define the UI elements inside it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"AirPassengers Forecast"</span>),</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb3-5">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"model"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Choose a model:"</span>,</span>
<span id="cb3-6">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"auto.arima"</span>, <span class="st" style="color: #20794D;">"ets"</span>, <span class="st" style="color: #20794D;">"holtwinters"</span>))</span>
<span id="cb3-7">    ),</span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb3-9">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_plot"</span>),</span>
<span id="cb3-10">      <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_table"</span>)</span>
<span id="cb3-11">    )</span>
<span id="cb3-12">  )</span>
<span id="cb3-13">)</span></code></pre></div>
</div>
</section>
<section id="server" class="level2">
<h2 class="anchored" data-anchor-id="server">Server</h2>
<p>Now, we need to define the server. The server is where the program does the calculations and generates the output based on what the user selects in the UI. We define the server inside the function(input, output) argument.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span></code></pre></div>
</div>
<p>Inside the server, we need to create a reactive expression that generates the forecast based on the model the user selects. We use an if statement to check which model the user selected, and then we use the corresponding function to generate the forecast.</p>
<section id="forecast-the-data" class="level3">
<h3 class="anchored" data-anchor-id="forecast-the-data">Forecast the Data</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">forecast_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"auto.arima"</span>) {</span>
<span id="cb5-3">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(AirPassengers)</span>
<span id="cb5-4">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-5">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ets"</span>) {</span>
<span id="cb5-6">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ets</span>(AirPassengers)</span>
<span id="cb5-7">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-8">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-9">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hw</span>(AirPassengers)</span>
<span id="cb5-10">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb5-11">    }</span>
<span id="cb5-12">  })</span></code></pre></div>
</div>
</section>
<section id="render-plot" class="level3">
<h3 class="anchored" data-anchor-id="render-plot">Render Plot</h3>
<p>The <code>renderPlot()</code> function tells the program to create a plot based on the reactive expression we defined earlier. We use the <code>plotOutput()</code> function in the UI to display the plot.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">output<span class="sc" style="color: #5E5E5E;">$</span>forecast_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb6-2">    <span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">forecast_data</span>())</span>
<span id="cb6-3">  })</span></code></pre></div>
</div>
<p>Similarly, the <code>renderTable()</code> function tells the program to create a table based on the reactive expression we defined earlier. We use the <code>tableOutput()</code> function in the UI to display the table.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">output<span class="sc" style="color: #5E5E5E;">$</span>forecast_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;">forecast_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>mean</span>
<span id="cb7-3">  })</span></code></pre></div>
</div>
<p>Finally, we run the app using the <code>shinyApp()</code> function, with the UI and server arguments.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>And that’s it! This program allows the user to choose a forecasting model, and then generates a plot and table with the predicted number of air passengers based on that model.</p>
<p>Here is the Full code block”</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Load required packages</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;"># Load AirPassengers dataset</span></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;"># Define UI</span></span>
<span id="cb9-10">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(</span>
<span id="cb9-11">  </span>
<span id="cb9-12">  <span class="co" style="color: #5E5E5E;"># Title of the app</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;">titlePanel</span>(<span class="st" style="color: #20794D;">"AirPassengers Forecast"</span>),</span>
<span id="cb9-14">  </span>
<span id="cb9-15">  <span class="co" style="color: #5E5E5E;"># Sidebar with input controls</span></span>
<span id="cb9-16">  <span class="fu" style="color: #4758AB;">sidebarLayout</span>(</span>
<span id="cb9-17">    <span class="fu" style="color: #4758AB;">sidebarPanel</span>(</span>
<span id="cb9-18">      <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"model"</span>, <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Choose a model:"</span>,</span>
<span id="cb9-19">                  <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"auto.arima"</span>, <span class="st" style="color: #20794D;">"ets"</span>, <span class="st" style="color: #20794D;">"holtwinters"</span>))</span>
<span id="cb9-20">    ),</span>
<span id="cb9-21">    </span>
<span id="cb9-22">    <span class="co" style="color: #5E5E5E;"># Output plot and table</span></span>
<span id="cb9-23">    <span class="fu" style="color: #4758AB;">mainPanel</span>(</span>
<span id="cb9-24">      <span class="fu" style="color: #4758AB;">plotOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_plot"</span>),</span>
<span id="cb9-25">      <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"forecast_table"</span>)</span>
<span id="cb9-26">    )</span>
<span id="cb9-27">  )</span>
<span id="cb9-28">)</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;"># Define server</span></span>
<span id="cb9-31">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb9-32">  </span>
<span id="cb9-33">  <span class="co" style="color: #5E5E5E;"># Reactive expression to create forecast based on selected model</span></span>
<span id="cb9-34">  forecast_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>({</span>
<span id="cb9-35">    <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"auto.arima"</span>) {</span>
<span id="cb9-36">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(AirPassengers)</span>
<span id="cb9-37">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-38">    } <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (input<span class="sc" style="color: #5E5E5E;">$</span>model <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"ets"</span>) {</span>
<span id="cb9-39">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ets</span>(AirPassengers)</span>
<span id="cb9-40">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-41">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb9-42">      fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">hw</span>(AirPassengers)</span>
<span id="cb9-43">      <span class="fu" style="color: #4758AB;">forecast</span>(fit)</span>
<span id="cb9-44">    }</span>
<span id="cb9-45">  })</span>
<span id="cb9-46">  </span>
<span id="cb9-47">  <span class="co" style="color: #5E5E5E;"># Output plot</span></span>
<span id="cb9-48">  output<span class="sc" style="color: #5E5E5E;">$</span>forecast_plot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderPlot</span>({</span>
<span id="cb9-49">    <span class="fu" style="color: #4758AB;">plot</span>(<span class="fu" style="color: #4758AB;">forecast_data</span>())</span>
<span id="cb9-50">    <span class="co" style="color: #5E5E5E;">#checkresiduals(forecast_data())</span></span>
<span id="cb9-51">  })</span>
<span id="cb9-52">  </span>
<span id="cb9-53">  <span class="co" style="color: #5E5E5E;"># Output table</span></span>
<span id="cb9-54">  output<span class="sc" style="color: #5E5E5E;">$</span>forecast_table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb9-55">    <span class="fu" style="color: #4758AB;">forecast_data</span>()<span class="sc" style="color: #5E5E5E;">$</span>mean</span>
<span id="cb9-56">  })</span>
<span id="cb9-57">}</span>
<span id="cb9-58"></span>
<span id="cb9-59"><span class="co" style="color: #5E5E5E;"># Run the app</span></span>
<span id="cb9-60"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>
</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>data</category>
  <category>timeseries</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-04/index.html</guid>
  <pubDate>Tue, 04 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A sample Shiny App to view CMS Healthcare Data</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-03/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this blog post, we will be discussing how to create a Shiny application in R that will download and extract data from a zip file and allow users to choose which data they would like to see presented to them in the app from a selection drop-down menu. We will be using the <code>current_hosp_data()</code> function to obtain and read in the data. This function is in the upcoming release for the <a href="https://www.spsanderson.com/healthyR.data/"><code>{healthyR.data}</code></a> package.</p>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="install" class="level2">
<h2 class="anchored" data-anchor-id="install">Install</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"shiny"</span>,<span class="st" style="color: #20794D;">"shinythemes"</span>))</span></code></pre></div>
</div>
</section>
<section id="current-hospital-data" class="level2">
<h2 class="anchored" data-anchor-id="current-hospital-data">Current Hospital Data</h2>
<p>Here is the <code>current_hospital_data()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">current_hosp_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb2-2"></span>
<span id="cb2-3">  <span class="co" style="color: #5E5E5E;"># URL for file</span></span>
<span id="cb2-4">  url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"https://data.cms.gov/provider-data/sites/default/files/archive/Hospitals/current/hospitals_current_data.zip"</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">  <span class="co" style="color: #5E5E5E;"># Create a temporary directory to process the zip file</span></span>
<span id="cb2-7">  tmp_dir <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempdir</span>()</span>
<span id="cb2-8">  download_location <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(tmp_dir, <span class="st" style="color: #20794D;">"download.zip"</span>)</span>
<span id="cb2-9">  extract_location <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(tmp_dir, <span class="st" style="color: #20794D;">"extract"</span>)</span>
<span id="cb2-10"></span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;"># Download the zip file to the temporary location</span></span>
<span id="cb2-12">  utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">download.file</span>(</span>
<span id="cb2-13">    <span class="at" style="color: #657422;">url =</span> url,</span>
<span id="cb2-14">    <span class="at" style="color: #657422;">destfile =</span> download_location</span>
<span id="cb2-15">  )</span>
<span id="cb2-16"></span>
<span id="cb2-17">  <span class="co" style="color: #5E5E5E;"># Unzip the file</span></span>
<span id="cb2-18">  utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unzip</span>(download_location, <span class="at" style="color: #657422;">exdir =</span> extract_location)</span>
<span id="cb2-19"></span>
<span id="cb2-20">  <span class="co" style="color: #5E5E5E;"># Read the csv files into a list</span></span>
<span id="cb2-21">  csv_file_list <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(</span>
<span id="cb2-22">    <span class="at" style="color: #657422;">path =</span> extract_location,</span>
<span id="cb2-23">    <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.csv$"</span>,</span>
<span id="cb2-24">    <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb2-25">  )</span>
<span id="cb2-26"></span>
<span id="cb2-27">  <span class="co" style="color: #5E5E5E;"># make named list</span></span>
<span id="cb2-28">  csv_names <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb2-29">    stats<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">setNames</span>(</span>
<span id="cb2-30">      <span class="at" style="color: #657422;">object =</span> csv_file_list,</span>
<span id="cb2-31">      <span class="at" style="color: #657422;">nm =</span></span>
<span id="cb2-32">        csv_file_list <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-33">        <span class="fu" style="color: #4758AB;">basename</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-34">        <span class="fu" style="color: #4758AB;">gsub</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.csv$"</span>, <span class="at" style="color: #657422;">replacement =</span> <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-35">        janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">make_clean_names</span>()</span>
<span id="cb2-36">    )</span>
<span id="cb2-37"></span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># Process CSV Files</span></span>
<span id="cb2-39">  parse_csv_file <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(file) {</span>
<span id="cb2-40">    <span class="co" style="color: #5E5E5E;"># Normalize the path to use C:/path/to/file structure</span></span>
<span id="cb2-41">    <span class="fu" style="color: #4758AB;">normalizePath</span>(file, <span class="st" style="color: #20794D;">"/"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-42">      <span class="co" style="color: #5E5E5E;"># read in the csv file and use check.names = FALSE because some of</span></span>
<span id="cb2-43">      <span class="co" style="color: #5E5E5E;"># the names are very long</span></span>
<span id="cb2-44">      utils<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read.csv</span>(<span class="at" style="color: #657422;">check.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-45">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-46">      <span class="co" style="color: #5E5E5E;"># clean the field names</span></span>
<span id="cb2-47">      janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>()</span>
<span id="cb2-48">  }</span>
<span id="cb2-49"></span>
<span id="cb2-50">  list_of_tables <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lapply</span>(csv_names, parse_csv_file)</span>
<span id="cb2-51"></span>
<span id="cb2-52">  <span class="fu" style="color: #4758AB;">unlink</span>(tmp_dir, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-53"></span>
<span id="cb2-54">  <span class="co" style="color: #5E5E5E;"># Return the tibbles</span></span>
<span id="cb2-55">  <span class="co" style="color: #5E5E5E;"># Add and attribute and a class type to the object</span></span>
<span id="cb2-56">  <span class="fu" style="color: #4758AB;">attr</span>(list_of_tables, <span class="st" style="color: #20794D;">".list_type"</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"current_hosp_data"</span></span>
<span id="cb2-57">  <span class="fu" style="color: #4758AB;">class</span>(list_of_tables) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"current_hosp_data"</span>, <span class="fu" style="color: #4758AB;">class</span>(list_of_tables))</span>
<span id="cb2-58"></span>
<span id="cb2-59">  list_of_tables</span>
<span id="cb2-60">}</span></code></pre></div>
</div>
</section>
<section id="app-file" class="level2">
<h2 class="anchored" data-anchor-id="app-file">App File</h2>
<p>Next, let’s create a new file called <code>app.R</code>. In this file, we will create the Shiny app. The app will have a user interface (UI) and a server.</p>
<p>The UI is responsible for creating the layout of the app, while the server is responsible for processing the data and responding to user input.</p>
<p>First, let’s create the UI. The UI will consist of a drop-down menu that will allow users to choose which data they would like to see presented to them in the app.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(shiny)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">library</span>(shinythemes)</span>
<span id="cb3-3"></span>
<span id="cb3-4">hosp_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">current_hosp_data</span>()</span>
<span id="cb3-5"></span>
<span id="cb3-6">ui <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fluidPage</span>(<span class="at" style="color: #657422;">theme =</span> <span class="fu" style="color: #4758AB;">shinytheme</span>(<span class="st" style="color: #20794D;">"cerulean"</span>),</span>
<span id="cb3-7">                </span>
<span id="cb3-8">                <span class="co" style="color: #5E5E5E;"># Set up the dropdown menu</span></span>
<span id="cb3-9">                <span class="fu" style="color: #4758AB;">selectInput</span>(<span class="at" style="color: #657422;">inputId =</span> <span class="st" style="color: #20794D;">"table"</span>, </span>
<span id="cb3-10">                            <span class="at" style="color: #657422;">label =</span> <span class="st" style="color: #20794D;">"Select a table:"</span>, </span>
<span id="cb3-11">                            <span class="at" style="color: #657422;">choices =</span> <span class="fu" style="color: #4758AB;">names</span>(hosp_data), </span>
<span id="cb3-12">                            <span class="at" style="color: #657422;">selected =</span> <span class="cn" style="color: #8f5902;">NULL</span>),</span>
<span id="cb3-13">                </span>
<span id="cb3-14">                <span class="co" style="color: #5E5E5E;"># Set up the table output</span></span>
<span id="cb3-15">                <span class="fu" style="color: #4758AB;">tableOutput</span>(<span class="at" style="color: #657422;">outputId =</span> <span class="st" style="color: #20794D;">"table_output"</span>)</span>
<span id="cb3-16">)</span></code></pre></div>
</div>
<p>The <code>fluidPage()</code> function creates a new Shiny app page. We also specify the theme using the <code>{shinythemes}</code> package. The <code>selectInput()</code> function creates the drop-down menu, which allows users to select which data they would like to see presented to them in the app. The choices argument is set to the names of the tables in the <a href="https://www.spsanderson.com/healthyR.data/reference/current_hosp_data.html"><code>current_hosp_data()</code></a> object. The <code>tableOutput()</code> function creates the output for the selected table.</p>
</section>
<section id="server" class="level2">
<h2 class="anchored" data-anchor-id="server">Server</h2>
<p>Next, let’s create the server. The server will be responsible for processing the data and generating the output based on user input.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">server <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(input, output) {</span>
<span id="cb4-2">    </span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;"># Load the data into a reactive object</span></span>
<span id="cb4-4">    data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reactive</span>(hosp_data)</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;"># Set up the table output</span></span>
<span id="cb4-7">    output<span class="sc" style="color: #5E5E5E;">$</span>table_output <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">renderTable</span>({</span>
<span id="cb4-8">        <span class="co" style="color: #5E5E5E;"># Get the selected table</span></span>
<span id="cb4-9">        table_selected <span class="ot" style="color: #003B4F;">&lt;-</span> input<span class="sc" style="color: #5E5E5E;">$</span>table</span>
<span id="cb4-10">        </span>
<span id="cb4-11">        <span class="co" style="color: #5E5E5E;"># Get the table from the data object</span></span>
<span id="cb4-12">        table_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data</span>()[[table_selected]]</span>
<span id="cb4-13">        </span>
<span id="cb4-14">        <span class="co" style="color: #5E5E5E;"># Return the table data</span></span>
<span id="cb4-15">        table_data</span>
<span id="cb4-16">    })</span>
<span id="cb4-17">}</span></code></pre></div>
</div>
<p>The reactive() function is used to create a reactive object that will load the data when the app starts. The <code>renderTable()</code> function generates the output for the selected table. It does this by getting the selected table from the drop-down menu, getting the table data from the reactive data object, and returning the table data.</p>
</section>
<section id="shiny-app" class="level2">
<h2 class="anchored" data-anchor-id="shiny-app">Shiny App</h2>
<p>Finally, we need to run the appl using the <code>shinyApp()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">shinyApp</span>(<span class="at" style="color: #657422;">ui =</span> ui, <span class="at" style="color: #657422;">server =</span> server)</span></code></pre></div>
</div>
</section>
<section id="pros-and-cons" class="level2">
<h2 class="anchored" data-anchor-id="pros-and-cons">Pros and Cons</h2>
<p>Pros:</p>
<ul>
<li>The app is easy to use, and users can quickly select which data they would like to see presented to them in the app.</li>
<li>The <code>current_hosp_data()</code> function is only called once when the app starts, which can save time and resources if the function is time-consuming or resource-intensive.</li>
</ul>
<p>Cons:</p>
<ul>
<li>The app will not update if the data in the zip file changes. Users will need to restart the app to see the updated data.</li>
<li>The app loads all the data into memory when it starts, which can be an issue if the data is large and memory-intensive.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>shiny</category>
  <category>data</category>
  <category>healthcare</category>
  <category>cms</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-04-03/index.html</guid>
  <pubDate>Mon, 03 Apr 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>A Bootstrapped Time Series Model with auto.arima() from {forecast}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Time series analysis is a powerful tool for understanding and predicting patterns in data that vary over time. In this tutorial, we will use the AirPassengers dataset to create a bootstrapped timeseries model in R.</p>
<p>The AirPassengers dataset The AirPassengers dataset contains data on the number of passengers traveling on international flights per month from 1949 to 1960. To begin, we will load the dataset into R and plot it to get an idea of the data’s structure and any underlying patterns.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(forecast)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">data</span>(AirPassengers)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">plot</span>(AirPassengers, <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"International Airline Passengers 1949-1960"</span>)</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>From the plot, we can see that there is a clear upward trend in the data, as well as some seasonality.</p>
</section>
<section id="creating-a-bootstrapped-timeseries-model" class="level1">
<h1>Creating a bootstrapped timeseries model</h1>
<p>Now that we have an idea of the structure of the data, we can create a bootstrapped timeseries model using the <code>auto.arima()</code> function from the <code>{forecast}</code> package. The <code>auto.arima()</code> function uses an automated algorithm to determine the best model for a given timeseries.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb2-2">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(AirPassengers)</span>
<span id="cb2-3">n_boot <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;"># create bootstrap sample indices</span></span>
<span id="cb2-6">boot_indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">replicate</span>(n_boot, <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">TRUE</span>))</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;"># create list to store models</span></span>
<span id="cb2-9">models <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># create bootstrapped models</span></span>
<span id="cb2-12"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_boot) {</span>
<span id="cb2-13">  boot_data <span class="ot" style="color: #003B4F;">&lt;-</span> AirPassengers[boot_indices[, i]]</span>
<span id="cb2-14">  models[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">auto.arima</span>(boot_data)</span>
<span id="cb2-15">}</span>
<span id="cb2-16"></span>
<span id="cb2-17">models[[<span class="dv" style="color: #AD0000;">1</span>]]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Series: boot_data 
ARIMA(0,0,0) with non-zero mean 

Coefficients:
          mean
      275.5347
s.e.    9.5443

sigma^2 = 13209:  log likelihood = -887.01
AIC=1778.02   AICc=1778.1   BIC=1783.96</code></pre>
</div>
</div>
<p>In the code above, we first set a seed to ensure reproducibility of our results. We then specify the length of the timeseries and the number of bootstrap iterations we want to run. We create a list to store the models and a set of bootstrap sample indices.</p>
<p>We then loop through each bootstrap iteration, creating a new dataset from the original timeseries by sampling with replacement using the boot_indices. We use the <code>auto.arima()</code> function to create a timeseries model for each bootstrap sample and store it in our models list.</p>
</section>
<section id="summarizing-and-plotting-residuals" class="level1">
<h1>Summarizing and plotting residuals</h1>
<p>Now that we have created our bootstrapped timeseries models, we can summarize and plot the residuals of each model to get an idea of how well our models fit the data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># create list to store residuals</span></span>
<span id="cb4-2">residuals <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>()</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;"># create residuals for each model</span></span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_boot) {</span>
<span id="cb4-6">  boot_data <span class="ot" style="color: #003B4F;">&lt;-</span> AirPassengers[boot_indices[, i]]</span>
<span id="cb4-7">  residuals[[i]] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">residuals</span>(models[[i]])</span>
<span id="cb4-8">}</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;"># summarize residuals</span></span>
<span id="cb4-11">residual_means <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(residuals, mean)</span>
<span id="cb4-12">residual_sd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sapply</span>(residuals, sd)</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;"># plot residuals</span></span>
<span id="cb4-15"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="fu" style="color: #4758AB;">hist</span>(</span>
<span id="cb4-18">  residual_means, </span>
<span id="cb4-19">  <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">"Bootstrapped Model Residuals"</span>, </span>
<span id="cb4-20">  <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"Mean Residuals"</span></span>
<span id="cb4-21">  )</span>
<span id="cb4-22"><span class="fu" style="color: #4758AB;">hist</span>(</span>
<span id="cb4-23">  residual_sd, </span>
<span id="cb4-24">  <span class="at" style="color: #657422;">col =</span> <span class="st" style="color: #20794D;">"red"</span>, </span>
<span id="cb4-25">  <span class="at" style="color: #657422;">main =</span> <span class="st" style="color: #20794D;">""</span>, </span>
<span id="cb4-26">  <span class="at" style="color: #657422;">xlab =</span> <span class="st" style="color: #20794D;">"SD Residuals"</span></span>
<span id="cb4-27">  )</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index_files/figure-html/unnamed-chunk-3-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">par</span>(<span class="at" style="color: #657422;">mfrow =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">1</span>))</span></code></pre></div>
</div>
<p>In the code above, we create a list to store the residuals for each model, loop through each model to create residuals using the residuals() function, and summarize the residuals by taking the mean and standard deviation of each set of residuals.</p>
<p>We then plot the mean residuals and standard deviations for each model using the plot() function and add a legend to indicate the meaning of the two lines.</p>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>timeseries</category>
  <category>bootstrap</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-29/index.html</guid>
  <pubDate>Wed, 29 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast does a compressed file in Part 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-28/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I posted on performing a benchmark on reading in a compressed <code>.csv.gz</code> file of a 2,000 by 2,000 <code>data.frame</code>. It was brought to my attention by someone on Mastadon (<span class="citation" data-cites="mariviere">@mariviere</span><span class="citation" data-cites="fediscience.org">@fediscience.org</span> - <a href="https://fediscience.org/@mariviere" class="uri">https://fediscience.org/@mariviere</a>) that I should also use <code>{duckdb}</code> and <code>{arrow}</code> so I will perform the same analysis as yesterday but I will also add in the two aforementioned packages.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The functions that we will be using this time around are as follows:</p>
<ul>
<li><code>fread()</code> - data.table</li>
<li><code>duckdb_read_csv()</code> - duckdb</li>
<li><code>read_csv()</code> - readr</li>
<li><code>read.csv()</code> - base</li>
<li><code>read.table()</code> - base</li>
<li><code>vroom()</code> with altrep = <code>FALSE</code> - vroom</li>
<li><code>vroom()</code> with altrep = <code>TRUE</code> - vroom</li>
<li><code>oprn_csv_dataset()</code> - arrow</li>
</ul>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<section id="make-the-data" class="level2">
<h2 class="anchored" data-anchor-id="make-the-data">Make the Data</h2>
<p>Let’s make that dataset again:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(R.utils)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># create a 1000 x 1000 matrix of random numbers</span></span>
<span id="cb1-4">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">2000000</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2000</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2000</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Make and save gzipped file</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">write.csv</span>(df, <span class="st" style="color: #20794D;">"df.csv"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">gzip</span>(</span>
<span id="cb1-10">  <span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"df.csv"</span>, </span>
<span id="cb1-11">  <span class="at" style="color: #657422;">destname =</span> <span class="st" style="color: #20794D;">"df.csv.gz"</span>,</span>
<span id="cb1-12">  <span class="at" style="color: #657422;">overwrite =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, </span>
<span id="cb1-13">  <span class="at" style="color: #657422;">remove =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb1-14">)</span></code></pre></div>
</div>
</section>
<section id="benchmarking" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking">Benchmarking</h2>
<p>Time to benchmark</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(duckdb)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;">library</span>(DBI)</span>
<span id="cb2-9"></span>
<span id="cb2-10">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;"># Base R</span></span>
<span id="cb2-14">  <span class="st" style="color: #20794D;">"read.table"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-15">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(</span>
<span id="cb2-16">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-17">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-18">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-19">    )</span>
<span id="cb2-20">  },</span>
<span id="cb2-21">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-22">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(</span>
<span id="cb2-23">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-24">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-25">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-26">    )</span>
<span id="cb2-27">  },</span>
<span id="cb2-28">  </span>
<span id="cb2-29">  <span class="co" style="color: #5E5E5E;"># data.table</span></span>
<span id="cb2-30">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-31">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(</span>
<span id="cb2-32">      <span class="st" style="color: #20794D;">"df.csv.gz"</span>, </span>
<span id="cb2-33">      <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>, </span>
<span id="cb2-34">      <span class="at" style="color: #657422;">colClasses =</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">numeric =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2000</span>)</span>
<span id="cb2-35">    )</span>
<span id="cb2-36">  },</span>
<span id="cb2-37">  </span>
<span id="cb2-38">  <span class="co" style="color: #5E5E5E;"># vroom</span></span>
<span id="cb2-39">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-40">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-41">  },</span>
<span id="cb2-42">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-43">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-44">  },</span>
<span id="cb2-45">  </span>
<span id="cb2-46">  <span class="co" style="color: #5E5E5E;"># readr</span></span>
<span id="cb2-47">  <span class="st" style="color: #20794D;">"readr"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-48">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>, <span class="at" style="color: #657422;">col_types =</span> <span class="st" style="color: #20794D;">"d"</span>)</span>
<span id="cb2-49">  },</span>
<span id="cb2-50">  </span>
<span id="cb2-51">  <span class="co" style="color: #5E5E5E;"># Arrow</span></span>
<span id="cb2-52">  <span class="st" style="color: #20794D;">"arrow"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-53">    g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">open_csv_dataset</span>(<span class="st" style="color: #20794D;">"df.csv.gz"</span>)</span>
<span id="cb2-54">  },</span>
<span id="cb2-55">  </span>
<span id="cb2-56">  <span class="co" style="color: #5E5E5E;"># DuckDB</span></span>
<span id="cb2-57">  <span class="st" style="color: #20794D;">"duckdb"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-58">    con <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dbConnect</span>(<span class="fu" style="color: #4758AB;">duckdb</span>())</span>
<span id="cb2-59">    h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">duckdb_read_csv</span>(</span>
<span id="cb2-60">      <span class="at" style="color: #657422;">conn =</span> con,</span>
<span id="cb2-61">      <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">"df"</span>,</span>
<span id="cb2-62">      <span class="at" style="color: #657422;">files =</span> <span class="st" style="color: #20794D;">"C:</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Users</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">ssanders</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">Documents</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">GitHub</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">steveondata</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">posts</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">rtip-2023-03-28</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">df.csv.gz"</span></span>
<span id="cb2-63">    )</span>
<span id="cb2-64">    <span class="fu" style="color: #4758AB;">dbDisconnect</span>(con)</span>
<span id="cb2-65">  },</span>
<span id="cb2-66">  </span>
<span id="cb2-67">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb2-68">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb2-69">  </span>
<span id="cb2-70">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb2-71">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-72">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb2-73">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-74">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               arrow           30    3.01    1.000      5.04     0.25
2               fread           30   28.28    9.395     19.56     4.30
3 vroom alltrep false           30   31.89   10.595     26.25    10.75
4  vroom alltrep true           30   33.72   11.203     25.75    10.67
5              duckdb           30   94.09   31.259     90.70     2.77
6               readr           30   98.28   32.651    113.05    45.12
7          read.table           30  109.97   36.535    107.78     1.24
8            read.csv           30  153.79   51.093    152.44     0.56</code></pre>
</div>
</div>
<p>Important note is the session info on the pc I am using to write this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">sessionInfo</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>R version 4.2.3 (2023-03-15 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 19045)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8 
[2] LC_CTYPE=English_United States.utf8   
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.utf8    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] dplyr_1.1.1       vroom_1.6.1       arrow_11.0.0.3    duckdb_0.7.1-1   
 [5] DBI_1.1.3         readr_2.1.4       data.table_1.14.8 rbenchmark_1.0.0 
 [9] R.utils_2.12.2    R.oo_1.25.0       R.methodsS3_1.8.2

loaded via a namespace (and not attached):
 [1] pillar_1.9.0      compiler_4.2.3    tools_4.2.3       digest_0.6.31    
 [5] bit_4.0.5         jsonlite_1.8.4    evaluate_0.20     lifecycle_1.0.3  
 [9] tibble_3.2.1      pkgconfig_2.0.3   rlang_1.1.0       cli_3.6.1        
[13] rstudioapi_0.14   parallel_4.2.3    yaml_2.3.7        xfun_0.38        
[17] fastmap_1.1.1     knitr_1.42        generics_0.1.3    vctrs_0.6.1      
[21] htmlwidgets_1.6.2 hms_1.1.3         bit64_4.0.5       tidyselect_1.2.0 
[25] glue_1.6.2        R6_2.5.1          fansi_1.0.4       rmarkdown_2.21   
[29] tzdb_0.3.0        purrr_1.0.1       magrittr_2.0.3    htmltools_0.5.5  
[33] assertthat_0.2.1  utf8_1.2.3        crayon_1.5.2     </code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"> <span class="fu" style="color: #4758AB;">Sys.info</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-2">   <span class="fu" style="color: #4758AB;">as.data.frame</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-3">   tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rownames_to_column</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-4">   <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-5">   <span class="fu" style="color: #4758AB;">slice</span>(<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">2</span>,<span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 4 × 2
  rowname `Sys.info()`
  &lt;chr&gt;   &lt;chr&gt;       
1 sysname Windows     
2 release 10 x64      
3 version build 19045 
4 machine x86-64      </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"> <span class="fu" style="color: #4758AB;">memory.profile</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb8-2">   <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            memory.profile()
NULL                       1
symbol                 24303
pairlist              642504
closure                11189
environment             4009
promise                22963
language              189766
special                   47
builtin                  701
char                 2039073
logical                18866
integer               108132
double                 20060
complex                    5
character             160381
...                       21
any                        0
list                   58500
expression                 5
bytecode               41555
externalptr            12382
weakref                13860
raw                    10113
S4                      1362</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"> <span class="fu" style="color: #4758AB;">gc</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>           used  (Mb) gc trigger  (Mb) max used  (Mb)
Ncells  3363479 179.7    5830931 311.5  5830931 311.5
Vcells 32950395 251.4   81254422 620.0 81254324 620.0</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <category>arrow</category>
  <category>duckdb</category>
  <category>datatable</category>
  <category>readr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-28/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast does a compressed file in?</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-27/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I received an email over the weekend in regards to my last post not containing the reading in of <code>gz</code> compressed file(s) for the benchmarking. While this was not an over site per-se it was a good reminder that people would probably be interested in seeing this as well.</p>
<p>Benchmarking is the process of measuring and comparing the performance of different programs, tools, or configurations in order to identify which one is the most efficient for a specific task. It is a critical step in software development that can help developers identify performance bottlenecks and improve the overall performance of their applications.</p>
<p>In this post I create a square matrix and then convert it to a data.frame (2,000 rows by 2,000 columns) and then saved it as a gz compressed csv file. The benchmark compares different R packages and functions, including base <code>R</code>, <code>data.table</code>, <code>vroom</code>, and <code>readr</code>, and measures their relative speeds based on the time it takes to read in the <code>.csv.gz</code> file.</p>
<p>Here are some pro’s of trying things different ways and properly benchmarking them:</p>
<ul>
<li><p>Identify the most efficient solution: Benchmarking can help you identify the most efficient solution for a specific task. By measuring the relative speeds of different programs or tools, you can determine which one is the fastest and use it to improve the performance of your application.</p></li>
<li><p>Optimize resource utilization: Benchmarking can help you optimize resource utilization by identifying programs or tools that consume more resources than others. By choosing the most resource-efficient solution, you can reduce the cost of running your application and improve its scalability.</p></li>
<li><p>Avoid premature optimization: Benchmarking can help you avoid premature optimization by measuring the performance of different programs or tools before you start optimizing them. By identifying the slowest parts of your application, you can focus your optimization efforts on the most critical areas and avoid wasting time optimizing code that doesn’t need it.</p></li>
<li><p>Keep up with technology: Benchmarking can help you keep up with technology by comparing the performance of different tools and libraries. By staying up to date with the latest technologies, you can improve the performance of your application and stay ahead of your competitors.</p></li>
<li><p>Improve code quality: Benchmarking can help you improve the quality of your code by identifying performance bottlenecks and areas for optimization. By optimizing your code, you can improve its maintainability, reliability, and readability.</p></li>
</ul>
<p>In conclusion, benchmarking is an essential tool for software developers that can help them identify the most efficient solutions for their applications. By measuring the relative speeds of different programs or tools, developers can optimize resource utilization, avoid premature optimization, keep up with technology, and improve the quality of their code.</p>
</section>
<section id="function" class="level1">
<h1>Function</h1>
<p>The different functions I use in the benchmarking are as follows:</p>
<section id="base-r" class="level2">
<h2 class="anchored" data-anchor-id="base-r">Base R</h2>
<ul>
<li><code>read.csv()</code></li>
<li><code>read.table()</code></li>
</ul>
</section>
<section id="data.table" class="level2">
<h2 class="anchored" data-anchor-id="data.table">data.table</h2>
<ul>
<li><code>fread</code></li>
</ul>
</section>
<section id="vroom" class="level2">
<h2 class="anchored" data-anchor-id="vroom">vroom</h2>
<ul>
<li><code>vroom()</code> with altrep = FALSE</li>
<li><code>vroom()</code> with altrep = TRUE</li>
</ul>
</section>
<section id="readr" class="level2">
<h2 class="anchored" data-anchor-id="readr">readr</h2>
<ul>
<li><code>read_csv()</code></li>
</ul>
</section>
</section>
<section id="example" class="level1">
<h1>Example</h1>
<p>Let’s make a 2,000 by 2,000 matrix, covert to a <code>data.frame</code> and then save it out as a <code>.csv</code> file and then convert to a <code>.gz</code> file.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(R.utils)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># create a 1000 x 1000 matrix of random numbers</span></span>
<span id="cb1-4">my_matrix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">2000000</span>), <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2000</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">2000</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Make and save gzipped file</span></span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">write.csv</span>(my_matrix, <span class="st" style="color: #20794D;">"my_matrix.csv"</span>)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">gzip</span>(<span class="at" style="color: #657422;">filename =</span> <span class="st" style="color: #20794D;">"my_matrix.csv"</span>, <span class="at" style="color: #657422;">destname =</span> <span class="st" style="color: #20794D;">"matrix.csv.gz"</span>,</span>
<span id="cb1-10">     <span class="at" style="color: #657422;">overwrite =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, <span class="at" style="color: #657422;">remove =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
<p>Ok now that the data is written we can benchmark the read in times from various packages.</p>
<section id="benchmarking" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking">Benchmarking</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb2-6"></span>
<span id="cb2-7">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb2-10">  <span class="co" style="color: #5E5E5E;"># Base R</span></span>
<span id="cb2-11">  <span class="st" style="color: #20794D;">"read.table"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-12">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.table</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-13">  },</span>
<span id="cb2-14">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-15">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-16">  },</span>
<span id="cb2-17">  </span>
<span id="cb2-18">  <span class="co" style="color: #5E5E5E;"># data.table</span></span>
<span id="cb2-19">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-20">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-21">  },</span>
<span id="cb2-22">  </span>
<span id="cb2-23">  <span class="co" style="color: #5E5E5E;"># vroom</span></span>
<span id="cb2-24">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-25">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>)</span>
<span id="cb2-26">  },</span>
<span id="cb2-27">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-28">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>, <span class="at" style="color: #657422;">delim =</span> <span class="st" style="color: #20794D;">","</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb2-29">  },</span>
<span id="cb2-30">  </span>
<span id="cb2-31">  <span class="co" style="color: #5E5E5E;"># readr</span></span>
<span id="cb2-32">  <span class="st" style="color: #20794D;">"readr"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb2-33">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"matrix.csv.gz"</span>)</span>
<span id="cb2-34">  },</span>
<span id="cb2-35">  </span>
<span id="cb2-36">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb2-37">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb2-38">  </span>
<span id="cb2-39">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb2-40">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb2-41">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb2-42">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb2-43">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               fread           30   19.44    1.000     13.56     1.59
2  vroom alltrep true           30   22.06    1.135     10.54     2.63
3 vroom alltrep false           30   24.75    1.273     10.22     2.84
4          read.table           30   94.34    4.853     79.02     0.64
5            read.csv           30  143.28    7.370    115.64     0.74
6               readr           30  177.61    9.136     50.37    10.05</code></pre>
</div>
</div>
<p>Voila!</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-27/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>How fast do the files read in?</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I will demonstrate how to generate a 1,000 row and column matrix with random numbers in R, and then save it in different file formats. I will also show how to get the file size of each saved object and benchmark how long it takes to read in each file using different functions.</p>
<section id="generating-a-large-matrix" class="level2">
<h2 class="anchored" data-anchor-id="generating-a-large-matrix">Generating a large matrix</h2>
<p>To generate a 1,000 row and column matrix with random numbers, we can use the matrix() function and the runif() function in R. Here’s the code to generate the matrix:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># set seed for reproducibility</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># number of rows/columns in matrix</span></span>
<span id="cb1-5">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1000</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># generate matrix with random normal values</span></span>
<span id="cb1-8">mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">runif</span>(n<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>), <span class="at" style="color: #657422;">nrow =</span> n) </span></code></pre></div>
</div>
<p>This code sets the random number generator seed to ensure that the same random numbers are generated every time the code is run. It then generates a vector of 1,000^2 random numbers using the runif() function, and creates a matrix with 1,000 columns using the matrix() function.</p>
</section>
<section id="saving-the-matrix-in-different-file-formats" class="level2">
<h2 class="anchored" data-anchor-id="saving-the-matrix-in-different-file-formats">Saving the matrix in different file formats</h2>
<p>We can save the generated matrix in different file formats using different functions in R. Here are the functions we will use for each file format:</p>
<ul>
<li>CSV: write.csv()</li>
<li>RDS: saveRDS()</li>
<li>FST: write_fst()</li>
<li>Arrow: write_feather()</li>
</ul>
<p>Here’s the code to save the matrix in each file format:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(fst)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">library</span>(arrow)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Save matrix in different file formats</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;">write.csv</span>(mat, <span class="st" style="color: #20794D;">"matrix.csv"</span>, <span class="at" style="color: #657422;">row.names=</span><span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">saveRDS</span>(mat, <span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;">write_fst</span>(<span class="fu" style="color: #4758AB;">as.data.frame</span>(mat), <span class="st" style="color: #20794D;">"matrix.fst"</span>)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;">write_feather</span>(<span class="fu" style="color: #4758AB;">as_arrow_table</span>(<span class="fu" style="color: #4758AB;">as.data.frame</span>(mat)), <span class="st" style="color: #20794D;">"matrix.arrow"</span>)</span></code></pre></div>
</div>
<p>This code saves the matrix in each file format using the corresponding function, with the file name specified as the second argument. Getting the file size of each saved object</p>
<p>To get the file size of each saved object, we can use the file.size() function in R. Here’s the code to get the file size of each saved object:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Get file size of each saved object</span></span>
<span id="cb3-2">csv_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)  <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-3">rds_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-4">fst_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.fst"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-5">arrow_size <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.size</span>(<span class="st" style="color: #20794D;">"matrix.arrow"</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># Print file size in human-readable format</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"CSV file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(csv_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "CSV file size in MB: 17.17339"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"RDS file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(rds_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "RDS file size in MB: 5.079627"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"FST file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(fst_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "FST file size in MB: 7.700841"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">print</span>(<span class="fu" style="color: #4758AB;">paste</span>(<span class="st" style="color: #20794D;">"Arrow file size in MB:"</span>, <span class="fu" style="color: #4758AB;">format</span>(arrow_size, <span class="at" style="color: #657422;">units=</span><span class="st" style="color: #20794D;">"auto"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Arrow file size in MB: 6.705355"</code></pre>
</div>
</div>
<p>This code uses the file.size() function to get the file size of each object, and stores the file size of each object in a separate variable.</p>
<p>Finally, it prints the file size of each object in a human-readable format using the format() function with the units=“auto” argument. The units=“auto” argument automatically chooses the most appropriate unit (e.g., KB, MB, GB) based on the file size.</p>
</section>
<section id="benchmarking-file-read-times" class="level2">
<h2 class="anchored" data-anchor-id="benchmarking-file-read-times">Benchmarking file read times</h2>
<p>To benchmark how long it takes to read in each file, we can use the <code>{rbenchmark}</code> package in R. In this example, we will compare the read times for the CSV file using four different functions: <code>read.csv()</code>, <code>read_csv()</code> from the <code>{readr}</code> package, <code>fread()</code> from the <code>{data.table}</code> package, and <code>vroom()</code> from the <code>{vroom}</code> package. We will also benchmark the read times for the RDS file using <code>readRDS()</code>, the FST file using <code>read_fst()</code>, and the Arrow file using <code>read_feather()</code>.</p>
<p>Here’s the code to benchmark the read times:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># Load rbenchmark package</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;">library</span>(data.table)</span>
<span id="cb11-5"><span class="fu" style="color: #4758AB;">library</span>(vroom)</span>
<span id="cb11-6"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb11-7"></span>
<span id="cb11-8">n <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;"># Benchmark read times for CSV file</span></span>
<span id="cb11-11"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb11-12">  <span class="co" style="color: #5E5E5E;"># CSV File</span></span>
<span id="cb11-13">  <span class="st" style="color: #20794D;">"read.csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-14">    a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read.csv</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-15">  },</span>
<span id="cb11-16">  <span class="st" style="color: #20794D;">"read_csv"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-17">    b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_csv</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-18">  },</span>
<span id="cb11-19">  <span class="st" style="color: #20794D;">"fread"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-20">    c <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fread</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-21">  },</span>
<span id="cb11-22">  <span class="st" style="color: #20794D;">"vroom alltrep false"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-23">    d <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>)</span>
<span id="cb11-24">  },</span>
<span id="cb11-25">  <span class="st" style="color: #20794D;">"vroom alltrep true"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb11-26">    dd <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">vroom</span>(<span class="st" style="color: #20794D;">"matrix.csv"</span>, <span class="at" style="color: #657422;">altrep =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb11-27">  },</span>
<span id="cb11-28">  </span>
<span id="cb11-29">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb11-30">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb11-31">  </span>
<span id="cb11-32">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb11-33">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb11-34">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb11-35">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb11-36">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                 test replications elapsed relative user.self sys.self
1               fread           30    1.35    1.000      0.90     0.20
2  vroom alltrep true           30    6.59    4.881      3.58     1.71
3 vroom alltrep false           30    6.62    4.904      3.43     1.62
4            read.csv           30   33.86   25.081     26.15     0.22
5            read_csv           30   82.39   61.030     20.39     3.47</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># RDS File</span></span>
<span id="cb13-2"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb13-3">  <span class="co" style="color: #5E5E5E;"># RDS File</span></span>
<span id="cb13-4">  <span class="st" style="color: #20794D;">"readRDS"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb13-5">    e <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb13-6">  },</span>
<span id="cb13-7">  <span class="st" style="color: #20794D;">"read_rds"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb13-8">    f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_rds</span>(<span class="st" style="color: #20794D;">"matrix.rds"</span>)</span>
<span id="cb13-9">  },</span>
<span id="cb13-10">  </span>
<span id="cb13-11">  <span class="co" style="color: #5E5E5E;"># Repications</span></span>
<span id="cb13-12">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb13-13">  </span>
<span id="cb13-14">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb13-15">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb13-16">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb13-17">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb13-18">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      test replications elapsed relative user.self sys.self
1 read_rds           30    0.95    1.000      0.74     0.01
2  readRDS           30    0.97    1.021      0.74     0.02</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># FST / Arrow</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb15-3">  <span class="co" style="color: #5E5E5E;"># FST</span></span>
<span id="cb15-4">  <span class="st" style="color: #20794D;">"read_fst"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb15-5">    g <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_fst</span>(<span class="st" style="color: #20794D;">"matrix.fst"</span>)</span>
<span id="cb15-6">  },</span>
<span id="cb15-7">  </span>
<span id="cb15-8">  <span class="co" style="color: #5E5E5E;"># Arrow</span></span>
<span id="cb15-9">  <span class="st" style="color: #20794D;">"arrow"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb15-10">    h <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">read_feather</span>(<span class="st" style="color: #20794D;">"matrix.arrow"</span>)</span>
<span id="cb15-11">  },</span>
<span id="cb15-12">  </span>
<span id="cb15-13">  <span class="co" style="color: #5E5E5E;"># Replications</span></span>
<span id="cb15-14">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb15-15">  </span>
<span id="cb15-16">  <span class="co" style="color: #5E5E5E;"># Columns</span></span>
<span id="cb15-17">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb15-18">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb15-19">) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb15-20">  <span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      test replications elapsed relative user.self sys.self
1 read_fst           30    0.21    1.000      0.05     0.12
2    arrow           30    3.00   14.286      1.60     0.11</code></pre>
</div>
</div>
<p>This code loads the <code>{rbenchmark}</code> package, and uses the <code>benchmark()</code> function to compare the read times for each file format. We specify the function to use for each file format, and set the number of replications to 10. Conclusion</p>
<p>In this blog post, we demonstrated how to generate a large matrix with random numbers in R, and how to save it in different file formats. We also showed how to get the file size of each saved object, and benchmarked the read times for each file format using different functions.</p>
<p>This example demonstrates the importance of choosing the appropriate file format and read function for your data. Depending on the size of your data and the requirements of your analysis, some file formats and functions may be more efficient than others.</p>


</section>
</section>

 ]]></description>
  <category>rtip</category>
  <category>benchmark</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-03-24/index.html</guid>
  <pubDate>Fri, 24 Mar 2023 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
