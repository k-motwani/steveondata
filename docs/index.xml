<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Steve&#39;s Data Tips and Tricks</title>
<link>https://www.spsanderson.com/steveondata/index.html</link>
<atom:link href="https://www.spsanderson.com/steveondata/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.475</generator>
<lastBuildDate>Wed, 14 Jun 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Pulling a formula from a recipe object</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-14/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <code>formula()</code> function in R is a generic function that is used to create and manipulate formulas. Formulas are used to specify the relationship between variables in statistical models. The basic syntax for a formula is:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">response <span class="sc" style="color: #5E5E5E;">~</span> predictors</span></code></pre></div>
<p>The response is the variable that you are trying to predict, and the predictors are the variables that you are using to predict the response. You can use multiple predictors by separating them with + signs. For example, the following formula predicts the mpg (miles per gallon) of a car based on the wt (weight) and hp (horsepower) of the car:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mpg <span class="sc" style="color: #5E5E5E;">~</span> wt <span class="sc" style="color: #5E5E5E;">+</span> hp</span></code></pre></div>
<p>The <code>formula()</code> function can be used to create formulas from scratch, or it can be used to extract formulas from existing objects. For example, the following code creates a formula object called <code>my_formula</code> that predicts the mpg of a car based on the wt and hp of the car:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">my_formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">formula</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> wt <span class="sc" style="color: #5E5E5E;">+</span> hp)</span>
<span id="cb3-2">my_formula</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mpg ~ wt + hp</code></pre>
</div>
</div>
<p>The <code>formula()</code> function can also be used to manipulate formulas. For example, the following code adds a new predictor called drat (drive ratio) to the my_formula formula:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">my_formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">update</span>(my_formula, mpg <span class="sc" style="color: #5E5E5E;">~</span> wt <span class="sc" style="color: #5E5E5E;">+</span> hp <span class="sc" style="color: #5E5E5E;">+</span> drat)</span>
<span id="cb5-2">my_formula</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mpg ~ wt + hp + drat</code></pre>
</div>
</div>
<p>The <code>formula()</code> function is a powerful tool that can be used to create, manipulate, and analyze formulas in R.</p>
<p>Here are some additional things to know about the <code>formula()</code> function:</p>
<ul>
<li>Formulas are objects in R, and they have a number of methods that can be used to manipulate them. For example, you can use the summary() method to get a summary of a formula, or you can use the plot() method to plot a formula.</li>
<li>Formulas can be used with a variety of statistical functions in R. For example, you can use the lm() function to fit a linear model to a formula, or you can use the glm() function to fit a generalized linear model to a formula.</li>
<li>Formulas are a powerful tool for statistical analysis, and they can be used to solve a wide variety of problems. If you are working with data in R, it is important to understand how to use formulas.</li>
</ul>
<p>Now that we have a decent understanding of the function, I want to shift focus a little bit and show how we can use the generics function <code>formula()</code> in order to extract a formula from a recipe object.</p>
<p>Here is the full code that we are going to look at:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb7-2"></span>
<span id="cb7-3">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;">summary</span>(rec_obj)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 11 × 4
   variable type      role      source  
   &lt;chr&gt;    &lt;list&gt;    &lt;chr&gt;     &lt;chr&gt;   
 1 cyl      &lt;chr [2]&gt; predictor original
 2 disp     &lt;chr [2]&gt; predictor original
 3 hp       &lt;chr [2]&gt; predictor original
 4 drat     &lt;chr [2]&gt; predictor original
 5 wt       &lt;chr [2]&gt; predictor original
 6 qsec     &lt;chr [2]&gt; predictor original
 7 vs       &lt;chr [2]&gt; predictor original
 8 am       &lt;chr [2]&gt; predictor original
 9 gear     &lt;chr [2]&gt; predictor original
10 carb     &lt;chr [2]&gt; predictor original
11 mpg      &lt;chr [2]&gt; outcome   original</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;"># Get formula</span></span>
<span id="cb9-2">rec_obj <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">formula</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mpg ~ cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb
&lt;environment: 0x0000013e3255d2f0&gt;</code></pre>
</div>
</div>
<p>Let’s break down each line and understand what it does:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span></code></pre></div>
<p>The first line imports the <code>recipes</code> package, which is a powerful tool for preparing and preprocessing data in a structured and reproducible manner.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(mpg <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> mtcars)</span></code></pre></div>
<p>Here, we create a <code>recipe</code> object named <code>rec_obj</code>. This object represents a set of instructions for data transformation. In this case, we specify the formula <code>mpg ~ .</code>, which means we want to predict the miles per gallon (<code>mpg</code>) using all other variables in the <code>mtcars</code> dataset.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">rec_obj <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">formula</span>()</span></code></pre></div>
<p>The next line leverages the magrittr pipe operator (<code>|&gt;</code>) to chain multiple operations. Let’s break it down:</p>
<ul>
<li><code>rec_obj</code> is passed to the <code>prep()</code> function. This function performs data preparation steps specified in the recipe object, such as handling missing values, feature scaling, or encoding categorical variables.</li>
<li>The output of <code>prep()</code> is then piped to the <code>formula()</code> function, which extracts the formula representation from the preprocessed recipe object. The resulting formula can be used in subsequent modeling steps.</li>
</ul>
<p>That’s it! With just a few lines of code, we have defined a recipe, prepared the data accordingly, and obtained the formula representation for further modeling.</p>
<p>Now, let’s dive into a couple more examples to showcase the versatility of the <code>recipes</code> package:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(Species <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> iris) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>())</span>
<span id="cb14-3"></span>
<span id="cb14-4">rec_obj <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">formula</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
&lt;environment: 0x0000013e2e8346f0&gt;</code></pre>
</div>
</div>
<p>In this example, we create a recipe to predict the species (<code>Species</code>) using all other variables in the <code>iris</code> dataset. We then use the <code>step_normalize()</code> function to standardize all predictor variables in the recipe. This step ensures that variables are on a similar scale, which can be beneficial for certain machine learning algorithms.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">rec_obj <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(SalePrice <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> train_data) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb16-2">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>())</span></code></pre></div>
<p>Here, we define a recipe to predict the sale price (<code>SalePrice</code>) using all other variables in the <code>train_data</code> dataset. The <code>step_dummy()</code> function is used to convert all nominal variables in the recipe into dummy variables. The <code>all_nominal()</code> argument specifies that all variables should be considered, while the <code>-all_outcomes()</code> argument ensures that the outcome variable (<code>SalePrice</code>) is not transformed.</p>
<p>These examples provide a glimpse into the power and flexibility of the <code>recipes</code> package for data preprocessing in R. It enables you to define a clear and reproducible data transformation pipeline that can greatly simplify your machine learning workflows.</p>
<p>Happy coding! 🚀</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>recipes</category>
  <category>tidymodels</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-14/index.html</guid>
  <pubDate>Wed, 14 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Model Formulas with the R Function ‘reformulate()’</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-13/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a programmer, you may come across various scenarios where you need to create complex model formulas in R. However, constructing these formulas can often be challenging and time-consuming. This is where the ‘reformulate()’ function comes to the rescue! In this blog post, we will explore the purpose and usage of the <code>reformulate()</code> function in R, and provide you with simple examples to help you grasp its power.</p>
</section>
<section id="what-is-reformulate" class="level1">
<h1>What is ‘reformulate()’?</h1>
<p>The <code>reformulate()</code> function is a handy tool in R that simplifies the creation of model formulas. It allows you to construct formulas by specifying the response variable and predictor variables using a character vector or formula-like syntax. The function then generates a formula object that can be used in various modeling functions within R.</p>
<p>Usage and Syntax: The syntax of the ‘reformulate()’ function is as follows:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">reformulate</span>(response, ...)</span></code></pre></div>
<p>Here, ‘response’ represents the response variable, and ‘…’ denotes one or more predictor variables. The predictor variables can be specified as separate arguments or as a character vector.</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-linear-regression" class="level2">
<h2 class="anchored" data-anchor-id="example-1-linear-regression">Example 1: Linear Regression</h2>
<p>Let’s say we want to use the mtcars dataset containing information about cars, including their hp and number of cylinders. We want to perform a linear regression to predict the mpg of the car based upon hp and cyl. Here’s how we can use ‘reformulate()’ for this purpose:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(stats)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Creating a formula using reformulate()</span></span>
<span id="cb2-4">formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reformulate</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"hp"</span>, <span class="st" style="color: #20794D;">"cyl"</span>), <span class="at" style="color: #657422;">response =</span> <span class="st" style="color: #20794D;">"mpg"</span>)</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;"># Fitting a linear regression model</span></span>
<span id="cb2-7">model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(formula, <span class="at" style="color: #657422;">data =</span> mtcars)</span>
<span id="cb2-8"></span>
<span id="cb2-9">formula</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>mpg ~ hp + cyl</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = formula, data = mtcars)

Coefficients:
(Intercept)           hp          cyl  
   36.90833     -0.01912     -2.26469  </code></pre>
</div>
</div>
<p>In this example, the ‘reformulate()’ function creates a formula object that specifies the relationship between the response variable “mpg” and the predictor variables “hp” and “cyl”. This formula is then passed to the ‘lm()’ function for fitting a linear regression model.</p>
</section>
<section id="example-2-logistic-regression" class="level2">
<h2 class="anchored" data-anchor-id="example-2-logistic-regression">Example 2: Logistic Regression</h2>
<p>Consider a scenario where we use the mtcars dataset. We use the mpg, hp, and disp variables, and whether the car is an automatic or manual. We want to perform a logistic regression to predict the probability of passing based on the mpg, hp, and disp. Here’s how ‘reformulate()’ can help us:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(stats)</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;"># Creating a formula using reformulate()</span></span>
<span id="cb6-4">formula <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">reformulate</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"mpg"</span>, <span class="st" style="color: #20794D;">"hp"</span>, <span class="st" style="color: #20794D;">"disp"</span>), <span class="at" style="color: #657422;">response =</span> <span class="st" style="color: #20794D;">"am"</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;"># Fitting a logistic regression model</span></span>
<span id="cb6-7">model <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">glm</span>(formula, <span class="at" style="color: #657422;">data =</span> mtcars, <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">"binomial"</span>)</span>
<span id="cb6-8"></span>
<span id="cb6-9">formula</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>am ~ mpg + hp + disp</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">model</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:  glm(formula = formula, family = "binomial", data = mtcars)

Coefficients:
(Intercept)          mpg           hp         disp  
  -33.81283      1.28498      0.14936     -0.06545  

Degrees of Freedom: 31 Total (i.e. Null);  28 Residual
Null Deviance:      43.23 
Residual Deviance: 10.15    AIC: 18.15</code></pre>
</div>
</div>
<p>In this example, the ‘reformulate()’ function constructs a formula that defines the relationship between the response variable “am” and the predictor variables “mpg”, “hp”, and “disp”. The resulting formula is then passed to the <code>glm()</code> function for fitting a logistic regression model.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The ‘reformulate()’ function simplifies the creation of model formulas in R by allowing you to specify the response and predictor variables concisely. By leveraging this function, you can save time and effort when constructing complex formulas for various modeling tasks. Whether you’re performing linear regression, logistic regression, or other types of analyses, ‘reformulate()’ is a valuable tool in your programming arsenal.</p>
<p>So, the next time you find yourself struggling with model formula creation, remember the power of ‘reformulate()’ and let it handle the complexity for you!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-13/index.html</guid>
  <pubDate>Tue, 13 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the file.info() Function in R: Listing Files by Date</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-08/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In R, the <code>file.info()</code> function is a useful tool for retrieving file information, such as file attributes and metadata. It allows programmers to gather details about files, including their size, permissions, and timestamps. In this post, we will explore the <code>file.info()</code> function and demonstrate how it can be used to list files by date.</p>
<section id="explaining-the-file.info-function" class="level2">
<h2 class="anchored" data-anchor-id="explaining-the-file.info-function">Explaining the file.info() Function:</h2>
<p>The <code>file.info()</code> function returns a data frame with file information as its columns. Each row corresponds to a file, and the columns contain attributes such as the file size, permissions, and timestamps. This function accepts one or more file paths as its argument, providing flexibility in examining multiple files simultaneously. The following columns are returned in the data.frame that results from <code>file.info()</code>:</p>
<ul>
<li><code>name</code>: The name of the file.</li>
<li><code>size</code>: The size of the file in bytes.</li>
<li><code>mode</code>: The mode of the file, which can be used to determine the file’s permissions.</li>
<li><code>mtime</code>: The modification time of the file.</li>
<li><code>ctime</code>: The creation time of the file.</li>
<li><code>atime</code>: The last access time of the file.</li>
</ul>
<p>In order to get some data to work with, we will save the iris dataset as an excel file four times in a for loop, waiting 10 seconds between each save.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(writexl)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;"># Generate file names</span></span>
<span id="cb1-4">file_prefix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"iris"</span></span>
<span id="cb1-5">file_extension <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">".xlsx"</span></span>
<span id="cb1-6">num_files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Save iris dataset as Excel files</span></span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">for</span> (i <span class="cf" style="color: #003B4F;">in</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>num_files) {</span>
<span id="cb1-10">  file_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(file_prefix, <span class="st" style="color: #20794D;">"_"</span>, i, file_extension)</span>
<span id="cb1-11">  <span class="fu" style="color: #4758AB;">write_xlsx</span>(iris, file_name)</span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"File"</span>, file_name, <span class="st" style="color: #20794D;">"saved successfully.</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)</span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;">10</span>) <span class="co" style="color: #5E5E5E;"># Sleep for 10 seconds then go again</span></span>
<span id="cb1-14">}</span></code></pre></div>
</section>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-retrieving-file-information" class="level2">
<h2 class="anchored" data-anchor-id="example-1-retrieving-file-information">Example 1: Retrieving File Information</h2>
<p>Let’s begin by retrieving information about a single file. we have a file named “iris_1.xlsx” located in our working directory. We can use the <code>file.info()</code> function to obtain its attributes:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">file_info <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.info</span>(<span class="st" style="color: #20794D;">"iris_1.xlsx"</span>)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">print</span>(file_info)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            size isdir mode               mtime               ctime
iris_1.xlsx 8497 FALSE  666 2023-06-08 07:34:30 2023-06-08 07:34:29
                          atime exe
iris_1.xlsx 2023-06-08 07:58:19  no</code></pre>
</div>
</div>
<p>The output will display a data frame with the attributes of the “iris_1.xlsx” file, including the file size, permissions, and timestamps. This information can be valuable for tasks such as file management and quality control.</p>
</section>
<section id="example-2-listing-files-by-date" class="level2">
<h2 class="anchored" data-anchor-id="example-2-listing-files-by-date">Example 2: Listing Files by Date</h2>
<p>Now, let’s dive into listing files based on their dates. To achieve this, we will combine the <code>file.info()</code> function with other functions to extract and manipulate the timestamp information.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Obtain file information for all files in a directory</span></span>
<span id="cb4-2">files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"*.xlsx$"</span>)</span>
<span id="cb4-3">file_info <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.info</span>(files)</span>
<span id="cb4-4">file_info<span class="sc" style="color: #5E5E5E;">$</span>file_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rownames</span>(file_info)</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;"># Sort files by modification date in ascending order</span></span>
<span id="cb4-7">sorted_files <span class="ot" style="color: #003B4F;">&lt;-</span> files[<span class="fu" style="color: #4758AB;">order</span>(file_info<span class="sc" style="color: #5E5E5E;">$</span>mtime)]</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;"># Display the sorted file list</span></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">print</span>(sorted_files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "./iris_1.xlsx" "./iris_2.xlsx" "./iris_3.xlsx" "./iris_4.xlsx"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">file_info[<span class="fu" style="color: #4758AB;">order</span>(file_info<span class="sc" style="color: #5E5E5E;">$</span>mtime), ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              size isdir mode               mtime               ctime
./iris_1.xlsx 8497 FALSE  666 2023-06-08 07:34:30 2023-06-08 07:34:29
./iris_2.xlsx 8497 FALSE  666 2023-06-08 07:34:41 2023-06-08 07:34:41
./iris_3.xlsx 8497 FALSE  666 2023-06-08 07:34:52 2023-06-08 07:34:52
./iris_4.xlsx 8497 FALSE  666 2023-06-08 07:35:05 2023-06-08 07:35:05
                            atime exe     file_name
./iris_1.xlsx 2023-06-08 07:59:30  no ./iris_1.xlsx
./iris_2.xlsx 2023-06-08 07:58:19  no ./iris_2.xlsx
./iris_3.xlsx 2023-06-08 07:58:19  no ./iris_3.xlsx
./iris_4.xlsx 2023-06-08 07:58:19  no ./iris_4.xlsx</code></pre>
</div>
</div>
<p>In this example, we first specify the directory path where our target files are located. By using <code>list.files()</code>, we obtain a vector of file names within that directory. Setting <code>full.names = TRUE</code> ensures that the file paths include the directory path. We also used the <code>pattern</code> parameter to ensure that we only grab the Excel files.</p>
<p>Next, we use <code>file.info()</code> on the vector of file names to retrieve the file information for all files in the directory. The resulting data frame, <code>file_info</code>, contains details about each file, including the modification timestamp (<code>mtime</code>).</p>
<p>To list the files by date, we sort the file names vector based on the modification timestamp, using <code>order(file_info$mtime)</code>. The resulting <code>sorted_files</code> vector contains the file paths sorted in ascending order based on the modification date.</p>
<p>Finally, we print the sorted file list to the console, providing an easy way to visualize the files listed by their modification date.</p>
<p>Let’s go over some more examples. How about you want to see the files that were created in the last 24 hours, well, you could then do the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.info</span>(<span class="fu" style="color: #4758AB;">list.files</span>(), <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb8-2">files <span class="ot" style="color: #003B4F;">&lt;-</span> files[files<span class="sc" style="color: #5E5E5E;">$</span>mtime <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">Sys.time</span>() <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">24</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">60</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">60</span>, ]</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">print</span>(files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                size isdir mode               mtime               ctime
index.qmd       5161 FALSE  666 2023-06-08 07:59:28 2023-06-07 08:14:49
index.rmarkdown 5281 FALSE  666 2023-06-08 07:59:30 2023-06-08 07:59:30
iris_1.xlsx     8497 FALSE  666 2023-06-08 07:34:30 2023-06-08 07:34:29
iris_2.xlsx     8497 FALSE  666 2023-06-08 07:34:41 2023-06-08 07:34:41
iris_3.xlsx     8497 FALSE  666 2023-06-08 07:34:52 2023-06-08 07:34:52
iris_4.xlsx     8497 FALSE  666 2023-06-08 07:35:05 2023-06-08 07:35:05
NA                NA    NA &lt;NA&gt;                &lt;NA&gt;                &lt;NA&gt;
                              atime  exe
index.qmd       2023-06-08 07:59:29   no
index.rmarkdown 2023-06-08 07:59:30   no
iris_1.xlsx     2023-06-08 07:59:30   no
iris_2.xlsx     2023-06-08 07:59:30   no
iris_3.xlsx     2023-06-08 07:59:30   no
iris_4.xlsx     2023-06-08 07:59:30   no
NA                             &lt;NA&gt; &lt;NA&gt;</code></pre>
</div>
</div>
<p>The <code>file.infor()</code> function can also be used to filter files by other criteria such as size. Lets say we want to find all files that are larger than 100MB, well we could do the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">files <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.info</span>(<span class="fu" style="color: #4758AB;">list.files</span>(), <span class="at" style="color: #657422;">full.name =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb10-2">files <span class="ot" style="color: #003B4F;">&lt;-</span> files[files<span class="sc" style="color: #5E5E5E;">$</span>size <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">100</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">1024</span><span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>, ]</span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">print</span>(files)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   size isdir mode mtime ctime atime  exe
NA   NA    NA &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt; &lt;NA&gt;</code></pre>
</div>
</div>
<p>We can see that we had no files greater than 100MB in the current directory.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>file.info()</code> function in R is a valuable tool for retrieving file information. In this post, we explored its usage and learned how to list files by date. By combining <code>file.info()</code> with other functions, we can extract and manipulate file attributes, enabling us to perform various file management tasks effectively. Understanding <code>file.info()</code> expands our capabilities in R programming, empowering us to work with file systems efficiently.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-08/index.html</guid>
  <pubDate>Thu, 08 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Data Transformation with pivot_longer() in R’s tidyr Library</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-06/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the world of data analysis and manipulation, tidying and reshaping data is often an essential step. R’s <code>tidyr</code> library provides powerful tools to efficiently transform and reshape data. One such function is <code>pivot_longer()</code>. In this blog post, we’ll explore how <code>pivot_longer()</code> works and demonstrate its usage through several examples. By the end, you’ll have a solid understanding of how to use this function to make your data more manageable and insightful.</p>
<p>The <code>tidyr</code> library holds the function, so we are going to have to load it first.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span></code></pre></div>
</div>
</section>
<section id="understanding-pivot_longer" class="level1">
<h1>Understanding pivot_longer()</h1>
<p>The <a href="https://tidyr.tidyverse.org/reference/pivot_longer.html"><code>pivot_longer()</code></a> function is designed to reshape data from a wider format to a longer format. It takes columns that represent different variables and consolidates them into key-value pairs, making it easier to analyze and visualize the data.</p>
<p>Syntax: The basic syntax of <code>pivot_longer()</code> is as follows:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">pivot_longer</span>(data, cols, names_to, values_to)</span></code></pre></div>
<ul>
<li><code>data</code>: The data frame or tibble to be reshaped.</li>
<li><code>cols</code>: The columns to be transformed.</li>
<li><code>names_to</code>: The name of the new column that will hold the variable names.</li>
<li><code>values_to</code>: The name of the new column that will hold the corresponding values.</li>
</ul>
</section>
<section id="example-1-reshaping-wide-data-to-long-data" class="level1">
<h1>Example 1: Reshaping Wide Data to Long Data</h1>
<p>Let’s start with a simple example to demonstrate the usage of <code>pivot_longer()</code>. Suppose we have a data frame called <code>students</code> with columns representing subjects and their respective scores:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">students <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb3-2">  <span class="at" style="color: #657422;">name =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Charlie"</span>),</span>
<span id="cb3-3">  <span class="at" style="color: #657422;">math =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">90</span>, <span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">92</span>),</span>
<span id="cb3-4">  <span class="at" style="color: #657422;">science =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">95</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">91</span>),</span>
<span id="cb3-5">  <span class="at" style="color: #657422;">history =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">87</span>, <span class="dv" style="color: #AD0000;">92</span>, <span class="dv" style="color: #AD0000;">78</span>)</span>
<span id="cb3-6">)</span></code></pre></div>
</div>
<p>To reshape this data from a wider format to a longer format, we can use <code>pivot_longer()</code> as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">students_long <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb4-2">  students, </span>
<span id="cb4-3">  <span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span>name, </span>
<span id="cb4-4">  <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"subject"</span>, </span>
<span id="cb4-5">  <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"score"</span></span>
<span id="cb4-6">  )</span>
<span id="cb4-7"></span>
<span id="cb4-8">students_long</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  name    subject score
  &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;
1 Alice   math       90
2 Alice   science    95
3 Alice   history    87
4 Bob     math       85
5 Bob     science    88
6 Bob     history    92
7 Charlie math       92
8 Charlie science    91
9 Charlie history    78</code></pre>
</div>
</div>
<p>The resulting <code>students_long</code> data frame will have three columns: <code>name</code>, <code>subject</code>, and <code>score</code>, where each row represents a student’s score in a specific subject.</p>
<p>Example 2: Handling Multiple Variables In many cases, data frames contain multiple variables that need to be pivoted simultaneously. Consider a data frame called <code>sales</code> with columns representing sales figures for different products in different regions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sales <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb6-2">  <span class="at" style="color: #657422;">region =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"North"</span>, <span class="st" style="color: #20794D;">"South"</span>, <span class="st" style="color: #20794D;">"East"</span>),</span>
<span id="cb6-3">  <span class="at" style="color: #657422;">product_A =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">100</span>, <span class="dv" style="color: #AD0000;">120</span>, <span class="dv" style="color: #AD0000;">150</span>),</span>
<span id="cb6-4">  <span class="at" style="color: #657422;">product_B =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">90</span>, <span class="dv" style="color: #AD0000;">110</span>),</span>
<span id="cb6-5">  <span class="at" style="color: #657422;">product_C =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">60</span>, <span class="dv" style="color: #AD0000;">70</span>, <span class="dv" style="color: #AD0000;">80</span>)</span>
<span id="cb6-6">)</span></code></pre></div>
</div>
<p>To reshape this data, we can specify multiple columns to pivot using <code>pivot_longer()</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">sales_long <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb7-2">  sales, </span>
<span id="cb7-3">  <span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">"product"</span>), </span>
<span id="cb7-4">  <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"product"</span>, </span>
<span id="cb7-5">  <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"sales"</span></span>
<span id="cb7-6">  )</span>
<span id="cb7-7"></span>
<span id="cb7-8">sales_long</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 9 × 3
  region product   sales
  &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;
1 North  product_A   100
2 North  product_B    80
3 North  product_C    60
4 South  product_A   120
5 South  product_B    90
6 South  product_C    70
7 East   product_A   150
8 East   product_B   110
9 East   product_C    80</code></pre>
</div>
</div>
<p>The resulting <code>sales_long</code> data frame will have three columns: <code>region</code>, <code>product</code>, and <code>sales</code>, where each row represents the sales figure of a specific product in a particular region.</p>
</section>
<section id="example-3-handling-irregular-data" class="level1">
<h1>Example 3: Handling Irregular Data</h1>
<p>Sometimes, data frames contain irregular structures, such as missing values or uneven numbers of columns. <code>pivot_longer()</code> can handle such scenarios gracefully. Consider a data frame called <code>measurements</code> with columns representing different measurement types and their respective values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">measurements <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb9-2">  <span class="at" style="color: #657422;">timestamp =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"2022-01-01"</span>, <span class="st" style="color: #20794D;">"2022-01-02"</span>, <span class="st" style="color: #20794D;">"2022-01-03"</span>),</span>
<span id="cb9-3">  <span class="at" style="color: #657422;">temperature =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">25.3</span>, <span class="fl" style="color: #AD0000;">27.1</span>, <span class="fl" style="color: #AD0000;">24.8</span>),</span>
<span id="cb9-4">  <span class="at" style="color: #657422;">humidity =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">65.2</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="fl" style="color: #AD0000;">68.5</span>),</span>
<span id="cb9-5">  <span class="at" style="color: #657422;">pressure =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1013</span>, <span class="dv" style="color: #AD0000;">1012</span>, <span class="cn" style="color: #8f5902;">NA</span>)</span>
<span id="cb9-6">)</span></code></pre></div>
</div>
<p>To reshape this data, we can use <code>pivot_longer()</code> and handle the missing values:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">measurements_long <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb10-2">  measurements, </span>
<span id="cb10-3">  <span class="at" style="color: #657422;">cols =</span> <span class="sc" style="color: #5E5E5E;">-</span>timestamp, </span>
<span id="cb10-4">  <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">"measurement"</span>, </span>
<span id="cb10-5">  <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">"value"</span>, </span>
<span id="cb10-6">  <span class="at" style="color: #657422;">values_drop_na =</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb10-7">  )</span>
<span id="cb10-8"></span>
<span id="cb10-9">measurements_long</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 7 × 3
  timestamp  measurement  value
  &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;
1 2022-01-01 temperature   25.3
2 2022-01-01 humidity      65.2
3 2022-01-01 pressure    1013  
4 2022-01-02 temperature   27.1
5 2022-01-02 pressure    1012  
6 2022-01-03 temperature   24.8
7 2022-01-03 humidity      68.5</code></pre>
</div>
</div>
<p>The resulting <code>measurements_long</code> data frame will have three columns: <code>timestamp</code>, <code>measurement</code>, and <code>value</code>, where each row represents a specific measurement at a particular timestamp. The <code>values_drop_na</code> argument ensures that rows with missing values are dropped.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we explored the <code>pivot_longer()</code> function from the tidyr library, which allows us to reshape data from a wider format to a longer format. We covered the syntax and provided several examples to illustrate its usage. By mastering <code>pivot_longer()</code>, you’ll be equipped to tidy your data and unleash its true potential for analysis and visualization.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>tidyr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-06/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Sorting, Ordering, and Ranking: Unraveling R’s Powerful Functions</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-02/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of data analysis and programming, organizing and sorting data efficiently is crucial. In R, a programming language renowned for its data manipulation capabilities, we have three powerful functions at our disposal: <code>order()</code>, <code>sort()</code>, and <code>rank()</code>. In this blog post, we will delve into the intricacies of these functions, explore their applications, and understand their parameters. These R functions are all used to sort data, however, they each have different purposes and use different methods to sort the data.</p>
</section>
<section id="the-order-function" class="level1">
<h1>The <code>order()</code> Function</h1>
<p>The <code>order()</code> function in R returns a permutation that would sort a vector or multiple vectors. It provides the indices that arrange the vector in ascending order. Let’s dive into an example to grasp its functionality:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb1-2">ordered_indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">order</span>(x)</span>
<span id="cb1-3">sorted_vector <span class="ot" style="color: #003B4F;">&lt;-</span> x[ordered_indices]</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"The ordered incdices are: "</span>, ordered_indices)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The ordered incdices are:  4 2 5 3 1</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"The sorted vector is: "</span>, sorted_vector)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The sorted vector is:  2 4 6 8 10</code></pre>
</div>
</div>
<p>Here, <code>order(x)</code> provides the indices that would sort the vector x in ascending order. Subsequently, <code>x[ordered_indices]</code> rearranges the vector based on those indices, resulting in a sorted vector.</p>
<section id="parameters-of-order" class="level2">
<h2 class="anchored" data-anchor-id="parameters-of-order">Parameters of order():</h2>
<ul>
<li><code>...</code> - Specify the vectors to be sorted.</li>
</ul>
</section>
</section>
<section id="the-sort-function" class="level1">
<h1>The <code>sort()</code> Function:</h1>
<p>The <code>sort()</code> function in R directly sorts the given vector or matrices. Unlike order(), it returns the sorted vector itself. Let’s illustrate this through an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">fruits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"apple"</span>, <span class="st" style="color: #20794D;">"banana"</span>, <span class="st" style="color: #20794D;">"orange"</span>, <span class="st" style="color: #20794D;">"grape"</span>)</span>
<span id="cb5-2">sorted_fruits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sort</span>(fruits)</span>
<span id="cb5-3">sorted_fruits</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"  "banana" "grape"  "orange"</code></pre>
</div>
</div>
<p>In this example, sort(fruits) sorts the character vector fruits alphabetically, returning a new vector sorted_fruits.</p>
<section id="parameters-of-sort" class="level2">
<h2 class="anchored" data-anchor-id="parameters-of-sort">Parameters of sort():</h2>
<ul>
<li><code>x</code> - The vector or matrix to be sorted.</li>
<li><code>decreasing</code> - A logical value indicating whether the sorting should be in descending order. (Default is FALSE)</li>
</ul>
</section>
</section>
<section id="the-rank-function" class="level1">
<h1>The <code>rank()</code> Function:</h1>
<p>The <code>rank()</code> function assigns ranks to the elements in a vector. It returns a vector of the same length as the input vector, indicating the rank of each element. Consider the following example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">scores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">80</span>, <span class="dv" style="color: #AD0000;">60</span>, <span class="dv" style="color: #AD0000;">90</span>, <span class="dv" style="color: #AD0000;">75</span>)</span>
<span id="cb7-2">ranking <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rank</span>(scores)</span>
<span id="cb7-3">ranking</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3 1 4 2</code></pre>
</div>
</div>
<p>In this example, <code>rank(scores)</code> assigns ranks to each element in the vector scores, resulting in a new vector ranking.</p>
<section id="parameters-of-rank" class="level2">
<h2 class="anchored" data-anchor-id="parameters-of-rank">Parameters of rank():</h2>
<ul>
<li><code>x</code> - The vector to be ranked.</li>
<li><code>ties.method</code> - A string specifying the method to handle ties in ranking. (Options: “average”, “first”, “last”, “random”, “max”, “min”) (Default is “average”)</li>
</ul>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Sorting, ordering, and ranking data are essential operations in data analysis. R’s functions, namely order(), sort(), and rank(), equip us with the necessary tools to accomplish these tasks seamlessly. By understanding their applications and parameters, we can efficiently manipulate data and derive meaningful insights. So, go ahead, explore their versatility, and unlock new possibilities in your data analysis endeavors!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-02/index.html</guid>
  <pubDate>Fri, 02 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The do.call() function in R: Unlocking Efficiency and Flexibility</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-06-01/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>As a programmer, you’re always on the lookout for tools that can enhance your productivity and make your code more efficient. In the world of R programming, the <code>do.call()</code> function is one such gem. This often-overlooked function is a powerful tool that allows you to dynamically call other functions, opening up a world of possibilities for code organization, reusability, and flexibility. In this blog post, we will demystify the <code>do.call()</code> function in simple terms and provide you with practical examples that showcase its versatility.</p>
</section>
<section id="understanding-do.call" class="level1">
<h1>Understanding <code>do.call()</code></h1>
<p>At its core, the <code>do.call()</code> function in R allows you to call other functions by constructing the function call as a list. It takes two arguments: the first being the function you want to call, and the second being a list of arguments to pass to that function. By encapsulating the function call as a list, you can generate and execute function calls dynamically, making your code more adaptable and concise.</p>
</section>
<section id="syntax" class="level1">
<h1>Syntax</h1>
<p>The syntax for the <code>do.call()</code> function is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">do.call</span>(what, args, quote, envir)</span></code></pre></div>
</div>
<p>The parameters:</p>
<ul>
<li><code>what</code> - Either a function or a non-empty character string naming the function to be called</li>
<li><code>args</code> - A list of arguments to the function call. The names attribute of args gives the argument names</li>
<li><code>quote</code> - A logical value indicating whether to quote the arguments</li>
<li><code>envir</code> - An environment within which to evaluate the call. This will be most useful if <code>what</code> is a character string and the arguments are symbols or quoted expressions</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="example-1-combining-multiple-vectors-with-rbind" class="level2">
<h2 class="anchored" data-anchor-id="example-1-combining-multiple-vectors-with-rbind">Example 1: Combining Multiple Vectors with <code>rbind()</code></h2>
<p>Let’s say you have a list of vectors, and you want to combine them into a single matrix using the rbind() function. Instead of manually specifying the vectors one by one, you can leverage do.call() to dynamically generate the function call:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">vectors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>))</span>
<span id="cb2-2">combined_matrix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(rbind, vectors)</span>
<span id="cb2-3">combined_matrix</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    1    2    3
[2,]    4    5    6
[3,]    7    8    9</code></pre>
</div>
</div>
<p>In this example, do.call() dynamically constructs the function call <code>rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))</code>, resulting in a matrix that combines the vectors.</p>
</section>
<section id="example-2-applying-a-function-to-multiple-data-frames-with-lapply" class="level2">
<h2 class="anchored" data-anchor-id="example-2-applying-a-function-to-multiple-data-frames-with-lapply">Example 2: Applying a Function to Multiple Data Frames with <code>lapply()</code></h2>
<p>Suppose you have a list of data frames, and you want to apply a specific function to each of them, such as summarizing the mean of a column. Instead of writing repetitive code, you can use do.call() to apply the desired function dynamically:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">data_frames <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">3</span>), </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">4</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>), </span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">a =</span> <span class="dv" style="color: #AD0000;">7</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">9</span>)</span>
<span id="cb4-5">  )</span>
<span id="cb4-6">mean_results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(</span>
<span id="cb4-7">  rbind, </span>
<span id="cb4-8">  <span class="fu" style="color: #4758AB;">lapply</span>(data_frames, <span class="cf" style="color: #003B4F;">function</span>(df) <span class="fu" style="color: #4758AB;">mean</span>(df<span class="sc" style="color: #5E5E5E;">$</span>a))</span>
<span id="cb4-9">  )</span>
<span id="cb4-10">mean_results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1]
[1,]    2
[2,]    5
[3,]    8</code></pre>
</div>
</div>
<p>In this example, <code>do.call()</code> combines the results of applying the mean function to each data frame’s ‘a’ column into a single matrix.</p>
</section>
</section>
<section id="example-3-dynamically-selecting-and-applying-functions" class="level1">
<h1>Example 3: Dynamically Selecting and Applying Functions</h1>
<p>One of the most powerful features of <code>do.call()</code> is the ability to dynamically select and apply functions based on runtime conditions. Consider a scenario where you have a variable number of vectors, and you want to perform different operations based on the number of vectors. <code>do.call()</code> makes it easy:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">vectors <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>), <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(vectors) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2</span>) {</span>
<span id="cb6-3">  result <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(<span class="st" style="color: #20794D;">"+"</span>, vectors)</span>
<span id="cb6-4">} <span class="cf" style="color: #003B4F;">else</span> <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(vectors) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">3</span>) {</span>
<span id="cb6-5">  result <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(<span class="st" style="color: #20794D;">"*"</span>, vectors)</span>
<span id="cb6-6">}</span>
<span id="cb6-7"></span>
<span id="cb6-8">result</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 5 7 9</code></pre>
</div>
</div>
<p>In this example, <code>do.call()</code> dynamically selects the appropriate function based on the number of vectors and applies it accordingly.</p>
</section>
<section id="more-simple-examples" class="level1">
<h1>More simple examples</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">do.call</span>(mean, numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 3</code></pre>
</div>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">do.call</span>(paste, numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1" "2" "3" "4" "5"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">do.call</span>(sort, numbers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1 2 3 4 5</code></pre>
</div>
</div>
<p>How about plot?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">un <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unlist</span>(numbers)</span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;">do.call</span>(plot, <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">x =</span> un, <span class="at" style="color: #657422;">y =</span> un))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.spsanderson.com/steveondata/posts/2023-06-01/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">mod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">do.call</span>(lm, <span class="fu" style="color: #4758AB;">list</span>(y <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">x =</span> un, <span class="at" style="color: #657422;">y =</span> un)))</span>
<span id="cb15-2">mod<span class="sc" style="color: #5E5E5E;">$</span>coefficients</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> (Intercept)            x 
1.191616e-15 1.000000e+00 </code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>do.call()</code> function in R is a versatile tool that enables you to dynamically call functions, making your code more efficient and flexible. By encapsulating function calls as lists, you gain the ability to generate function calls dynamically, reducing code duplication and increasing reusability. Whether you’re combining vectors, applying functions to data frames, or dynamically selecting functions, <code>do.call()</code> empowers you to tackle complex scenarios with elegance and efficiency. Embrace the power of <code>do.call()</code> in your R programming journey, and unlock a world of possibilities!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-06-01/index.html</guid>
  <pubDate>Thu, 01 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Demystifying Regular Expressions: A Programmer’s Guide for Beginners</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-31/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Regular expressions, often abbreviated as regex, are powerful tools used in programming to match and manipulate text patterns. While they might seem intimidating at first, regular expressions are incredibly useful for tasks like data validation, text parsing, and pattern matching. In this blog post, we’ll explore regular expressions in the context of R programming, breaking down the concepts step by step and providing practical examples along the way. By the end, you’ll have a solid understanding of regular expressions and be ready to apply them to your own projects.</p>
</section>
<section id="what-are-regular-expressions" class="level1">
<h1>What are Regular Expressions?</h1>
<p>At its core, a regular expression is a sequence of characters that define a search pattern. It allows you to search, extract, and manipulate text based on specific patterns of characters. Regular expressions are supported in many programming languages, including R, and they provide a concise and flexible way to work with text.</p>
</section>
<section id="how-do-regular-expressions-work" class="level1">
<h1>How do regular expressions work?</h1>
<p>Regular expressions work by matching patterns of characters in text. The basic syntax of a regular expression is a sequence of characters enclosed in delimiters, such as slashes <code>(/)</code>. The characters in the regular expression can be literal characters, special characters, or character classes.</p>
<p>Literal characters are characters that match themselves. For example, the regular expression <code>/a/</code> matches the letter a.</p>
<p>Special characters are characters that have special meaning in regular expressions. For example, the special character . matches any character.</p>
<p>Character classes are a way to specify a set of characters. For example, the character class <code>[a-z]</code> matches any lowercase letter.</p>
</section>
<section id="how-to-use-regular-expressions-in-r" class="level1">
<h1>How to use regular expressions in R</h1>
<p>Regular expressions can be used in R to search for, extract, and replace text. To use regular expressions in R, you can use the <code>grep()</code>, <code>grepl()</code>, <code>sub()</code>, and <code>gsub()</code> functions.</p>
<p>The <code>grep()</code> function is used to search for text that matches a regular expression. The <code>grepl()</code> function is similar to <code>grep()</code>, but it returns a logical vector indicating whether each element of a vector matches the regular expression. The <code>sub()</code> function is used to replace text that matches a regular expression. The <code>gsub()</code> function is similar to <code>sub()</code>, but it replaces all occurrences of the text that matches the regular expression.</p>
</section>
<section id="basic-characters" class="level1">
<h1>Basic Characters</h1>
<ul>
<li><code>.</code> | Matches any single character except a newline character.</li>
<li><code>[]</code> | Matches any character within the brackets. For example, [a-z] matches any lowercase letter.</li>
<li><code>*</code> | Matches zero or more occurrences of the preceding character. For example, a* matches any number of a characters, including zero.</li>
<li><code>+</code> | Matches one or more occurrences of the preceding character. For example, a+ matches one or more a characters.</li>
<li><code>?</code> | Matches zero or one occurrences of the preceding character. For example, a? matches either one or zero a characters.</li>
<li><code>^</code> | Matches the beginning of the string.</li>
<li><code>$</code> | Matches the end of the string.</li>
</ul>
</section>
<section id="special-characters" class="level1">
<h1>Special Characters</h1>
<p>The following are the special characters used in regular expressions:</p>
<ul>
<li><code>\d</code> | Matches a digit.</li>
<li><code>\s</code> | Matches a whitespace character.</li>
<li><code>\w</code> | Matches a word character (alphanumeric character or underscore).</li>
<li><code>\W</code> | Matches a non-word character.</li>
<li><code>\n</code> | Matches a newline character.</li>
<li><code>\r</code> | Matches a carriage return character.</li>
<li><code>\t</code> | Matches a tab character.</li>
</ul>
</section>
<section id="examples-of-regular-expressions-in-r" class="level1">
<h1>Examples of regular expressions in R</h1>
<p>Here are some examples of regular expressions in R:</p>
<ul>
<li>To search for all occurrences of the word “hello” in a string, you would use the following code:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">grep</span>(<span class="st" style="color: #20794D;">"hello"</span>, <span class="st" style="color: #20794D;">"This is a string that contains the word 'hello'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 1</code></pre>
</div>
</div>
<ul>
<li>To extract all of the email addresses from a string, you would use the following code:</li>
</ul>
<p><code>grepl("\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}")</code>, “This is a string that contains some email addresses”)</p>
<ul>
<li>To replace all of the spaces in a string with underscores, you would use the following code:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">sub</span>(<span class="st" style="color: #20794D;">" "</span>, <span class="st" style="color: #20794D;">"_"</span>, <span class="st" style="color: #20794D;">"This is a string with some spaces"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "This_is a string with some spaces"</code></pre>
</div>
</div>
<ul>
<li>To replace all of the occurrences of the word “hello” with the word “goodbye” in a string, you would use the following code:</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">gsub</span>(<span class="st" style="color: #20794D;">"hello"</span>, <span class="st" style="color: #20794D;">"goodbye"</span>, <span class="st" style="color: #20794D;">"This is a string that contains the word 'hello'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "This is a string that contains the word 'goodbye'"</code></pre>
</div>
</div>
</section>
<section id="matching-a-simple-pattern" class="level1">
<h1>Matching a Simple Pattern</h1>
<p>Let’s start with a simple example in R. Suppose we have a character vector called fruits that contains various fruit names:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">fruits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"apple"</span>, <span class="st" style="color: #20794D;">"banana"</span>, <span class="st" style="color: #20794D;">"orange"</span>, <span class="st" style="color: #20794D;">"kiwi"</span>, <span class="st" style="color: #20794D;">"mango"</span>)</span></code></pre></div>
</div>
<p>We can use a regular expression to find all the fruits that start with the letter “a”. In R, the <code>grep()</code> function allows us to perform pattern matching. Here’s how we can achieve this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">pattern <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"^a"</span>  <span class="co" style="color: #5E5E5E;"># ^ denotes the start of the line</span></span>
<span id="cb8-2">matching_fruits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">grep</span>(pattern, fruits, <span class="at" style="color: #657422;">value =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">print</span>(matching_fruits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "apple"</code></pre>
</div>
</div>
<p>The output will be “apple”.</p>
<p>In this example, the pattern “^a” specifies that we want to match any fruit that starts with the letter “a”. The <code>grep()</code> function returns the matching fruit names, and we set value = TRUE to obtain the matched values instead of their indices.</p>
</section>
<section id="extracting-digits-from-a-string" class="level1">
<h1>Extracting Digits from a String</h1>
<p>Regular expressions can be used to extract specific information from a string. Suppose we have a character vector called sentences containing sentences with numbers:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">sentences <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"I have 10 apples."</span>, <span class="st" style="color: #20794D;">"The recipe calls for 2 cups of sugar."</span>, <span class="st" style="color: #20794D;">"You are the 3rd winner."</span>)</span></code></pre></div>
</div>
<p>To extract the digits from each sentence, we can use the <code>gsub()</code> function, which replaces specific patterns within a string:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">pattern <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">D"</span>  <span class="co" style="color: #5E5E5E;"># \\D matches any non-digit character</span></span>
<span id="cb11-2">digits <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">gsub</span>(pattern, <span class="st" style="color: #20794D;">""</span>, sentences)</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">print</span>(digits)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "10" "2"  "3" </code></pre>
</div>
</div>
<p>The output will be “10” “2” “3”</p>
<p>In this example, the pattern “\D” matches any non-digit character. By replacing these characters with an empty string, we effectively extract the digits from each sentence.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Regular expressions are an invaluable tool for working with text patterns in programming. While they may seem daunting at first, breaking down the concepts and understanding their building blocks can help demystify them. In this blog post, we explored the basics of regular expressions in R, showcasing practical examples along the way. Armed with this knowledge, you can now confidently incorporate regular expressions into your programming projects, allowing you to manipulate and extract information from text efficiently.</p>
<p>Remember, practice makes perfect when it comes to regular expressions. Experiment with different patterns, explore the rich set of metacharacters and operators available, and refer to the R documentation for more in-depth information. Regular expressions open up a whole new world of possibilities in text manipulation, so embrace their power and have fun exploring the endless patterns you can match!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>regex</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-31/index.html</guid>
  <pubDate>Wed, 31 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Simplifying Logical Operations with the R Function any()</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-30/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Programming is often about making decisions based on certain conditions. In the world of R, there are numerous functions that can help us simplify our code and make it more efficient. One such function is any(). In this blog post, we’ll explore the any() function and learn how it can be used to streamline our logical operations. Whether you’re a beginner or an experienced programmer, this post aims to make the concept accessible to everyone. So, let’s dive in!</p>
</section>
<section id="understanding-the-basics" class="level1">
<h1>Understanding the Basics</h1>
<p>The any() function in R is a powerful tool that allows us to determine if any of the elements in a given vector or logical expression are TRUE. It returns a single logical value (TRUE or FALSE) depending on the presence or absence of TRUE values within the input.</p>
</section>
<section id="syntax" class="level1">
<h1>Syntax:</h1>
<p>The basic syntax of the any() function is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">any</span>(x, ...)</span></code></pre></div>
</div>
<p>Here, <code>x</code> represents the input vector or logical expression, and <code>...</code> represents additional arguments which can be used to control the behavior of the function (although they are optional).</p>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<section id="basic-examples" class="level2">
<h2 class="anchored" data-anchor-id="basic-examples">Basic Examples</h2>
<p>Now, let’s see some basic examples on how to use the <code>any()</code> function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">any</span>(x <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] FALSE</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="cn" style="color: #8f5902;">NA</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">any</span>(x <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">any</span>(x <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] TRUE</code></pre>
</div>
</div>
<p>Now, let’s explore some examples to see how <code>any()</code> can be utilized in various scenarios:</p>
</section>
<section id="checking-for-the-presence-of-a-specific-value" class="level2">
<h2 class="anchored" data-anchor-id="checking-for-the-presence-of-a-specific-value">Checking for the Presence of a Specific Value:</h2>
<p>Suppose we have a vector of numbers, and we want to check if any of them are divisible by 5. We can use the any() function to accomplish this as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">numbers <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">15</span>, <span class="dv" style="color: #AD0000;">21</span>)</span>
<span id="cb8-2">is_divisible_by_5 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">any</span>(numbers <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">5</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;">if</span> (is_divisible_by_5) {</span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"At least one number is divisible by 5."</span>)</span>
<span id="cb8-6">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"None of the numbers are divisible by 5."</span>)</span>
<span id="cb8-8">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "At least one number is divisible by 5."</code></pre>
</div>
</div>
<p>In this example, we use the modulus operator (%%) to check if each number in the vector has a remainder of 0 when divided by 5. The any() function then returns TRUE if any such element is found, indicating the presence of at least one number divisible by 5.</p>
</section>
<section id="validating-user-input" class="level2">
<h2 class="anchored" data-anchor-id="validating-user-input">Validating User Input:</h2>
<p>Let’s say we are building a program that requires the user to input a positive number. We can use the any() function to validate the input as shown below:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">user_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">readline</span>(<span class="at" style="color: #657422;">prompt =</span> <span class="st" style="color: #20794D;">"Enter a positive number: "</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Enter a positive number: </code></pre>
</div>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># Dummy input</span></span>
<span id="cb12-2">user_input <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb12-3">is_positive <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">any</span>(user_input <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;">if</span> (is_positive) {</span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"Input is a positive number."</span>)</span>
<span id="cb12-7">} <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb12-8">  <span class="fu" style="color: #4758AB;">print</span>(<span class="st" style="color: #20794D;">"Input is not a positive number."</span>)</span>
<span id="cb12-9">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Input is a positive number."</code></pre>
</div>
</div>
<p>Here, we convert the user input to a numeric value using <code>as.numeric()</code> and then check if it is greater than zero. The a<code>ny()</code> function returns TRUE if any element satisfies this condition, confirming that the input is indeed a positive number.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>any()</code> function in R simplifies the process of determining whether any elements in a vector or logical expression are TRUE. It’s a versatile tool that can be employed in a variety of scenarios, from validating user input to performing complex logical operations. By incorporating <code>any()</code> into your code, you can enhance readability, reduce redundancy, and make your programs more efficient.</p>
<p>Remember, mastering these small yet powerful functions is what sets great programmers apart. So go ahead, experiment with <code>any()</code> and unlock its full potential in your R programming journey!</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-30/index.html</guid>
  <pubDate>Tue, 30 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Why Check File Size Output for Different Methods?</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-26/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When working with data, it is important to be aware of the file size of the data you are working with. This is especially true when you are working with large datasets, as the file size can have a significant impact on the performance of your code.</p>
<p>In R, there are a number of different ways to write data to files. Each method has its own advantages and disadvantages, and the file size of the output can vary depending on the method you use.</p>
<p>In this blog post, we will discuss why it is a good idea to check the file size output for different methods. We will also provide three examples of how to check the file size output using the R libraries writexl, openxlsx, and xlsx.</p>
</section>
<section id="why-check-file-size-output" class="level1">
<h1>Why Check File Size Output?</h1>
<p>There are a number of reasons why it is a good idea to check the file size output for different methods.</p>
<ul>
<li>To ensure that the data is being written correctly: If the file size of the output is significantly different from the expected file size, it is a sign that something may have gone wrong when the data was being written to the file. This could be due to a number of factors, such as a typo in the code, a problem with the file system, or a bug in the R library.</li>
<li>To optimize performance: The file size of the output can have a significant impact on the performance of your code. If the file size is too large, it can take longer to read the data from the file, which can slow down your code.</li>
<li>To troubleshoot problems: If you are having problems with your code, checking the file size output can help you to identify the source of the problem. For example, if the file size of the output is significantly smaller than the expected file size, it is a sign that the data may not be being written to the file correctly.</li>
</ul>
</section>
<section id="examples-of-checking-file-size-output" class="level1">
<h1>Examples of Checking File Size Output</h1>
<p>In R, there are a number of different ways to check the file size output. Here are three examples of how to check the file size output using the R libraries writexl, openxlsx, and xlsx:</p>
<section id="writexl" class="level2">
<h2 class="anchored" data-anchor-id="writexl"><code>writexl</code></h2>
<p>To check the file size output of the <code>writexl::write_xlsx()</code> function, you can use the <code>file.info()</code> function. For example, the following code will write the iris dataset to a temporary file and then print the file size of the</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(writexl)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">write_xlsx</span>(iris, tmp1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempfile</span>())</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">file.info</span>(tmp1)<span class="sc" style="color: #5E5E5E;">$</span>size</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 8497</code></pre>
</div>
</div>
</section>
<section id="openxlsx" class="level2">
<h2 class="anchored" data-anchor-id="openxlsx"><code>openxlsx</code></h2>
<p>To check the file size output of the <code>openxlsx::write.xlsx()</code> function, you can use the <code>file.info()</code> function. For example, the following code will write the iris dataset to a temporary file and then print the file size of the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(openxlsx)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">write.xlsx</span>(iris, tmp2 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempfile</span>())</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">file.info</span>(tmp2)<span class="sc" style="color: #5E5E5E;">$</span>size</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 9631</code></pre>
</div>
</div>
</section>
<section id="xlsx" class="level2">
<h2 class="anchored" data-anchor-id="xlsx"><code>xlsx</code></h2>
<p>To check the file size output of the <code>xlsx::write.xlsx()</code> function, you can use the file.info() function. For example, the following code will write the iris dataset to a temporary file and then print the file size of the output:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(xlsx)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">write.xlsx</span>(iris, tmp3 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">tempfile</span>(), <span class="st" style="color: #20794D;">".xlsx"</span>))</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">file.info</span>(tmp3)<span class="sc" style="color: #5E5E5E;">$</span>size</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 7905</code></pre>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we discussed why it is a good idea to check the file size output for different methods. We also provided three examples of how to check the file size output using the R libraries writexl, openxlsx, and xlsx.</p>
<p>By checking the file size output, you can ensure that the data is being written correctly, optimize the performance of your code, and troubleshoot problems.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>excel</category>
  <category>openxlsx</category>
  <category>xlsx</category>
  <category>writexl</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-26/index.html</guid>
  <pubDate>Fri, 26 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Comparing R Packages for Writing Excel Files: An Analysis of writexl, openxlsx, and xlsx in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-25/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In the realm of data analysis and manipulation, R has become a popular programming language due to its extensive collection of packages and libraries. One common task is exporting data to Excel files, which allows for easy sharing and presentation of results. In this blog post, we will explore three popular R packages for writing Excel files: <code>writexl</code>, <code>openxlsx</code>, and <code>xlsx</code>. We will compare their performance using the benchmarking package and analyze the results. So let’s dive in!</p>
</section>
<section id="setting-up-the-environment" class="level1">
<h1>Setting up the Environment</h1>
<p>Before we proceed, make sure you have the necessary packages installed. We will be using the rbenchmark, nycflights13, and dplyr packages. The nycflights13 package provides a dataset named “flights,” which we will use for our benchmarking tests.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(rbenchmark)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(nycflights13)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span></code></pre></div>
</div>
<p>#Defining the Number of Replications</p>
<p>To ensure reliable performance measurements, we will repeat each test multiple times. The variable n represents the number of replications, and you can adjust its value depending on your requirements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span></span></code></pre></div>
</div>
</section>
<section id="benchmarking-the-packages" class="level1">
<h1>Benchmarking the Packages</h1>
<p>Now, let’s move on to the actual benchmarking process. We will use the benchmark() function from the rbenchmark package to compare the performance of writexl, openxlsx, and xlsx.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">benchmark</span>(</span>
<span id="cb3-2">  <span class="st" style="color: #20794D;">"writexl"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-3">    writexl<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write_xlsx</span>(flights, <span class="fu" style="color: #4758AB;">tempfile</span>())</span>
<span id="cb3-4">  },</span>
<span id="cb3-5">  <span class="st" style="color: #20794D;">"openxlsx"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-6">    openxlsx<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write.xlsx</span>(flights, <span class="fu" style="color: #4758AB;">tempfile</span>())</span>
<span id="cb3-7">  },</span>
<span id="cb3-8">  <span class="st" style="color: #20794D;">"xlsx"</span> <span class="ot" style="color: #003B4F;">=</span> {</span>
<span id="cb3-9">    xlsx<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">write.xlsx</span>(flights, <span class="fu" style="color: #4758AB;">paste0</span>(<span class="fu" style="color: #4758AB;">tempfile</span>(),<span class="st" style="color: #20794D;">".xlsx"</span>))</span>
<span id="cb3-10">  },</span>
<span id="cb3-11">  <span class="at" style="color: #657422;">replications =</span> n,</span>
<span id="cb3-12">  <span class="at" style="color: #657422;">columns =</span> <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-13">    <span class="st" style="color: #20794D;">"test"</span>,<span class="st" style="color: #20794D;">"replications"</span>,<span class="st" style="color: #20794D;">"elapsed"</span>,<span class="st" style="color: #20794D;">"relative"</span>,<span class="st" style="color: #20794D;">"user.self"</span>,<span class="st" style="color: #20794D;">"sys.self"</span>)</span>
<span id="cb3-14">)</span></code></pre></div>
</div>
<p>In the code snippet above, we define three tests, each representing one package. We provide the code to execute for each test. For example, in the “writexl” test, we use the <code>write_xlsx()</code> function from the <code>writexl</code> package to write the “flights” dataset to a temporary Excel file.</p>
<p>The replications parameter specifies the number of times each test should be repeated. In our case, we set it to n, which we defined earlier as 5.</p>
<p>The columns parameter defines the columns to include in the benchmarking results. We specify “test” for the test name, “replications” for the number of replications, “elapsed” for the total time taken, “relative” for the relative performance compared to the fastest test, “user.self” for the CPU time used in user code, and “sys.self” for the CPU time used in system code.</p>
</section>
<section id="prettifying-the-results" class="level1">
<h1>Prettifying the Results</h1>
<p>To make the results more readable, we can use the <code>arrange()</code> function from the dplyr package to sort the results by the “relative” column in ascending order.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">arrange</span>(relative)</span></code></pre></div>
</div>
<p>This will arrange the benchmarking results in ascending order of relative performance, allowing us to easily identify the most efficient package.</p>
</section>
<section id="benchmark-output" class="level1">
<h1>Benchmark Output</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">test replications elapsed relative user.self sys.self</span>
<span id="cb5-2"><span class="dv" style="color: #AD0000;">1</span> writexl       <span class="dv" style="color: #AD0000;">5</span>   <span class="fl" style="color: #AD0000;">0.034</span>   <span class="fl" style="color: #AD0000;">1.000000</span>   <span class="fl" style="color: #AD0000;">0.024</span>   <span class="fl" style="color: #AD0000;">0.010</span></span>
<span id="cb5-3"><span class="dv" style="color: #AD0000;">2</span> openxlsx       <span class="dv" style="color: #AD0000;">5</span>   <span class="fl" style="color: #AD0000;">0.055</span>   <span class="fl" style="color: #AD0000;">1.617647</span>   <span class="fl" style="color: #AD0000;">0.044</span>   <span class="fl" style="color: #AD0000;">0.011</span></span>
<span id="cb5-4"><span class="dv" style="color: #AD0000;">3</span> xlsx          <span class="dv" style="color: #AD0000;">5</span>   <span class="fl" style="color: #AD0000;">0.101</span>   <span class="fl" style="color: #AD0000;">2.941176</span>   <span class="fl" style="color: #AD0000;">0.078</span>   <span class="fl" style="color: #AD0000;">0.023</span></span></code></pre></div>
</div>
</section>
<section id="interpretation-of-the-results" class="level1">
<h1>Interpretation of the Results</h1>
<p>The results of the benchmark show that writexl is the fastest package for writing to Excel, followed by openxlsx and xlsx. The difference in performance between the three packages is not significant, but writexl is consistently faster than the other two packages.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we compared the performance of three R packages, writexl, openxlsx, and xlsx, for writing Excel files. We used the rbenchmark package to benchmark the packages, considering the number of replications, elapsed time, relative performance, user CPU time, and system CPU time. By arranging the results using the dplyr package, we obtained a sorted view of the relative performance. This analysis can help you choose the most suitable package for your specific needs, considering both performance and functionality.</p>
<p>Remember, benchmarking can vary depending on the dataset and system specifications. So, it’s always a good idea to run your own benchmarks and evaluate the results in your specific context. Happy coding!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>excel</category>
  <category>openxlsx</category>
  <category>xlsx</category>
  <category>writexl</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-25/index.html</guid>
  <pubDate>Thu, 25 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Exploring Data with TidyDensity: A Guide to Using tidy_empirical() and tidy_four_autoplot() in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-24/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I had the need to see data that had a grouping column in it. I wanted to use the <code>tidy_four_autoplot()</code> function on it from the <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a> library on it. This post will explain how I did it. The data in my session was called <code>df_tbl</code>. In this blog post, we will explore the steps involved in using the tidy_empirical() and tidy_four_autoplot() functions from the R library TidyDensity. These functions are incredibly useful when working with data, as they allow us to analyze and visualize empirical distributions efficiently. We will walk through a code snippet that demonstrates how to use these functions within a map() function, enabling us to analyze multiple subsets of data simultaneously.</p>
<p>#Prerequisites</p>
<p>To follow along with this tutorial, it is assumed that you have a basic understanding of the R programming language, as well as familiarity with the dplyr, purrr, and TidyDensity libraries. Make sure you have these packages installed and loaded before proceeding.</p>
<p>Here is the code that I used, the explanation will follow:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr) <span class="co" style="color: #5E5E5E;"># to use group_split()</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(purrr) <span class="co" style="color: #5E5E5E;"># to use map()</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(TidyDensity) <span class="co" style="color: #5E5E5E;"># to use tidy_empirical() and tidy_four_plot()</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">df_tbl <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">group_split</span>(SP_NAME) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">map</span>(\(run_time) <span class="fu" style="color: #4758AB;">pull</span>(run_time) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-8">        <span class="fu" style="color: #4758AB;">tidy_empirical</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-9">        <span class="fu" style="color: #4758AB;">tidy_four_autoplot</span>()</span>
<span id="cb1-10">      )</span></code></pre></div>
</div>
</section>
<section id="code-explanation" class="level1">
<h1>Code Explanation</h1>
<p>Let’s break down the code step by step:</p>
<p><strong>Importing Required Libraries:</strong></p>
<ul>
<li>To access the necessary functions, we need to load the required libraries. In this case, we use library(dplyr) to utilize the <code>group_split()</code> function from the dplyr package, library(purrr) to use the <code>map()</code> function from the purrr package, and library(TidyDensity) to access the <code>tidy_empirical()</code> and <code>tidy_four_autoplot()</code> functions from the TidyDensity package.</li>
</ul>
<p><strong>Grouping and Splitting the Data:</strong></p>
<ul>
<li>The first line of the code snippet takes a dataframe named df_tbl and uses the <code>group_split()</code> function from the dplyr library to split it into multiple subsets based on a variable called SP_NAME. This creates a list of dataframes, each representing a unique group based on SP_NAME.</li>
</ul>
<p><strong>Applying Functions to Each Subset using map():</strong></p>
<ul>
<li>The second line of code utilizes the <code>map()</code> function from the purrr library to iterate over each subset of data created in the previous step. The <code>map()</code> function takes two arguments: the object to iterate over (in this case, the list of dataframes) and a function to apply to each element.</li>
</ul>
<p><strong>Anonymous Function Inside map():</strong></p>
<ul>
<li>Within the <code>map()</code> function, an anonymous function (denoted by (run_time)) is defined. This function takes a single argument named run_time, representing each individual subset of data. The purpose of this anonymous function is to perform the necessary computations and visualizations on each subset of data.</li>
</ul>
<p><strong>Data Manipulation and Visualization:</strong></p>
<ul>
<li>Inside the anonymous function, the pull(run_time) function is used to extract the run_time column from each subset of data. This column is then passed to the <code>tidy_empirical()</code> function from the TidyDensity library, which calculates the empirical distribution of the data. The result is a tidy dataframe that contains information about the empirical distribution.</li>
</ul>
<p><strong>Tidy Four Autoplot:</strong></p>
<ul>
<li>The output of <code>tidy_empirical()</code> is then piped (|&gt;) into the <code>tidy_four_autoplot()</code> function from the TidyDensity library. This function generates a visualization called a “Tidy Four Plot,” which consists of four individual plots: empirical density, empirical cumulative density, QQ plot, and histogram.</li>
</ul>
<p><strong>Final Output:</strong></p>
<ul>
<li>The result of the <code>tidy_four_autoplot()</code> function is the final output of the anonymous function within <code>map()</code>. This output represents the visualization of the empirical distribution for each subset of data.</li>
</ul>
<p>Happy Coding!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>tidydensity</category>
  <category>dplyr</category>
  <category>purrr</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-24/index.html</guid>
  <pubDate>Wed, 24 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>What is the sink() function? Capturing Output to External Files</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-23/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>The <code>sink()</code> function in R is used to divert R output to an external connection. This can be useful for a variety of purposes, such as exporting data to a file, logging R output, or debugging R code.</p>
<p>In this blog post, we will explore the inner workings of the sink() function, understand its purpose, and provide practical examples using the popular datasets mtcars and iris.</p>
<p>The sink() function takes four arguments:</p>
<ul>
<li><code>file</code>: The name of the file to which R output will be diverted. If file is NULL, then R output will be diverted to the console.</li>
<li><code>append</code>: A logical value indicating whether R output should be appended to the file (<code>TRUE</code>) or overwritten <code>(FALSE</code>). The default value is FALSE.</li>
<li><code>type</code>: A character string. Either the output stream or the messages stream. The name will be partially match so can be abbreviated.</li>
<li><code>split</code>: logical: if <code>TRUE</code>, output will be sent to the new sink and the current output stream, like the Unix program <code>tee</code>.</li>
</ul>
</section>
<section id="examples" class="level1">
<h1>Examples</h1>
<p>Here are some examples of how to use the sink() function. To export the mtcars dataset to a file called “mtcars.csv”, you would use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"mtcars.csv"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">print</span>(mtcars)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">sink</span>()</span></code></pre></div>
</div>
<p>To log R output to a file called “r_output.log”, you would use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"r_output.log"</span>)</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># Your R code goes here</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">sink</span>()</span></code></pre></div>
</div>
<p>To debug R code, you can use the <code>sink()</code> function to divert R output to a file. This can be helpful for tracking down errors in your code. For example, if you are trying to debug a function called <code>my_function()</code>, you could use the following code:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"my_function.log"</span>)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">my_function</span>()</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">sink</span>()</span></code></pre></div>
</div>
</section>
<section id="capturing-summary-statistics-of-mtcars-dataset" class="level1">
<h1>Capturing Summary Statistics of mtcars Dataset</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"summary_output.txt"</span>)  <span class="co" style="color: #5E5E5E;"># Redirect output to the file</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">summary</span>(mtcars)  <span class="co" style="color: #5E5E5E;"># Generate summary statistics</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>      mpg             cyl             disp             hp       
 Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  
 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  
 Median :19.20   Median :6.000   Median :196.3   Median :123.0  
 Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  
 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  
 Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  
      drat             wt             qsec             vs        
 Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  
 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  
 Median :3.695   Median :3.325   Median :17.71   Median :0.0000  
 Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  
 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  
 Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  
       am              gear            carb      
 Min.   :0.0000   Min.   :3.000   Min.   :1.000  
 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000  
 Median :0.0000   Median :4.000   Median :2.000  
 Mean   :0.4062   Mean   :3.688   Mean   :2.812  
 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000  
 Max.   :1.0000   Max.   :5.000   Max.   :8.000  </code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">sink</span>()  <span class="co" style="color: #5E5E5E;"># Turn off redirection</span></span></code></pre></div>
</div>
<p>In this example, the output of the summary(mtcars) command will be saved in the “summary_output.txt” file. We can later open the file to review the summary statistics of the mtcars dataset.</p>
</section>
<section id="saving-regression-results-of-iris-dataset" class="level1">
<h1>Saving Regression Results of iris Dataset</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"regression_results.txt"</span>)  <span class="co" style="color: #5E5E5E;"># Redirect output to the file</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(Sepal.Length <span class="sc" style="color: #5E5E5E;">~</span> Sepal.Width, <span class="at" style="color: #657422;">data =</span> iris)  <span class="co" style="color: #5E5E5E;"># Perform linear regression</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="fu" style="color: #4758AB;">summary</span>(fit)  <span class="co" style="color: #5E5E5E;"># Display regression summary</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Call:
lm(formula = Sepal.Length ~ Sepal.Width, data = iris)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.5561 -0.6333 -0.1120  0.5579  2.2226 

Coefficients:
            Estimate Std. Error t value Pr(&gt;|t|)    
(Intercept)   6.5262     0.4789   13.63   &lt;2e-16 ***
Sepal.Width  -0.2234     0.1551   -1.44    0.152    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 0.8251 on 148 degrees of freedom
Multiple R-squared:  0.01382,   Adjusted R-squared:  0.007159 
F-statistic: 2.074 on 1 and 148 DF,  p-value: 0.1519</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">sink</span>()  <span class="co" style="color: #5E5E5E;"># Turn off redirection</span></span></code></pre></div>
</div>
<p>In this example, the output of the summary(fit) command will be saved in the “regression_results.txt” file. By redirecting the output, we can analyze the regression results in detail without cluttering the console.</p>
</section>
<section id="appending-output-to-a-file" class="level1">
<h1>Appending Output to a File</h1>
<p>By default, calling <code>sink()</code> with a file name will overwrite any existing content in the file. However, if we want to append output to an existing file, we can pass the append = TRUE argument to <code>sink()</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">sink</span>(<span class="st" style="color: #20794D;">"output.txt"</span>, <span class="at" style="color: #657422;">append =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)  <span class="co" style="color: #5E5E5E;"># Append output to the existing file</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;">cat</span>(<span class="st" style="color: #20794D;">"Additional text</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>)  <span class="co" style="color: #5E5E5E;"># Append custom text</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Additional text</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;">sink</span>()  <span class="co" style="color: #5E5E5E;"># Turn off redirection</span></span></code></pre></div>
</div>
<p>In this example, the string “Additional text” will be appended to the “output.txt” file. This feature is useful when we want to continuously update a log file or add multiple output sections to a single file.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>sink()</code> function is a handy tool in R that allows us to redirect output to external files. By using this function, we can save and review the output generated during data analysis, statistical modeling, or any other R programming tasks. In this blog post, we explored the basic usage of <code>sink()</code> and provided practical examples using the mtcars and iris datasets. By mastering <code>sink()</code>, you can efficiently manage your R output and ensure a more organized workflow.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-23/index.html</guid>
  <pubDate>Tue, 23 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Update to {TidyDensity}</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-22/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>To effectively extract insights and communicate findings, you need powerful tools that simplify the process and present data in an engaging manner. If you’re a programmer with a penchant for data analysis, you’re in luck! The latest version of <a href="https://www.spsanderson.com/TidyDensity/"><code>{TidyDensity}</code></a>, the popular R package, has just been released, bringing you exciting new features and enhancements. In this blog post, we’ll explore the highlights of <code>TidyDensity</code> 1.2.5 and why you should download it today.</p>
</section>
<section id="new-feature-introducing-util_burr_param_estimate" class="level1">
<h1>New Feature: Introducing util_burr_param_estimate()</h1>
<p><code>TidyDensity</code> 1.2.5 introduces a new function: <code>util_burr_param_estimate()</code>. This function enables you to estimate parameters using the Burr distribution, expanding the possibilities of your data analysis. Whether you’re working with survival analysis, reliability modeling, or extreme value theory, <code>util_burr_param_estimate()</code> equips you with a powerful tool to tackle complex scenarios with ease. Say goodbye to manual calculations and embrace the simplicity and accuracy of <code>TidyDensity</code>.</p>
</section>
<section id="minor-fixes-and-improvements-for-enhanced-workflow" class="level1">
<h1>Minor Fixes and Improvements for Enhanced Workflow</h1>
<p>In addition to the groundbreaking new feature, <code>TidyDensity</code> 1.2.5 addresses user feedback and provides several minor fixes and improvements. Let’s take a look at a couple of them:</p>
<ul>
<li>Improved Parameter Rounding: With the new version, you now have more control over the rounding of parameter estimates. The updated function <code>tidy_distribution_comparison()</code> includes a parameter called <code>.round_to_place</code>, allowing you to precisely control the rounding behavior of the parameter estimates passed to their corresponding distribution parameters. This enhancement ensures that your analysis remains accurate and aligned with your specific requirements.</li>
</ul>
</section>
<section id="why-upgrade-to-tidydensity-1.2.5" class="level1">
<h1>Why Upgrade to TidyDensity 1.2.5?</h1>
<ul>
<li><p>Stay Ahead of the Curve: The world of data analysis is constantly evolving, and staying up to date with the latest tools and features is crucial to remain competitive. <code>TidyDensity</code> 1.2.5 empowers you with advanced capabilities, enabling you to analyze and visualize data more effectively than ever before.</p></li>
<li><p>Simplify Complex Analysis: With the new util_burr_param_estimate() function, <code>TidyDensity</code> 1.2.5 simplifies complex data analysis tasks. Whether you’re a seasoned data scientist or a beginner, this feature allows you to explore a wider range of statistical distributions and unlock deeper insights from your data.</p></li>
<li><p>Fine-Tuned Precision: The improved parameter rounding in <code>tidy_distribution_comparison()</code> ensures that your analysis is not only powerful but also precise. This level of control over rounding provides you with the flexibility to align your analysis with your specific requirements.</p></li>
</ul>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p><code>TidyDensity</code> 1.2.5 is a significant update that brings you exciting new features and enhancements. From the introduction of <code>util_burr_param_estimate()</code> to the fine-tuned parameter rounding and polished visuals, this version is designed to empower you in your data analysis journey. By downloading <code>TidyDensity</code>1.2.5, you can stay at the forefront of data analysis, simplify complex tasks, and elevate the precision and user experience of your projects. Upgrade to <code>TidyDensity</code> 1.2.5 today!.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>tidydensity</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-22/index.html</guid>
  <pubDate>Mon, 22 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Mastering File Manipulation with R’s list.files() Function</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/2023-05-19/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>When it comes to working with files in R, having a powerful tool at your disposal can make a world of difference. Enter the <code>list.files()</code> function, a versatile and handy utility that allows you to effortlessly navigate through directories, retrieve file names, and perform various file-related operations. In this blog post, we will delve into the intricacies of <code>list.files()</code> and explore real-world examples to help you harness its full potential.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">list.files</span>(</span>
<span id="cb1-2">  path, </span>
<span id="cb1-3">  <span class="at" style="color: #657422;">all.files =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, </span>
<span id="cb1-4">  <span class="at" style="color: #657422;">full.names =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, </span>
<span id="cb1-5">  <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">FALSE</span>, </span>
<span id="cb1-6">  <span class="at" style="color: #657422;">pattern =</span> <span class="cn" style="color: #8f5902;">NULL</span></span>
<span id="cb1-7">)</span></code></pre></div>
</div>
<ul>
<li><code>path</code> is a character vector specifying the directory to list. If no path is specified, the current working directory is used.</li>
<li><code>all.files</code> is a logical value specifying whether all files should be listed, including hidden files. The default value is FALSE, which only lists visible files.</li>
<li><code>full.names</code> is a logical value specifying whether the full paths to the files should be returned. The default value is FALSE, which only returns the file names.</li>
<li><code>recursive</code> is a logical value specifying whether subdirectories should be searched. The default value is FALSE, which only lists files in the specified directory.</li>
<li><code>pattern</code> is a regular expression that can be used to filter the files that are listed. If no pattern is specified, all files are listed.</li>
</ul>
</section>
<section id="understanding-the-basics" class="level1">
<h1>Understanding the Basics</h1>
<p>Before diving into the practical examples, let’s familiarize ourselves with the fundamental aspects of the <code>list.files()</code> function. In its simplest form, <code>list.files()</code> retrieves a character vector containing the names of files and directories within a specified directory. It takes in several optional arguments that provide flexibility and control over the file selection process.</p>
</section>
<section id="example-1-listing-files-in-a-directory" class="level1">
<h1>Example 1: Listing Files in a Directory</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># List all files in the current working directory</span></span>
<span id="cb2-2">file_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>()</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;">print</span>(file_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "blank.txt"       "index.qmd"       "index.rmarkdown"</code></pre>
</div>
</div>
<p>In this example, the <code>list.files()</code> function is called without any arguments, resulting in the retrieval of all file names within the current working directory. The file_names variable will store the obtained character vector, which can then be printed or further processed.</p>
</section>
<section id="example-2-specifying-a-directory" class="level1">
<h1>Example 2: Specifying a Directory</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># List all files in a specific directory</span></span>
<span id="cb4-2">directory <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"../rtip-2022-10-24/"</span></span>
<span id="cb4-3">file_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> directory)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">print</span>(file_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "index.qmd"</code></pre>
</div>
</div>
<p>Here, by setting the path argument to the desired directory, you can obtain the list of file names within that particular location. Remember to provide the appropriate path to the directory you wish to explore.</p>
</section>
<section id="example-3-selecting-files-with-a-pattern" class="level1">
<h1>Example 3: Selecting Files with a Pattern</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># List only files with a specific extension</span></span>
<span id="cb6-2">pattern <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.txt$"</span></span>
<span id="cb6-3">file_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">pattern =</span> pattern)</span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">print</span>(file_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "blank.txt"</code></pre>
</div>
</div>
<p>In this case, the pattern argument is used to filter the file names based on a regular expression. The example showcases the retrieval of only those files with a “.txt” extension. Customize the pattern as per your requirements, utilizing the power of regular expressions.</p>
</section>
<section id="example-4-recursive-file-listing" class="level1">
<h1>Example 4: Recursive File Listing</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># List files recursively within a directory and its subdirectories</span></span>
<span id="cb8-2">directory <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"../rtip-2023-02-14/R/box/"</span></span>
<span id="cb8-3">file_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> directory, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb8-4"><span class="fu" style="color: #4758AB;">print</span>(file_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "global_options/global_options.R" "io/exports.R"                   
[3] "io/imports.R"                    "mod/mod.R"                      </code></pre>
</div>
</div>
<p>By setting the recursive argument to TRUE, you can instruct <code>list.files()</code> to search for files not only in the specified directory but also in its subdirectories. This feature is particularly useful when dealing with nested file structures.</p>
</section>
<section id="example-5-excluding-directories" class="level1">
<h1>Example 5: Excluding Directories</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># List only files and exclude directories</span></span>
<span id="cb10-2">directory <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"../rtip-2023-02-14/R/box/"</span></span>
<span id="cb10-3">file_names <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">path =</span> directory, <span class="at" style="color: #657422;">include.dirs =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">print</span>(file_names)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "global_options" "io"             "mod"           </code></pre>
</div>
</div>
<p>In scenarios where you only want to retrieve files and exclude directories, set the include.dirs argument to FALSE. This ensures that only the file names are included in the result, omitting any directory names.</p>
<p>Here are some more examples:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;"># List all files in the current working directory</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;">list.files</span>()</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;"># List all files in the current working directory, including hidden files</span></span>
<span id="cb12-5"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">all.files =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;"># List all files in the current working directory with the .csv extension</span></span>
<span id="cb12-8"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="at" style="color: #657422;">pattern =</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">.csv$"</span>)</span>
<span id="cb12-9"></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;"># List all files in the /data directory</span></span>
<span id="cb12-11"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"/data"</span>)</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;"># List all files in the /data directory, including subdirectories</span></span>
<span id="cb12-14"><span class="fu" style="color: #4758AB;">list.files</span>(<span class="st" style="color: #20794D;">"/data"</span>, <span class="at" style="color: #657422;">recursive =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The <code>list.files()</code> function in R is an invaluable tool for file manipulation, enabling you to effortlessly retrieve file names, filter based on patterns, explore nested directories, and more. By mastering this function, you gain greater control over your file-handling tasks and can efficiently process and analyze data stored in files.</p>
<p>Remember to consult R’s documentation for additional details on the various optional arguments and explore the wide range of possibilities offered by <code>list.files()</code>. With practice and experimentation, you’ll become a proficient file explorer in no time!</p>
<p>Happy coding!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>files</category>
  <guid>https://www.spsanderson.com/steveondata/posts/2023-05-19/index.html</guid>
  <pubDate>Fri, 19 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The which() Function in R</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-18/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction:</h1>
<p>As a programmer, one of the most important tasks is to extract valuable insights from data. To make this process efficient, it is crucial to have a reliable tool at your disposal. Enter the <code>which()</code> function in R. This versatile function allows you to locate specific elements within a vector or a data frame, helping you filter and analyze data with ease. In this blog post, we’ll explore the ins and outs of the <code>which()</code> function, discussing its syntax, common use cases, and providing practical examples to solidify your understanding.</p>
</section>
<section id="understanding-the-syntax" class="level1">
<h1>Understanding the Syntax:</h1>
<p>Before diving into real-world examples, let’s grasp the basic syntax of the <code>which()</code> function. The general structure of the function is as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">which</span>(logical_vector, <span class="at" style="color: #657422;">arr.ind =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span></code></pre></div>
</div>
<p>The <code>logical_vector</code> parameter represents the condition or logical expression you want to evaluate. It can be any expression that returns a logical vector, such as a comparison or logical operation. The optional <code>arr.ind</code> parameter, when set to <code>TRUE</code>, returns the result in array indices instead of a vector, that is to say that the <code>which()</code> function will return a vector of integers that correspond to the positions of the elements in the vector that satisfy the condition.</p>
</section>
<section id="example-1-locating-elements-in-a-numeric-vector" class="level1">
<h1>Example 1: Locating Elements in a Numeric Vector</h1>
<p>Suppose we have a numeric vector called scores, representing test scores of students. We want to find the indices of scores greater than or equal to 90. Here’s how we can accomplish that using the <code>which()</code> function:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">scores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">85</span>, <span class="dv" style="color: #AD0000;">92</span>, <span class="dv" style="color: #AD0000;">88</span>, <span class="dv" style="color: #AD0000;">94</span>, <span class="dv" style="color: #AD0000;">79</span>, <span class="dv" style="color: #AD0000;">91</span>, <span class="dv" style="color: #AD0000;">87</span>, <span class="dv" style="color: #AD0000;">98</span>, <span class="dv" style="color: #AD0000;">84</span>, <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb2-2">indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(scores <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">90</span>)</span>
<span id="cb2-3">indices</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1]  2  4  6  8 10</code></pre>
</div>
</div>
<p>In this example, the <code>which()</code> function evaluates the logical expression scores &gt;= 90 and returns the indices of the elements satisfying the condition. The resulting indices vector will contain <code>[2, 4, 6, 8, 10]</code>, indicating the positions of the scores that meet the criteria.</p>
</section>
<section id="example-2-filtering-data-frames" class="level1">
<h1>Example 2: Filtering Data Frames</h1>
<p>Data frames are widely used in data analysis. The which() function can be incredibly useful when working with data frames to filter rows based on specific conditions. Consider the following example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">Name =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Alice"</span>, <span class="st" style="color: #20794D;">"Bob"</span>, <span class="st" style="color: #20794D;">"Charlie"</span>, <span class="st" style="color: #20794D;">"Dave"</span>),</span>
<span id="cb4-2">                   <span class="at" style="color: #657422;">Age =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb4-3">                   <span class="at" style="color: #657422;">City =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"New York"</span>, <span class="st" style="color: #20794D;">"London"</span>, <span class="st" style="color: #20794D;">"Paris"</span>, <span class="st" style="color: #20794D;">"Sydney"</span>))</span>
<span id="cb4-4"></span>
<span id="cb4-5">selected_rows <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(data<span class="sc" style="color: #5E5E5E;">$</span>Age <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">30</span>)</span>
<span id="cb4-6">filtered_data <span class="ot" style="color: #003B4F;">&lt;-</span> data[selected_rows, ]</span>
<span id="cb4-7">filtered_data</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  Name Age   City
2  Bob  32 London
4 Dave  30 Sydney</code></pre>
</div>
</div>
<p>In this case, we use the <code>which()</code> function to find the rows where the Age column is greater than or equal to 30. The selected_rows vector will hold the indices <code>[2, 4]</code>, which we subsequently use to filter the original data frame. The resulting filtered_data will contain the rows corresponding to the selected indices, in this case, rows for Bob and Dave.</p>
</section>
<section id="example-3-using-the-arr.ind-parameter" class="level1">
<h1>Example 3: Using the arr.ind Parameter</h1>
<p>The arr.ind parameter of the which() function comes in handy when working with multi-dimensional arrays. It allows you to obtain the indices as an array instead of a vector. Let’s illustrate this with an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">matrix_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">12</span>, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">ncol =</span> <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb6-2">selected_indices <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(matrix_data <span class="sc" style="color: #5E5E5E;">%%</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">arr.ind =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb6-3">selected_indices</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     row col
[1,]   3   1
[2,]   3   2
[3,]   3   3
[4,]   3   4</code></pre>
</div>
</div>
<p>In this example, we create a matrix called <code>matrix_data</code> and use the <code>which()</code> function to find the indices where the matrix elements are divisible by 3. By setting <code>arr.ind = TRUE</code>, we obtain a matrix of indices, where each row represents the position of an element satisfying the condition.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion:</h1>
<p>The <code>which()</code> function in R proves to be an invaluable tool for data exploration and filtering. By allowing you to locate specific elements in vectors or data frames, it simplifies the process of extracting relevant information from your data. Throughout this blog post, we explored the syntax and various practical examples of using the <code>which()</code> function. Armed with this knowledge, you can now confidently apply the <code>which()</code> function to your own data analysis tasks in R, boosting your productivity and uncovering hidden insights with ease.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>which</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-18/index.html</guid>
  <pubDate>Thu, 18 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 4</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-17/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Formatting dates is an essential task in data analysis and programming. In R, there are various ways to manipulate and present dates according to specific requirements. In this blog post, we will explore the world of date formatting in R, uncovering the power of the <code>strftime()</code> function. We will walk through practical examples using the provided code snippet, demonstrating how to format dates in a clear and concise manner. So, let’s dive in and uncover the secrets of date formatting in R!</p>
<p>#Understanding the strftime() Function:</p>
<p>In R, the <code>strftime()</code> function allows us to format dates and times based on a set of predefined modifiers. These modifiers act as placeholders for different components of the date and time. By using these modifiers, we can customize the output format to suit our needs.</p>
<p>Let’s analyze the code snippet provided to gain a better understanding of the <code>strftime()</code> function and its capabilities.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># all of the modifiers</span></span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;">for</span> (formatter <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">c</span>(letters, LETTERS))) {</span>
<span id="cb1-3">  modifier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%"</span>, formatter)</span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">print</span>(</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb1-6">      modifier, </span>
<span id="cb1-7">      <span class="st" style="color: #20794D;">" used on: "</span>,</span>
<span id="cb1-8">      RightNow,</span>
<span id="cb1-9">      <span class="st" style="color: #20794D;">" will give: "</span>,</span>
<span id="cb1-10">      <span class="fu" style="color: #4758AB;">strftime</span>(RightNow, modifier)</span>
<span id="cb1-11">    )</span>
<span id="cb1-12">  )</span>
<span id="cb1-13">}</span></code></pre></div>
</div>
<p>The code snippet above iterates through a set of modifiers, both lowercase and uppercase letters, and applies each modifier to the <code>RightNow</code> variable. It then prints the modifier, the original <code>RightNow</code> value, and the formatted output. This allows us to see the effect of each modifier on the date and time representation.</p>
</section>
<section id="modifier-showcase" class="level1">
<h1>Modifier Showcase:</h1>
<p>Let’s explore some commonly used modifiers and their corresponding output formats:</p>
<pre><code>%a - Abbreviated weekday name (e.g., "Mon").
%A - Full weekday name (e.g., "Monday").
%b - Abbreviated month name (e.g., "Jan").
%B - Full month name (e.g., "January").
%d - Day of the month (01-31).
%H - Hour in 24-hour format (00-23).
%I - Hour in 12-hour format (01-12).
%m - Month (01-12).
%M - Minute (00-59).
%p - AM/PM indicator.
%S - Second (00-59).
%Y - Year with century (e.g., "2023").
%y - Year without century (e.g., "23").</code></pre>
<p>Feel free to experiment with different modifiers and observe the changes in the output format.</p>
<p>Here is a full example</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">RightNow <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Sys.time</span>()</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;"># all of the modifiers</span></span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;">for</span> (formatter <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">c</span>(letters, LETTERS))) {</span>
<span id="cb3-5">  modifier <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"%"</span>, formatter)</span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">print</span>(</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;">paste0</span>(</span>
<span id="cb3-8">      modifier, </span>
<span id="cb3-9">      <span class="st" style="color: #20794D;">" used on: "</span>,</span>
<span id="cb3-10">      RightNow,</span>
<span id="cb3-11">      <span class="st" style="color: #20794D;">" will give: "</span>,</span>
<span id="cb3-12">      <span class="fu" style="color: #4758AB;">strftime</span>(RightNow, modifier)</span>
<span id="cb3-13">    )</span>
<span id="cb3-14">  )</span>
<span id="cb3-15">}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "%a used on: 2023-05-17 09:34:47 will give: Wed"
[1] "%A used on: 2023-05-17 09:34:47 will give: Wednesday"
[1] "%b used on: 2023-05-17 09:34:47 will give: May"
[1] "%B used on: 2023-05-17 09:34:47 will give: May"
[1] "%c used on: 2023-05-17 09:34:47 will give: Wed May 17 09:34:47 2023"
[1] "%C used on: 2023-05-17 09:34:47 will give: 20"
[1] "%d used on: 2023-05-17 09:34:47 will give: 17"
[1] "%D used on: 2023-05-17 09:34:47 will give: 05/17/23"
[1] "%e used on: 2023-05-17 09:34:47 will give: 17"
[1] "%E used on: 2023-05-17 09:34:47 will give: E"
[1] "%f used on: 2023-05-17 09:34:47 will give: f"
[1] "%F used on: 2023-05-17 09:34:47 will give: 2023-05-17"
[1] "%g used on: 2023-05-17 09:34:47 will give: 23"
[1] "%G used on: 2023-05-17 09:34:47 will give: 2023"
[1] "%h used on: 2023-05-17 09:34:47 will give: May"
[1] "%H used on: 2023-05-17 09:34:47 will give: 09"
[1] "%i used on: 2023-05-17 09:34:47 will give: i"
[1] "%I used on: 2023-05-17 09:34:47 will give: 09"
[1] "%j used on: 2023-05-17 09:34:47 will give: 137"
[1] "%J used on: 2023-05-17 09:34:47 will give: J"
[1] "%k used on: 2023-05-17 09:34:47 will give:  9"
[1] "%K used on: 2023-05-17 09:34:47 will give: K"
[1] "%l used on: 2023-05-17 09:34:47 will give:  9"
[1] "%L used on: 2023-05-17 09:34:47 will give: L"
[1] "%m used on: 2023-05-17 09:34:47 will give: 05"
[1] "%M used on: 2023-05-17 09:34:47 will give: 34"
[1] "%n used on: 2023-05-17 09:34:47 will give: \n"
[1] "%N used on: 2023-05-17 09:34:47 will give: N"
[1] "%o used on: 2023-05-17 09:34:47 will give: o"
[1] "%O used on: 2023-05-17 09:34:47 will give: O"
[1] "%p used on: 2023-05-17 09:34:47 will give: AM"
[1] "%P used on: 2023-05-17 09:34:47 will give: am"
[1] "%q used on: 2023-05-17 09:34:47 will give: q"
[1] "%Q used on: 2023-05-17 09:34:47 will give: Q"
[1] "%r used on: 2023-05-17 09:34:47 will give: 09:34:47 AM"
[1] "%R used on: 2023-05-17 09:34:47 will give: 09:34"
[1] "%s used on: 2023-05-17 09:34:47 will give: 1684330487"
[1] "%S used on: 2023-05-17 09:34:47 will give: 47"
[1] "%t used on: 2023-05-17 09:34:47 will give: \t"
[1] "%T used on: 2023-05-17 09:34:47 will give: 09:34:47"
[1] "%u used on: 2023-05-17 09:34:47 will give: 3"
[1] "%U used on: 2023-05-17 09:34:47 will give: 20"
[1] "%v used on: 2023-05-17 09:34:47 will give: 17-May-2023"
[1] "%V used on: 2023-05-17 09:34:47 will give: 20"
[1] "%w used on: 2023-05-17 09:34:47 will give: 3"
[1] "%W used on: 2023-05-17 09:34:47 will give: 20"
[1] "%x used on: 2023-05-17 09:34:47 will give: 5/17/2023"
[1] "%X used on: 2023-05-17 09:34:47 will give: 9:34:47 AM"
[1] "%y used on: 2023-05-17 09:34:47 will give: 23"
[1] "%Y used on: 2023-05-17 09:34:47 will give: 2023"
[1] "%z used on: 2023-05-17 09:34:47 will give: -0400"
[1] "%Z used on: 2023-05-17 09:34:47 will give: EDT"</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this blog post, we explored the <code>strftime()</code> function in R, which provides powerful capabilities for formatting dates. By using the various modifiers available, we can easily customize the representation of dates and times to meet our specific requirements. Understanding date formatting is crucial for effective data analysis, visualization, and reporting.</p>
<p>Remember to refer to the R documentation for <code>strftime()</code> to discover additional modifiers and advanced formatting options. With the knowledge gained from this blog post, you are now equipped to master date formatting in R and handle dates with confidence in your programming endeavors.</p>
<p>Happy coding with R and may your dates always be formatted to perfection!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-17/index.html</guid>
  <pubDate>Wed, 17 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 3</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-16/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Dates and times are essential components in many programming tasks, and R provides various functions and packages to handle them effectively. In this post, we’ll explore some common operations using both the base R functions and the lubridate package, comparing their simplicity and ease of understanding.</p>
<p>Let’s dive right in!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># What class does as.Date() produce?</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># be sure lubridate </span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;"># install.packages("lubridate")</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;"># Which do you find easier to understand? base or lubridate?</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;">today</span>() <span class="co" style="color: #5E5E5E;"># today() = Sys.Date()</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-05-16"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">now</span>() <span class="co" style="color: #5E5E5E;"># now() = Sys.time()</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2023-05-16 08:27:52 EDT"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># as_date and as.Date produce the same class</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as_date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>)) <span class="co" style="color: #5E5E5E;"># lubridate</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">class</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1881/10/25"</span>)) <span class="co" style="color: #5E5E5E;"># base</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># simpler strptime</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;">strptime</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>, <span class="st" style="color: #20794D;">"%Y-%m-%d %H:%M:%S %z"</span>) <span class="co" style="color: #5E5E5E;"># time zone is messed up</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 15:00:00"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">parse_date_time</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>, <span class="st" style="color: #20794D;">"ymd HMS z"</span>) <span class="co" style="color: #5E5E5E;"># time zone works</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 19:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># lubridate takes it one step further</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;">ymd_hms</span>(<span class="st" style="color: #20794D;">"2014-07-13 16:00:00 -0300"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 19:00:00 UTC"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;">mdy_hm</span>(<span class="st" style="color: #20794D;">"July 13, 2014 4:00 pm"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "2014-07-13 16:00:00 UTC"</code></pre>
</div>
</div>
<p>1️⃣ Determining the Class of a Date: The first line of code checks the class produced by the <code>as.Date()</code> function when given the input “1881/10/25.” By using the <code>class()</code> function, we can identify that the output is of class “Date.” This means that the <code>as.Date()</code> function converts the input into a date format.</p>
<p>2️⃣ Base R vs.&nbsp;lubridate: Before we proceed further, we need to ensure that the lubridate package is installed. If not, the code installs it using the <code>install.packages()</code> function. We then load the package using the <code>library()</code> function.</p>
<p>Next, we compare the ease of use between base R and lubridate for working with dates and times.</p>
<ol type="a">
<li><p>Today’s Date and Current Time: The <code>today()</code> function, equivalent to <code>Sys.Date()</code>, gives you the current date. Similarly, <code>now()</code> returns the current date and time using <code>Sys.time()</code>. These functions make it straightforward to obtain the current date or date and time in R.</p></li>
<li><p>Class Comparison: We compare the classes of dates produced by <code>as_date()</code> from lubridate and <code>as.Date()</code> from base R. Using the <code>class()</code> function on each result, we observe that both functions produce the same “Date” class output. Hence, both methods are equivalent in this regard.</p></li>
</ol>
<p>3️⃣ Simplifying Date and Time Parsing: Parsing date and time strings can sometimes be tricky, especially when dealing with time zones. However, lubridate provides simplified functions to handle such scenarios.</p>
<ol type="a">
<li><p>Base R’s <code>strptime()</code>: The <code>strptime()</code> function is a base R function that parses a date and time string based on a given format. In this case, we try to parse “2014-07-13 16:00:00 -0300” with the format “%Y-%m-%d %H:%M:%S %z.” However, we encounter a problem with the time zone, as it does not parse correctly.</p></li>
<li><p>lubridate’s <code>parse_date_time()</code>: To overcome the time zone issue, lubridate offers the <code>parse_date_time()</code> function. We provide the same date and time string along with the format “ymd HMS z.” This time, the time zone is parsed correctly, resulting in a valid date and time object.</p></li>
</ol>
<p>4️⃣ Going the Extra Mile with lubridate: lubridate takes date and time manipulation a step further with its intuitive functions.</p>
<ol type="a">
<li><p><code>ymd()</code>: The <code>ymd()</code> function converts a character string of the form “2014-07-13 16:00:00 -0300” into a date object. It handles various date formats and automatically infers the year, month, and day information.</p></li>
<li><p><code>ymd_hms()</code>: Similar to <code>ymd()</code>, the <code>ymd_hms()</code> function converts a character string into a date-time object, considering the year, month, day, hour, minute, and second components.</p></li>
<li><p><code>mdy_hm()</code>: The <code>mdy_hm()</code> function allows us to parse a character string like “July 13, 2014 4:00 pm” into</p></li>
</ol>
<p>a date-time object. It handles different date formats and automatically extracts the month, day, year, hour, and minute information.</p>
<p>By leveraging these functions, lubridate simplifies the process of working with dates and times, offering a more intuitive and concise syntax compared to base R.</p>
<p>In conclusion, understanding how to handle dates and times in R is crucial for many programming tasks. While base R provides essential functions, the lubridate package offers additional capabilities and a more straightforward syntax, making it an attractive choice for working with dates and times in R.</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-16/index.html</guid>
  <pubDate>Tue, 16 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 2: Finding the Next Mothers Day with Simplicity</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-15/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Mother’s Day is a special occasion to honor and appreciate the incredible women in our lives. As programmers, we can use our coding skills to make our lives easier when it comes to important dates like Mother’s Day. In this blog post, we’ll walk through a simple and engaging R code that helps us find the next Mother’s Day. So grab your coding hats, and let’s get started!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># if you aren't using times, use the Date class; it's simpler</span></span>
<span id="cb1-2">NextMothersDay <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(</span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-14"</span>, </span>
<span id="cb1-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-14"</span></span>
<span id="cb1-6">    )</span>
<span id="cb1-7">  )</span>
<span id="cb1-8"></span>
<span id="cb1-9">NextMothersDay</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>startMothersDay   endMothersDay 
   "2024-05-14"    "2024-05-14" </code></pre>
</div>
</div>
<p>In the first part of our code, we use the <code>as.Date()</code> function to find the next Mother’s Day. Since we don’t need to consider specific times, we can simply use the Date class, which simplifies the process. We create a vector with two elements: <code>startMothersDay</code> and <code>endMothersDay</code>, both set to “2024-05-14”. This represents the range of Mother’s Day for the year 2024. Finally, we store the result in the variable <code>NextMothersDay</code> and print it to the console. Voilà! We have the next Mother’s Day date.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># if you have times, then use POSIX.</span></span>
<span id="cb3-2">NextMothersDay_ct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(</span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb3-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-15 10:00"</span>, <span class="co" style="color: #5E5E5E;"># Let Mommy Sleep!</span></span>
<span id="cb3-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-15 23:59"</span></span>
<span id="cb3-6">    ),</span>
<span id="cb3-7">  <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"GMT"</span></span>
<span id="cb3-8">  )</span>
<span id="cb3-9"></span>
<span id="cb3-10">NextMothersDay_ct</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>          startMothersDay             endMothersDay 
"2024-05-15 10:00:00 GMT" "2024-05-15 23:59:00 GMT" </code></pre>
</div>
</div>
<p>Now, let’s say we want to consider specific times for Mother’s Day celebrations. We can use the <code>as.POSIXct()</code> function to handle dates and times together. We create another vector with two elements: <code>startMothersDay</code> and <code>endMothersDay</code>, but this time with specific times. The start time is set to “2024-05-15 10:00” (because let’s let Mommy sleep in!) and the end time is set to “2024-05-15 23:59”. We also specify the time zone as “GMT” using the tz argument. The result is stored in the variable <code>NextMothersDay_ct</code>, and when we print it, we get the range of Mother’s Day with times included.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;"># converting from one POSIX to another is easy</span></span>
<span id="cb5-2">NextMothersDay_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(NextMothersDay_ct)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">unclass</span>(NextMothersDay_lt)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 0 0

$min
[1]  0 59

$hour
[1] 10 23

$mday
[1] 15 15

$mon
[1] 4 4

$year
startMothersDay   endMothersDay 
            124             124 

$wday
[1] 3 3

$yday
[1] 135 135

$isdst
[1] 0 0

attr(,"tzone")
[1] "GMT"</code></pre>
</div>
</div>
<p>Now, let’s explore how to convert a <code>POSIXct</code> object to a <code>POSIXlt</code> object. We use the <code>as.POSIXlt()</code> function to convert <code>NextMothersDay_ct</code> into a <code>POSIXlt</code> object. This conversion allows us to access more detailed components of the date and time, such as the day of the week, hour, minute, and second. Finally, we use the <code>unclass()</code> function to remove the class attributes from the object and print the result to the console.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>With just a few lines of code, we have learned how to find the next Mother’s Day using R. Whether you need a simple date or a specific time range, R provides us with convenient functions to handle both scenarios. So the next time you want to plan a special surprise for your mom, you can rely on your coding skills to</p>
</section>
<section id="full-script" class="level1">
<h1>Full Script</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># if you aren't using times, use the Date class it's simpler</span></span>
<span id="cb7-2">NextMothersDay <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(</span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-4">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-14"</span>, </span>
<span id="cb7-5">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-14"</span></span>
<span id="cb7-6">    )</span>
<span id="cb7-7">  )</span>
<span id="cb7-8"></span>
<span id="cb7-9">NextMothersDay</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;"># if you have times, then use POSIX.</span></span>
<span id="cb7-12">NextMothersDay_ct <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(</span>
<span id="cb7-13">  <span class="fu" style="color: #4758AB;">c</span>(</span>
<span id="cb7-14">    <span class="at" style="color: #657422;">startMothersDay =</span> <span class="st" style="color: #20794D;">"2024-05-15 10:00"</span>, <span class="co" style="color: #5E5E5E;"># Let Mommy Sleep!</span></span>
<span id="cb7-15">    <span class="at" style="color: #657422;">endMothersDay =</span><span class="st" style="color: #20794D;">"2024-05-15 23:59"</span></span>
<span id="cb7-16">    ),</span>
<span id="cb7-17">  <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"GMT"</span></span>
<span id="cb7-18">  )</span>
<span id="cb7-19"></span>
<span id="cb7-20">NextMothersDay_ct</span>
<span id="cb7-21"></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;"># converting from one POSIX to another is easy</span></span>
<span id="cb7-23">NextMothersDay_lt <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(NextMothersDay_ct)</span>
<span id="cb7-24"><span class="fu" style="color: #4758AB;">unclass</span>(NextMothersDay_lt)</span></code></pre></div>
</div>
<p>Voila!</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-15/index.html</guid>
  <pubDate>Mon, 15 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Working with Dates and Times Pt 1</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-12/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>In this post, we will cover the basics of handling dates and times in R using the <code>as.Date</code>, <code>as.POSIXct</code>, and <code>as.POSIXlt</code> functions. We will use the example code below to explain each line in simple terms. Let’s get started!</p>
<p>Here is the script we are going to look at:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># the date object</span></span>
<span id="cb1-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1981-02-25"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">str</span>(Steve_online) <span class="co" style="color: #5E5E5E;">#Date[1:1], format: "1981-02-25</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Date[1:1], format: "1981-02-25"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">class</span>(Steve_online) <span class="co" style="color: #5E5E5E;">#Date</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Date"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">as.numeric</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># stored as number of days since 1970-01-01</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 4073</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;">as.numeric</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1970-01-01"</span>)) <span class="co" style="color: #5E5E5E;"># equals zero</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 0</code></pre>
</div>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;">as.Date</span>(<span class="fu" style="color: #4758AB;">as.Date</span>(<span class="st" style="color: #20794D;">"1970-01-01"</span>) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">4073</span>) <span class="co" style="color: #5E5E5E;"># produces 1981-02-25 -- our original date</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1981-02-25"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># vectors can contain multiple dates</span></span>
<span id="cb11-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.Date</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"1981-02-25"</span>, <span class="st" style="color: #20794D;">"1997-01-12"</span>))</span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;">str</span>(Steve_online)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> Date[1:2], format: "1981-02-25" "1997-01-12"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">Steve_online[<span class="dv" style="color: #AD0000;">2</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "1997-01-12"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="co" style="color: #5E5E5E;"># what about POSIX?</span></span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;"># POSIXct stores date time as integer == # seconds since 1970-01-01 UTC</span></span>
<span id="cb15-3">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXct</span>(<span class="st" style="color: #20794D;">"1981-02-25 02:25:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"US/Mountain"</span>)</span>
<span id="cb15-4"><span class="fu" style="color: #4758AB;">as.integer</span>(<span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">Steve_online</span><span class="st" style="color: #20794D;">`</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 351941100</code></pre>
</div>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># POSIXlt stores date time as list:sec, min, hour, mday, mon, year, wday, yday, isdst, zone, gmtoff</span></span>
<span id="cb17-2">Steve_online <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.POSIXlt</span>(<span class="st" style="color: #20794D;">"1981-02-25 02:25:00"</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">"US/Mountain"</span>)</span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;">as.integer</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># no longer an integer</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: NAs introduced by coercion</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code> [1]  0 25  2 25  1 81  3 55  0 NA NA</code></pre>
</div>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="fu" style="color: #4758AB;">unclass</span>(Steve_online) <span class="co" style="color: #5E5E5E;"># this shows the components of the list</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$sec
[1] 0

$min
[1] 25

$hour
[1] 2

$mday
[1] 25

$mon
[1] 1

$year
[1] 81

$wday
[1] 3

$yday
[1] 55

$isdst
[1] 0

$zone
[1] "MST"

$gmtoff
[1] NA

attr(,"tzone")
[1] "US/Mountain"</code></pre>
</div>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb22-1">month.name[Steve_online<span class="sc" style="color: #5E5E5E;">$</span>mon <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>] <span class="co" style="color: #5E5E5E;"># equals February</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "February"</code></pre>
</div>
</div>
<p>The first line of code creates a date object called <code>Steve_online</code> with the value of February 25, 1981, using the <code>as.Date</code> function. This function is used to convert a character string to a date object. The <code>str</code> function is then used to show the structure of the <code>Steve_online</code> object, which is of class Date.</p>
<p>The <code>as.numeric</code> function is used to convert the <code>Steve_online</code> object to the number of days since January 1, 1970 (known as the Unix epoch). This is a common way of representing dates in programming languages, and is useful for calculations involving dates. We also demonstrate that <code>as.numeric(as.Date("1970-01-01"))</code> returns zero, since this is the starting point of the Unix epoch.</p>
<p>We then show how to add or subtract days from a date object by adding or subtracting the desired number of days (as an integer) to the as.Date function with the reference date of January 1, 1970. In this case, we add 4073 days to January 1, 1970, resulting in the date of February 25, 1981 (our original date).</p>
<p>Next, we demonstrate how to create a vector of date objects by passing a character vector of dates to the as.Date function. The <code>str</code> function is used again to show the structure of the <code>Steve_online</code> object, which is now a vector of two date objects. We then show how to access the second element of the vector using indexing (<code>Steve_online[2]</code>).</p>
<p>Moving on to POSIX objects, we introduce the <code>as.POSIXct</code> function, which creates a POSIXct object that stores date time as an integer equal to the number of seconds since January 1,</p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>datetime</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-12/index.html</guid>
  <pubDate>Fri, 12 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>VBA to R and Back Again: Running R from VBA Pt 2</title>
  <dc:creator>Steven P. Sanderson II, MPH</dc:creator>
  <link>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Yesterday I posted on using VBA to execute R code that is written inside of the VBA script. So today, I will go over a simple example on executing an R script from VBA. So let’s get into the code and what it does.</p>
<p>First, let’s look at the Function called “Run_R_Script”. This function takes four arguments, where the first two are mandatory, and the last two are optional.</p>
<ul>
<li><p>sRApplicationPath - This is the path to the R application that you want to use to run your script. It is a required argument, and you need to provide the full path to the Rscript.exe file on your machine.</p></li>
<li><p>sRFilePath - This is the path to the R script file that you want to execute. It is also a required argument, and you need to provide the full path to your R script file.</p></li>
<li><p>iStyle - This is an optional argument that specifies how the script will be executed. By default, it is set to 1, which means that the script will run in a minimized window.</p></li>
<li><p>bWaitTillComplete - This is another optional argument that specifies whether the function should wait until the script has finished running before returning control to the caller. By default, it is set to True, which means that the function will not return control until the script has completed execution.</p></li>
</ul>
<p>The first line inside the Function defines two variables: sPath and shell.</p>
<ul>
<li><p>sPath - This variable will hold the path to the Rscript.exe file and the path to the R script file, which will be used later to run the script.</p></li>
<li><p>shell - This variable is used to create an instance of the WScript.Shell object.</p></li>
</ul>
<p>Next, we wrap the R path with double quotations to avoid any issues with spaces in the path.</p>
<p>After that, the script deletes Column A.</p>
<p>Then, instead of using the “shell.Run” function, the code uses the “shell.Exec” function to execute the R script. This function returns an object that has a “StdOut” property, which contains the output of the script.</p>
<p>The output is then read using the “ReadAll” method, and the resulting string is split into an array using the “Split” function. The array is then iterated using a “For” loop, and each element of the array is written to Column A, starting at cell A1.</p>
<p>Finally, the Function returns an Integer value, which is the result of the “shell.Run” function.</p>
<p>The Subroutine called “Demo” just demonstrates how to use the “Run_R_Script” function by calling it with the appropriate parameters.</p>
</section>
<section id="full-code" class="level1">
<h1>Full Code</h1>
<p>Here is the R Script</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-2">    <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-3">    <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-4">)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb1-7">    <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-8">        <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-9">        <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-10">    ),</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;">data.frame</span>(</span>
<span id="cb1-12">        <span class="at" style="color: #657422;">x =</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>,</span>
<span id="cb1-13">        <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">rnorm</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-14">    )</span>
<span id="cb1-15">)</span></code></pre></div>
</div>
<p>Full VBA</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode vb code-with-copy"><code class="sourceCode monobasic"><span id="cb2-1"><span class="kw" style="color: #003B4F;">Function </span>Run_R_Script(sRApplicationPath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span>, _</span>
<span id="cb2-2">                        sRFilePath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span>, _</span>
<span id="cb2-3">                        <span class="kw" style="color: #003B4F;">Optional</span> iStyle <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span> = 1, _</span>
<span id="cb2-4">                        <span class="kw" style="color: #003B4F;">Optional</span> bWaitTillComplete <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Boolean</span> = <span class="kw" style="color: #003B4F;">True</span>) <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span></span>
<span id="cb2-5"></span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;">Dim</span> sPath <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">String</span></span>
<span id="cb2-7">    <span class="kw" style="color: #003B4F;">Dim</span> shell <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Object</span></span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;">'Define shell object</span></span>
<span id="cb2-10">    <span class="kw" style="color: #003B4F;">Set </span>shell = VBA.CreateObject(<span class="st" style="color: #20794D;">"WScript.Shell"</span>)</span>
<span id="cb2-11"></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;">'Wrap the R path with double quotations</span></span>
<span id="cb2-13">    sPath = <span class="st" style="color: #20794D;">""""</span> &amp; sRApplicationPath &amp; <span class="st" style="color: #20794D;">""""</span></span>
<span id="cb2-14">    sPath = sPath &amp; <span class="st" style="color: #20794D;">" "</span></span>
<span id="cb2-15">    sPath = sPath &amp; sRFilePath</span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;">'Delete Coumn A</span></span>
<span id="cb2-18">    Columns(<span class="st" style="color: #20794D;">"A"</span>).Delete</span>
<span id="cb2-19">    </span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;">'Get Result</span></span>
<span id="cb2-21">    result = shell.Exec(sPath).StdOut.ReadAll</span>
<span id="cb2-22">    result = Split(result, vbCrLf)</span>
<span id="cb2-23">    <span class="kw" style="color: #003B4F;">For </span>i = 0 <span class="kw" style="color: #003B4F;">To</span> UBound(result)</span>
<span id="cb2-24">        ActiveSheet.Range(<span class="st" style="color: #20794D;">"A1"</span>).Offset(i, 0).Value = result(i)</span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;">Next </span>i</span>
<span id="cb2-26">    </span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;">End Function</span></span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="kw" style="color: #003B4F;">Sub </span>Demo()</span>
<span id="cb2-30">    <span class="kw" style="color: #003B4F;">Dim</span> iEerrorCode <span class="kw" style="color: #003B4F;">As</span> <span class="dt" style="color: #AD0000;">Integer</span></span>
<span id="cb2-31">    iEerrorCode = Run_R_Script(<span class="st" style="color: #20794D;">"C:\Program Files\R\R-4.1.2</span><span class="sc" style="color: #5E5E5E;">\b</span><span class="st" style="color: #20794D;">in</span><span class="sc" style="color: #5E5E5E;">\x64</span><span class="st" style="color: #20794D;">\Rscript.exe"</span>, <span class="st" style="color: #20794D;">"C:\Users\ssanders\Desktop</span><span class="sc" style="color: #5E5E5E;">\t</span><span class="st" style="color: #20794D;">est.R"</span>)</span>
<span id="cb2-32"><span class="kw" style="color: #003B4F;">End Sub</span></span></code></pre></div>
</section>
<section id="picture" class="level1">
<h1>Picture</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/Capture.PNG" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Example Output, VBA, and R</figcaption><p></p>
</figure>
</div>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<p><a href="https://stackoverflow.com/a/54816881">https://stackoverflow.com/a/54816881</a></p>


</section>

 ]]></description>
  <category>rtip</category>
  <category>vba</category>
  <category>excel</category>
  <guid>https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/index.html</guid>
  <pubDate>Wed, 10 May 2023 04:00:00 GMT</pubDate>
  <media:content url="https://www.spsanderson.com/steveondata/posts/rtip-2023-05-10/Capture.PNG" medium="image"/>
</item>
</channel>
</rss>
