---
title: "Generate Random Walk Data with {healthyR.ts}"
author: "Steven P. Sanderson II, MPH"
date: "2022-11-30"
categories: [code, rtip, timeseries, healthyrts]
---

# Introduction

Generating random walk data for timesieries analysis does not have to be difficult, and in fact is not. It can be generated for multiple simulations and have a tidy output. How? [`ts_random_walk()`](https://www.spsanderson.com/healthyR.ts/reference/ts_random_walk.html) from the [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) package. Let's take a look at the function.

# Function

Here is the full function call.

```{r eval=FALSE}
ts_random_walk(
  .mean = 0,
  .sd = 0.1,
  .num_walks = 100,
  .periods = 100,
  .initial_value = 1000
)
```

Now let's look at the arguments to the parameters.

*  `.mean` - The desired mean of the random walks
*  `.sd` - The standard deviation of the random walks
*  `.num_walks` - The number of random walks you want generated
*  `.periods` - The length of the random walk(s) you want generated
*  `.initial_value` - The initial value where the random walks should start

The underlying data of this function is generated by `rnorm()`

# Example

Let's take a look at an example and see some visuals. 

```{r ex1, message=FALSE, warning=FALSE}
library(healthyR.ts)
library(ggplot2)

df <- ts_random_walk(.num_walks = 100)

df
```

There are attributes attached to the output of this function, let's see what they are.

```{r atb}
atb <- attributes(df)

names_to_print <- names(atb)[which(names(atb) != "row.names")]

atb[names_to_print]
```

Now lets visualize.

```{r viz}
df %>%
   ggplot(
       mapping = aes(
           x = x
           , y = cum_y
           , color = factor(run)
           , group = factor(run)
        )
    ) +
    geom_line(alpha = 0.8) +
    ts_random_walk_ggplot_layers(df)
```

Voila!