---
title: "Mixture Distributions with {TidyDensity}"
author: "Steven P. Sanderson II, MPH"
date: "2022-12-13"
categories: [code, rtip, tidydesntiy, mixturemodels]
---

# Introduction

A mixture distribution is a type of probability distribution that is created by combining two or more simpler distributions. This allows us to model complex data that may have multiple underlying patterns. For example, a mixture distribution could be used to model a dataset that includes both continuous and discrete variables.

To create a mixture distribution, we first need to specify the individual distributions that will be combined, as well as the weights that determine how much each distribution contributes to the overall mixture. Once we have these components, we can use them to calculate the probability of any given value occurring in the mixture distribution.

Mixture distributions can be useful in a variety of applications, such as data analysis and machine learning. In data analysis, they can be used to model data that is not well-described by a single distribution, and in machine learning, they can be used to improve the performance of predictive models. Overall, mixture distributions are a powerful tool for understanding and working with complex data.

# Function

Let's take a look a function in [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) that allows us to do this. At this moment, weights are not a parameter to the function.

```{r eval=FALSE}
tidy_mixture_density(...)
```

Now let's take a look at the arguments that get supplied to the `...` parameter.

*  `...` - The random data you want to pass. Example rnorm(50,0,1) or something like tidy_normal(.mean = 5, .sd = 1)


# Example

Let's take a look at an example.

```{r ex1, warning=FALSE, message=FALSE}
library(TidyDensity)

output <- tidy_mixture_density(
  rnorm(100, 0, 1), 
  tidy_normal(.mean = 5, .sd = 1)
)
```

As you can see, you can enter a function that outputs a numeric vector or you can use a `{TidyDensity}` distribution function.

Let's take a look at the outputs.

```{r}
output$data
```

And now the visuals that come with it.

```{r}
output$plots
```

The function also lists the input functions as well.

```{r}
output$input_fns
```

Voila!