---
title: "Geometric Brownian Motion with {healthyR.ts}"
author: "Steven P. Sanderson II, MPH"
date: "2023-01-19"
categories: [code, rtip, xgboost, healthyrai]
---

# Introduction

XGBoost, short for "eXtreme Gradient Boosting," is a powerful and popular machine learning library that is specifically designed for gradient boosting. It is an open-source library and is available in many programming languages, including R.

Gradient boosting is a technique that combines the predictions of multiple weak models to create a strong, more accurate model. XGBoost is an optimized version of gradient boosting that is designed to run faster and more efficiently than other implementations.

Let's take a look at a simple example of how to use XGBoost in R. We will use the iris dataset, a well-known dataset that contains 150 observations of iris flowers, each with four features (sepal length, sepal width, petal length, and petal width) and one target variable (the species of iris). Our goal is to train a model to predict the species of an iris flower based on its features.

First, we need to install the "xgboost" package in R:

```{r eval=FALSE}
install.packages("xgboost")
```

Next, we load the iris dataset and split it into training and test sets:

```{r eval=FALSE}
data(iris)
set.seed(123)
indices <- sample(1:nrow(iris), 0.8*nrow(iris))
train_data <- iris[indices, 1:4]
train_label <- iris[indices, 5]
test_data <- iris[-indices, 1:4]
test_label <- iris[-indices, 5]
```

Now we can train our XGBoost model:

```{r eval=FALSE}
library(xgboost)
xgb_model <- xgboost(
  data = train_data, 
  label = train_label, 
  nrounds = 100, 
  objective = "multi:softmax", 
  num_class = 3
  )
```

Here, we specified the training data, labels, number of rounds (iterations) to run, the objective (multiclass classification) and the number of classes.

Finally, we can use the trained model to make predictions on the test set:

```{r eval=FALSE}
predictions <- predict(xgb_model, test_data)
```


We can also evaluate the performance of our model by comparing the predicted labels to the true labels using metrics such as accuracy:

```{r eval=FALSE}
accuracy <- mean(predictions == test_label)
```

In this example, we used XGBoost to train a model to predict the species of iris flowers based on their features. We saw that XGBoost is a powerful and efficient library for gradient boosting, and it can be easily integrated into a R script.

Keep in mind that this is a simple example, and in real-world scenarios, more preprocessing and parameter tuning is necessary to achieve optimal performance. Also, the dataset is small, and the number of rounds used is also small, which is not ideal for real-world scenarios. But this example shows the basic usage of XGBoost in R.

Ok, so, what's the point? Is there a possibly easier way to do this...yes! You can use the __boilerplace function__ [`hai_auto_xgboost()`](https://www.spsanderson.com/healthyR.ai/reference/hai_auto_xgboost.html) and it's data prep helper [`hai_xgboost_data_prepper()`](https://www.spsanderson.com/healthyR.ai/reference/hai_xgboost_data_prepper.html) from the [`{healthyR.ai}`](https://www.spsanderson.com/healthyR.ai/) library. Let's see how that works.

# Function

Here is the data prepper function and it's arguments.

```{r eval=FALSE}
hai_xgboost_data_prepper(.data, .recipe_formula)
```

*  `.data` - The data that you are passing to the function. Can be any type of data that is accepted by the data parameter of the recipes::reciep() function.
*  `.recipe_formula` - The formula that is going to be passed. For example if you are using the diamonds data then the formula would most likely be something like `price ~` .

Here is the __boilerplate function__

```{r eval=FALSE}
hai_auto_xgboost(
  .data,
  .rec_obj,
  .splits_obj = NULL,
  .rsamp_obj = NULL,
  .tune = TRUE,
  .grid_size = 10,
  .num_cores = 1,
  .best_metric = "f_meas",
  .model_type = "classification"
)
```

Here are it's arguments.

*  `.data` - The data being passed to the function. The time-series object.
*  `.rec_obj` - This is the recipe object you want to use. You can use `hai_xgboost_data_prepper()` an automatic recipe_object.
*  `.splits_obj` - NULL is the default, when NULL then one will be created.
*  `.rsamp_obj` - NULL is the default, when NULL then one will be created. It will default to creating an `rsample::mc_cv()` object.
*  `.tune` - Default is TRUE, this will create a tuning grid and tuned workflow
*  `.grid_size` - Default is 10
*  `.num_cores` - Default is 1
*  `.best_metric` - Default is "f_meas". You can choose a metric depending on the __model_type__ used. If regression then see `hai_default_regression_metric_set()`, if classification then see `hai_default_classification_metric_set()`.
*  `.model_type` - Default is classification, can also be regression.

# Example
Let's take a look at an example and it's output. This is using `{parsnip}` under the hood.

```{r warning=FALSE, message=FALSE}
library(healthyR.ai)

data <- iris

rec_obj <- hai_xgboost_data_prepper(data, Species ~ .)

auto_xgb <- hai_auto_xgboost(
  .data = data,
  .rec_obj = rec_obj,
  .best_metric = "f_meas",
  .num_cores = 1
)
```

There are three main outputs to this function, which are:

1. `recipe_info`
2. `model_info`
3. `tuned_info`

Let's take a look at each. First the __recipe_info__

```{r warning=FALSE, message=FALSE}
auto_xgb$recipe_info
```

Now the __model_info__

```{r warning=FALSE, message=FALSE}
auto_xgb$model_info
```

Now the __tuned_info__

```{r warning=FALSE, message=FALSE}
auto_xgb$tuned_info
```

Voila!