---
title: "{healthyR.ts}: The New and Improved Library for Time Series Analysis"
author: "Steven P. Sanderson II, MPH"
date: "2023-01-30"
categories: [code, rtip, timeseries, healthyrts]
---

# Introduction

Are you looking for a powerful and efficient library for time series analysis? Look no further than [`{healthyR.ts}`](https:/www.spsanderson.com/healthyR.ts/)! This library has recently been updated with new functions and improvements, making it easier for you to analyze and visualize your time series data.

One of the new functions in [`{healthyR.ts}`](https:/www.spsanderson.com/healthyR.ts/) is [`ts_geometric_brownian_motion()`](https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion.html). This function allows you to generate multiple Brownian motion simulations at once, saving you time and effort. With this feature, you can easily generate multiple simulations to compare and analyze different scenarios.

Another new function, [`ts_brownian_motion_augment()`](https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_augment.html), enables you to add a Brownian motion to a time series that you provide. This is a great tool for analyzing the impact of random variations on your data.

The [`ts_geometric_brownian_motion_augment()`](https://www.spsanderson.com/healthyR.ts/reference/ts_geometric_brownian_motion_augment.html) function generates a geometric Brownian motion, allowing you to study the effects of compounding growth or decay in your time series data. And, with the [`ts_brownian_motion_plot()`](https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion_plot.html) function, you can easily plot both augmented and non-augmented Brownian motion plots, giving you a visual representation of your data.

In addition to the new functions, [`{healthyR.ts}`](https:/www.spsanderson.com/healthyR.ts/) has also made several minor fixes and improvements. For example, the [`ts_brownian_motion()`](https://www.spsanderson.com/healthyR.ts/reference/ts_brownian_motion.html) function has been updated and optimized, resulting in a 49x speedup due to vectorization. Additionally, all Brownian motion functions now have an attribute of `.motion_type`, making it easier to track and identify your data.

With all of these new features and improvements, [`{healthyR.ts}`](https:/www.spsanderson.com/healthyR.ts/) is the ideal library for anyone looking to analyze and visualize time series data. So, if you want to take your time series analysis to the next level, install [`{healthyR.ts}`](https:/www.spsanderson.com/healthyR.ts/) today!

# Function

Let's take a look at the new functions.

```{r eval=FALSE}
ts_geometric_brownian_motion(
  .num_sims = 100,
  .time = 25,
  .mean = 0,
  .sigma = 0.1,
  .initial_value = 100,
  .delta_time = 1/365,
  .return_tibble = TRUE
)
```

Its arguments.

*  `.num_sims` - Total number of simulations.
*  `.time` - Total time of the simulation.
*  `.mean` - Expected return
*  `.sigma` - Volatility
*  `.initial_value` - Integer representing the initial value.
*  `.delta_time` - Time step size.
*  `.return_tibble` - The default is TRUE. If set to FALSE then an object of class matrix will be returned.

```{r eval=FALSE}
ts_brownian_motion_augment(
  .data,
  .date_col,
  .value_col,
  .time = 100,
  .num_sims = 10,
  .delta_time = NULL
)
```

Its arguments.

*  `.data` - The data.frame/tibble being augmented.
*  `.date_col` - The column that holds the date.
*  `.value_col` - The value that is going to get augmented. The last value of this column becomes the initial value internally.
*  `.time` - How many time steps ahead.
*  `.num_sims` - How many simulations should be run.
*  `.delta_time` - Time step size.

```{r eval=FALSE}
ts_geometric_brownian_motion_augment(
  .data,
  .date_col,
  .value_col,
  .num_sims = 10,
  .time = 25,
  .mean = 0,
  .sigma = 0.1,
  .delta_time = 1/365
)
```

Its arguments.

*  `.data` - The data you are going to pass to the function to augment.
*  `.date_col` - The column that holds the date
*  `.value_col` - The column that holds the value
*  `.num_sims` - Total number of simulations.
*  `.time` - Total time of the simulation.
*  `.mean` - Expected return
*  `.sigma` - Volatility
*  `.delta_time` - Time step size.

```{r eval=FALSE}
ts_brownian_motion_plot(
  .data, 
  .date_col, 
  .value_col, 
  .interactive = FALSE
)
```

Its arguments.

*  `.data` - The data you are going to pass to the function to augment.
*  `.date_col` - The column that holds the date
*  `.value_col` - The column that holds the value
*  `.interactive` - The default is FALSE, TRUE will produce an interactive plotly plot.

# Examples

First make sure you install [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) if you do not yet already have it, otherwise update it to gain th enew functionality. 

```{r eval=FALSE}
install.packages("healthyR.ts")
```

Now let's take a look at `ts_geometric_brownian_motion()`.

```{r warning=FALSE, message=FALSE}
library(healthyR.ts)

ts_geometric_brownian_motion()
```

Now let's take a look at `ts_brownian_motion_augment()`.

```{r warning=FALSE, message=FALSE}
rn <- rnorm(31)
df <- data.frame(
date_col = seq.Date(from = as.Date("2022-01-01"),
                      to = as.Date("2022-01-31"),
                      by = "day"),
 value = rn
)

ts_brownian_motion_augment(
  .data = df,
  .date_col = date_col,
  .value_col = value
)
```
Now `ts_geometric_brownian_motion_augment()`.

```{r warning=FALSE, message=FALSE}
rn <- rnorm(31)
df <- data.frame(
date_col = seq.Date(from = as.Date("2022-01-01"),
                      to = as.Date("2022-01-31"),
                      by = "day"),
 value = rn
)

ts_geometric_brownian_motion_augment(
  .data = df,
  .date_col = date_col,
  .value_col = value
)
```

Now for `ts_brownian_motion_plot()`.

```{r warning=FALSE, message=FALSE}
ts_geometric_brownian_motion() %>%
  ts_brownian_motion_plot(.date_col = t, .value_col = y)
```

```{r warning=FALSE, message=FALSE}
ts_brownian_motion() %>%
  ts_brownian_motion_plot(t, y, .interactive = TRUE)
```
And with the augmenting functions

```{r warning=FALSE, message=FALSE}
rn <- rnorm(31)
df <- data.frame(
date_col = seq.Date(from = as.Date("2022-01-01"),
                      to = as.Date("2022-01-31"),
                      by = "day"),
 value = rn
)

ts_brownian_motion_augment(
  .data = df,
  .date_col = date_col,
  .value_col = value,
  .time = 30,
  .num_sims = 30
) %>%
  ts_brownian_motion_plot(date_col, value, TRUE)
```

And with a static `ggplot2` plot.

```{r warning=FALSE, message=FALSE}
rn <- rnorm(31)
df <- data.frame(
date_col = seq.Date(from = as.Date("2022-01-01"),
                      to = as.Date("2022-01-31"),
                      by = "day"),
 value = rn
)

ts_brownian_motion_augment(
  .data = df,
  .date_col = date_col,
  .value_col = value,
  .time = 30,
  .num_sims = 30
) %>%
  ts_brownian_motion_plot(date_col, value)
```

Thank you for reading, and Voila!