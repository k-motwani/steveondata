---
title: "Off to CRAN! {tidyAML}"
author: "Steven P. Sanderson II, MPH"
date: "2023-02-13"
categories: [code, rtip, tidyaml, tidymodels]
---

# Introduction

Are you tired of spending hours tuning and testing different machine learning models for your regression or classification problems? The new R package [`{tidyAML}`](https://www.spsanderson.com/tidyAML/) is here to simplify the process for you! tidyAML is a simple interface for automatic machine learning that fits the tidymodels framework, making it easier for you to solve regression and classification problems.

The tidyAML package has been designed with the goal of providing a simple API that automates the entire machine learning pipeline, from data preparation to model selection, training, and prediction. This means that you no longer have to spend hours tuning and testing different models; tidyAML will do it all for you, saving you time and effort.

In this initial release (version 0.0.1), tidyAML introduces a number of new features and minor fixes to improve the overall user experience. Here are some of the updates in this release:

New Features:

*  `make_regression_base_tbl()` and `make_classification_base_tbl()` functions for creating base tables for regression and classification problems, respectively.
*  `internal_make_spec_tbl()` function for making the specification table for the machine learning pipeline.
*  `internal_set_args_to_tune()` function for setting arguments to tune the models. This has not yet been implemented in a true working fashion but might be useful for feedback in this initial release.
*  `create_workflow_set()` function for creating a set of workflows to test different models.
*  `get_model()`, `extract_model_spec()`, `extract_wflw()`, `extract_wflw_fit()`, and `extract_wflw_pred()` functions for extracting different parts of the machine learning pipeline.
*  `match_args()` function for matching arguments between the base and specification tables.

Minor Fixes and Improvements:

*  Updates to `fast_classification_parsnip_spec_tbl()` and `fast_regression_parsnip_spec_tbl()` to use the `make_regression` and `make_classification` functions and the `internal_make_spec_tbl()` function.
*  Addition of a class for the base table functions and using that class in `internal_make_spec_tbl()`.
*  Update to the DESCRIPTION for R >= 3.4.0.

In conclusion, tidyAML is a game-changer for those looking to automate the machine learning pipeline. It provides a simple API that eliminates the need for manual tuning and testing of different models. With the updates in this initial release, the tidyAML package is sure to make your machine learning journey easier and more efficient.

# Function

There are too many functions to go over in this post so [you can find them all here](https://www.spsanderson.com/tidyAML/reference/index.html)

# Examples

Even though there are many functions to go over, we can showcase some with a small useful example. So let's get at it!

```{r warning=FALSE, message=FALSE}
library(tidyAML)
library(recipes)
library(dplyr)

rec_obj <- recipe(mpg ~ ., data = mtcars)

frt_tbl <- fast_regression(
  .data = mtcars, 
  .rec_obj = rec_obj, 
  .parsnip_eng = c("lm","glm"),
  .parsnip_fns = "linear_reg"
  )

glimpse(frt_tbl)
```

Now let's go through the extractors.

The `get_model()` function.
```{r}
get_model(frt_tbl, 2) |>
  glimpse()
```

The `extract_model_spec()` function.
```{r}
extract_model_spec(frt_tbl, 1)
```

Or do multiples:
```{r}
extract_model_spec(frt_tbl, 1:2)
```

The `extract_wflw()` function.
```{r}
extract_wflw(frt_tbl, 1)
```

Or do multiples:
```{r}
extract_wflw(frt_tbl, c(1, 2))
```

The `extract_wflw_fit()` function.
```{r}
extract_wflw_fit(frt_tbl, 1)
```

Or do multiples:
```{r}
extract_wflw_fit(frt_tbl, 1:2)
```

Finally the `extract_wflw_pred()` function.
```{r}
extract_wflw_pred(frt_tbl, 2)
```

Or do multiples:
```{r}
extract_wflw_pred(frt_tbl, 1:2)
```

Voila!