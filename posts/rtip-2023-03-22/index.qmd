---
title: "Some Examples of Cumulative Mean with {TidyDensity}"
author: "Steven P. Sanderson II, MPH"
date: "2023-03-22"
categories: [rtip, tidydensity]
---

# Introduction

Cumulative mean is a statistical measure that calculates the mean of a set of numbers up to a certain point in time or after a certain number of observations. It is also known as a running average or moving average.

Cumulative mean can be useful in a variety of contexts. For example:

*    Tracking progress: Cumulative mean can be used to track progress over time. For instance, a teacher might use it to track the average test scores of her students throughout the school year.

*    Analyzing trends: Cumulative mean can help identify trends in data. For example, a business might use it to track the average revenue generated by a new product over the course of several months.

*    Smoothing data: Cumulative mean can be used to smooth out fluctuations in data. For instance, a meteorologist might use it to calculate the average temperature over the course of a year, which would help to smooth out the effects of daily temperature fluctuations.

In summary, cumulative mean is a useful statistical measure that can help track progress, analyze trends, and smooth out fluctuations in data.

# Function

The function we will review is `cmean()` from the [`{TidyDensity}`](https://www.spsanderson.com/TidyDensity/) R package. Let's take a look at it.

```{r eval=FALSE}
cmean()
```

The only argument is `.x` which is a numeric vector as this is a vectorized function. Let's see it in use.

# Example

First let's load in __TidyDensity__

```{r warning=FALSE, message=FALSE}
library(TidyDensity)
```

Ok now let's make some data. For this we are going to use the simple `rnorm()` function.

```{r}
x <- rnorm(100)

head(x)
```

Ok, now that we have our vector, let's run it through the function and see what it outputs and then we will graph it.

```{r}
cmx <- cmean(x)
head(cmx)
```

Now let's graph it.

```{r}
plot(cmx, type = "l")
```

Ok nice, so can we do this on grouped data or lists of data? Of course! First let's use a for loop to generate a list of __rnorm()__ values.

```{r}
# Initialize an empty list to store the generated values
my_list <- list()

# Generate values using rnorm(5) in a for loop and store them in the list
for (i in 1:5) {
  my_list[[i]] <- rnorm(100)
}

# Print the generated list
purrr::map(my_list, head)
```

Now that we have our list object let's go ahead and plot the values out after we pass the data through `cmean()`.

```{r, warning=FALSE, message=FALSE}
library(purrr)

my_list |>
  map(\(x) x |> cmean() |> plot(type = "l"))
```

From here I think it is easy to see how one could do this on gruoped data as well with dplyr's __group_by()__.