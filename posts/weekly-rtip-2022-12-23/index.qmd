---
title: "Simulating Time Series Model Forecasts with {healthyR.ts}"
author: "Steven P. Sanderson II, MPH"
date: "2022-12-23"
categories: [code, weeklytip, healthyrts, timeseries, simulation]
---

# Introduction

Time series models are a powerful tool for forecasting future values of a time-dependent variable. These models are commonly used in a variety of fields, including finance, economics, and engineering, to predict future outcomes based on past data.

One important aspect of time series modeling is the ability to simulate model forecasts. This allows us to evaluate the performance of different forecasting methods and to compare the results of different models. Simulating forecasts also allows us to assess the uncertainty associated with our predictions, which can be especially useful when making important decisions based on the forecast.

There are several benefits to simulating time series model forecasts:

-   Improved accuracy: By simulating forecasts, we can identify the best forecasting method for a given time series and optimize its parameters. This can lead to more accurate forecasts, especially for long-term predictions.

-   Enhanced understanding: Simulating forecasts helps us to understand how different factors, such as seasonality and trend, affect the prediction. This understanding can inform our decision-making and allow us to make more informed predictions.

-   Improved communication: Simulating forecasts allows us to present the uncertainty associated with our predictions, which can be useful for communicating the potential risks and benefits of different courses of action.

The R package [`{healthyR.ts}`](https://www.spsanderson.com/healthyR.ts/) includes a function called [`ts_forecast_simulator()`](https://www.spsanderson.com/healthyR.ts/reference/ts_forecast_simulator.html) that can be used to simulate time series model forecasts. This function allows users to specify the forecasting method, the number of simulations to run, and the length of the forecast horizon. It also provides options for visualizing the results, including plots of the forecast distribution and summary statistics such as the mean and standard deviation of the forecasts.

In summary, simulating time series model forecasts is a valuable tool for improving the accuracy and understanding of our predictions, as well as for communicating the uncertainty associated with these forecasts. The `ts_forecast_simulator()` function in the `{healthyR.ts}` package is a useful tool for performing these simulations in R.

# Function

Let's take a look at the full function call.

```{r eval=FALSE}
ts_forecast_simulator(
  .model,
  .data,
  .ext_reg = NULL,
  .frequency = NULL,
  .bootstrap = TRUE,
  .horizon = 4,
  .iterations = 25,
  .sim_color = "steelblue",
  .alpha = 0.05
)
```

Now let's take a look at the arguments that get provided to the parameters.

-   `.model` - A forecasting model of one of the following from the forecast package:
    -   Arima
    -   auto.arima
    -   ets
    -   nnetar
    -   Arima() with xreg
-   `.data` - The data that is used for the .model parameter. This is used with `timetk::tk_index()`
-   `.ext_reg` - A tibble or matrix of future xregs that should be the same length as the horizon you want to forecast.
-   `.frequency` - This is for the conversion of an internal table and should match the time frequency of the data.
-   `.bootstrap` - A boolean value of TRUE/FALSE. From `forecast::simulate.Arima()` Do simulation using resampled errors rather than normally distributed errors.
-   `.horizon` - An integer defining the forecast horizon.
-   `.iterations` - An integer, set the number of iterations of the simulation.
-   `.sim_color` - Set the color of the simulation paths lines.
-   `.alpha` - Set the opacity level of the simulation path lines.

Great, now let's take a look at examples.

# Examples

```{r ex1, warning=FALSE, message=FALSE}
library(healthyR.ts)
library(forecast)

fit <- auto.arima(AirPassengers)
data_tbl <- ts_to_tbl(AirPassengers)

# Simulate 50 possible forecast paths, with .horizon of 12 months
output <- ts_forecast_simulator(
  .model        = fit
  , .horizon    = 12
  , .iterations = 50
  , .data       = data_tbl
)
```

Ok, so now we have our output object, which is a list object. Let's see what it contains.

![Forecast Simulation Output](forecast_sim_output.png)

Now, let's explore each element.

First the forecast simulation data.

```{r warning=FALSE, message=FALSE}
output$forecast_sim
output$forecast_sim_tbl
```

The time series that was used.

```{r}
output$time_series
```

The fitted values in two different formats

```{r}
output$fitted_values
output$fitted_values_tbl
```

The residual values in two different formats

```{r}
output$residual_values
output$residual_values_tbl
```

The input data itself

```{r}
output$input_data
```

The time series simulations

```{r}
output$sim_ts_tbl
```

Now, the visuals, first the static `ggplot`

```{r}
output$ggplot
```

The interactive `plotly` plot.

```{r}
output$plotly_plot
```

Voila!
