---
title: "Auto KNN with {healthyR.ai}"
author: "Steven P. Sanderson II, MPH"
date: "2022-12-02"
categories: [code, weeklytip, knn, healthyrai]
---

# Introduction

Minimal coding ML is not something that is unheard of and is rather prolific, think `h2o` and `pycaret` just to name two. There is also no shortage available for `R` with the `h2o` interface, and `tidyfit`. There are also similar low-code workflows in my `r` package [`{healthyR.ai}`](https://www.spsanderson.com/healthyR.ai/). Today I will specifically go through the workflow for Automatic KNN classification for the Iris data set where we will classify the Species.

# Function

Let's take a look at the two `{healthyR.ai}` functions that we will be using. First we have the **data prepper** [`hai_knn_data_prepper()`](https://www.spsanderson.com/healthyR.ai/reference/hai_knn_data_prepper.html) which will get the data ready for use with the `knn` algorithm, and then we have the actual **auto ml** function [`hai_auto_knn()`](https://www.spsanderson.com/healthyR.ai/reference/hai_auto_knn.html). Let's take a look at the function calls.

First **hai_knn_data_prepper()**

```{r prepper, eval=FALSE}
hai_knn_data_prepper(.data, .recipe_formula)
```

Now let's look at the arguments to those parameters.

-   `.data` - The data that you are passing to the function. Can be any type of data that is accepted by the data parameter of the recipes::reciep() function.
-   `.recipe_formula` - The formula that is going to be passed. For example if you are using the iris data then the formula would most likely be something like `Species ~ .`

Now let's take a look at the **automl** function.

```{r aml, eval=FALSE}
hai_auto_knn(
  .data,
  .rec_obj,
  .splits_obj = NULL,
  .rsamp_obj = NULL,
  .tune = TRUE,
  .grid_size = 10,
  .num_cores = 1,
  .best_metric = "rmse",
  .model_type = "regression"
)
```

Again let's look at the arguments to the parameters.

-   `.data` - The data being passed to the function. The time-series object.
-   `.rec_obj` - This is the recipe object you want to use. You can use `hai_knn_data_prepper()` an automatic recipe_object.
-   `.splits_obj` - NULL is the default, when NULL then one will be created.
-   `.rsamp_obj` - NULL is the default, when NULL then one will be created. It will default to creating an rsample::mc_cv() object.
-   `.tune` - Default is TRUE, this will create a tuning grid and tuned workflow
-   `.grid_size` - Default is 10
-   `.num_cores` - Default is 1
-   `.best_metric` - Default is "rmse". You can choose a metric depending on the model_type used. If regression then see `hai_default_regression_metric_set()`, if classification then see `hai_default_classification_metric_set()`.
-   `.model_type` - Default is regression, can also be classification.

# Example

For this example we are going to use the `iris` data set where we are going to use the `hai_auto_knn()` to classify the **Species**.

```{r ex1, warning=FALSE, message=FALSE}
library(healthyR.ai)

data <- iris

rec_obj <- hai_knn_data_prepper(data, Species ~ .)

auto_knn <- hai_auto_knn(
  .data = data,
  .rec_obj = rec_obj,
  .best_metric = "f_meas",
  .model_type = "classification",
  .num_cores = 12
)
```

Now let's take a look at the complete output of the `auto_knn` object. The outputs are as follows:

-   recipe
-   model specification
-   workflow
-   tuned model (grid ect)

## Recipe Output

```{r rec_obj}
auto_knn$recipe_info
```

## Model Info

```{r model_info}
auto_knn$model_info$was_tuned
```

```{r}
auto_knn$model_info$model_spec
```

```{r}
auto_knn$model_info$wflw
```

```{r}
auto_knn$model_info$fitted_wflw
```

## Tuning Info

```{r tune}
auto_knn$tuned_info$tuning_grid
```

```{r}
auto_knn$tuned_info$cv_obj
```

```{r}
auto_knn$tuned_info$tuned_results
```

```{r}
auto_knn$tuned_info$grid_size
```

```{r}
auto_knn$tuned_info$best_metric
```

```{r}
auto_knn$tuned_info$best_result_set
```

```{r}
auto_knn$tuned_info$tuning_grid_plot
```

```{r}
auto_knn$tuned_info$plotly_grid_plot
```

Voila!

Thank you for reading.
